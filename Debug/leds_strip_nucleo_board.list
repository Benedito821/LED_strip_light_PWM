
leds_strip_nucleo_board.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000480c  0800013c  0800013c  0001013c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ac  08004948  08004948  00014948  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  080049f4  080049f4  000149f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080049f8  080049f8  000149f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000000c  20000008  080049fc  00020008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00003a3c  20000014  08004a08  00020014  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  20003a50  08004a08  00023a50  2**0
                  ALLOC
  8 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
  9 .debug_info   00010763  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 000026d6  00000000  00000000  000307a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00001570  00000000  00000000  00032e80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 00001448  00000000  00000000  000343f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  000224d1  00000000  00000000  00035838  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   0001235c  00000000  00000000  00057d09  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    000dab27  00000000  00000000  0006a065  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000050  00000000  00000000  00144b8c  2**0
                  CONTENTS, READONLY
 17 .debug_frame  0000591c  00000000  00000000  00144bdc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	; (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	; (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	20000014 	.word	0x20000014
 8000158:	00000000 	.word	0x00000000
 800015c:	08004930 	.word	0x08004930

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	; (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	; (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	; (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	20000018 	.word	0x20000018
 8000178:	08004930 	.word	0x08004930

0800017c <WS2812B_clear>:
uint32_t OneLed_DMA_BUF_TEMP[24]={0};
uint8_t leds_data[4] = {0};


void WS2812B_clear(void)
{
 800017c:	b580      	push	{r7, lr}
 800017e:	b082      	sub	sp, #8
 8000180:	af00      	add	r7, sp, #0
	int i=0;
 8000182:	2300      	movs	r3, #0
 8000184:	607b      	str	r3, [r7, #4]
  for(i=DELAY_LENGTH;i<BUFF_LENGTH;i++) 
 8000186:	2330      	movs	r3, #48	; 0x30
 8000188:	607b      	str	r3, [r7, #4]
 800018a:	e007      	b.n	800019c <WS2812B_clear+0x20>
			BUFF_DMA[i] = ZERO;
 800018c:	4a08      	ldr	r2, [pc, #32]	; (80001b0 <WS2812B_clear+0x34>)
 800018e:	687b      	ldr	r3, [r7, #4]
 8000190:	211a      	movs	r1, #26
 8000192:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
  for(i=DELAY_LENGTH;i<BUFF_LENGTH;i++) 
 8000196:	687b      	ldr	r3, [r7, #4]
 8000198:	3301      	adds	r3, #1
 800019a:	607b      	str	r3, [r7, #4]
 800019c:	687b      	ldr	r3, [r7, #4]
 800019e:	f5b3 6f64 	cmp.w	r3, #3648	; 0xe40
 80001a2:	dbf3      	blt.n	800018c <WS2812B_clear+0x10>
	 WS2812B_light();
 80001a4:	f000 f93a 	bl	800041c <WS2812B_light>
}
 80001a8:	bf00      	nop
 80001aa:	3708      	adds	r7, #8
 80001ac:	46bd      	mov	sp, r7
 80001ae:	bd80      	pop	{r7, pc}
 80001b0:	20000030 	.word	0x20000030

080001b4 <WS2812B_pixel_rgb_to_BUFF_DMA>:

void WS2812B_pixel_rgb_to_BUFF_DMA(uint8_t Rpixel , uint8_t Gpixel, uint8_t Bpixel, uint32_t posX)
{
 80001b4:	b480      	push	{r7}
 80001b6:	b085      	sub	sp, #20
 80001b8:	af00      	add	r7, sp, #0
 80001ba:	603b      	str	r3, [r7, #0]
 80001bc:	4603      	mov	r3, r0
 80001be:	71fb      	strb	r3, [r7, #7]
 80001c0:	460b      	mov	r3, r1
 80001c2:	71bb      	strb	r3, [r7, #6]
 80001c4:	4613      	mov	r3, r2
 80001c6:	717b      	strb	r3, [r7, #5]
  uint32_t pos=0;
 80001c8:	2300      	movs	r3, #0
 80001ca:	60fb      	str	r3, [r7, #12]
  for(pos=0;pos<8;pos++)
 80001cc:	2300      	movs	r3, #0
 80001ce:	60fb      	str	r3, [r7, #12]
 80001d0:	e074      	b.n	80002bc <WS2812B_pixel_rgb_to_BUFF_DMA+0x108>
  {
    if (BitIsSet(Rpixel,(7-pos)) == 1)
 80001d2:	79fa      	ldrb	r2, [r7, #7]
 80001d4:	68fb      	ldr	r3, [r7, #12]
 80001d6:	f1c3 0307 	rsb	r3, r3, #7
 80001da:	fa42 f303 	asr.w	r3, r2, r3
 80001de:	f003 0301 	and.w	r3, r3, #1
 80001e2:	b2db      	uxtb	r3, r3
 80001e4:	2b00      	cmp	r3, #0
 80001e6:	d00d      	beq.n	8000204 <WS2812B_pixel_rgb_to_BUFF_DMA+0x50>
      BUFF_DMA[DELAY_LENGTH+posX*24+pos+8] = ONE;
 80001e8:	683a      	ldr	r2, [r7, #0]
 80001ea:	4613      	mov	r3, r2
 80001ec:	005b      	lsls	r3, r3, #1
 80001ee:	4413      	add	r3, r2
 80001f0:	00db      	lsls	r3, r3, #3
 80001f2:	461a      	mov	r2, r3
 80001f4:	68fb      	ldr	r3, [r7, #12]
 80001f6:	4413      	add	r3, r2
 80001f8:	3338      	adds	r3, #56	; 0x38
 80001fa:	4a35      	ldr	r2, [pc, #212]	; (80002d0 <WS2812B_pixel_rgb_to_BUFF_DMA+0x11c>)
 80001fc:	2134      	movs	r1, #52	; 0x34
 80001fe:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8000202:	e00c      	b.n	800021e <WS2812B_pixel_rgb_to_BUFF_DMA+0x6a>
    else
      BUFF_DMA[DELAY_LENGTH+posX*24+pos+8] = ZERO;
 8000204:	683a      	ldr	r2, [r7, #0]
 8000206:	4613      	mov	r3, r2
 8000208:	005b      	lsls	r3, r3, #1
 800020a:	4413      	add	r3, r2
 800020c:	00db      	lsls	r3, r3, #3
 800020e:	461a      	mov	r2, r3
 8000210:	68fb      	ldr	r3, [r7, #12]
 8000212:	4413      	add	r3, r2
 8000214:	3338      	adds	r3, #56	; 0x38
 8000216:	4a2e      	ldr	r2, [pc, #184]	; (80002d0 <WS2812B_pixel_rgb_to_BUFF_DMA+0x11c>)
 8000218:	211a      	movs	r1, #26
 800021a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		
    if (BitIsSet(Gpixel,(7-pos)) == 1)
 800021e:	79ba      	ldrb	r2, [r7, #6]
 8000220:	68fb      	ldr	r3, [r7, #12]
 8000222:	f1c3 0307 	rsb	r3, r3, #7
 8000226:	fa42 f303 	asr.w	r3, r2, r3
 800022a:	f003 0301 	and.w	r3, r3, #1
 800022e:	b2db      	uxtb	r3, r3
 8000230:	2b00      	cmp	r3, #0
 8000232:	d00d      	beq.n	8000250 <WS2812B_pixel_rgb_to_BUFF_DMA+0x9c>
      BUFF_DMA[DELAY_LENGTH+posX*24+pos+0] = ONE;
 8000234:	683a      	ldr	r2, [r7, #0]
 8000236:	4613      	mov	r3, r2
 8000238:	005b      	lsls	r3, r3, #1
 800023a:	4413      	add	r3, r2
 800023c:	00db      	lsls	r3, r3, #3
 800023e:	461a      	mov	r2, r3
 8000240:	68fb      	ldr	r3, [r7, #12]
 8000242:	4413      	add	r3, r2
 8000244:	3330      	adds	r3, #48	; 0x30
 8000246:	4a22      	ldr	r2, [pc, #136]	; (80002d0 <WS2812B_pixel_rgb_to_BUFF_DMA+0x11c>)
 8000248:	2134      	movs	r1, #52	; 0x34
 800024a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 800024e:	e00c      	b.n	800026a <WS2812B_pixel_rgb_to_BUFF_DMA+0xb6>
    else
      BUFF_DMA[DELAY_LENGTH+posX*24+pos+0] = ZERO;
 8000250:	683a      	ldr	r2, [r7, #0]
 8000252:	4613      	mov	r3, r2
 8000254:	005b      	lsls	r3, r3, #1
 8000256:	4413      	add	r3, r2
 8000258:	00db      	lsls	r3, r3, #3
 800025a:	461a      	mov	r2, r3
 800025c:	68fb      	ldr	r3, [r7, #12]
 800025e:	4413      	add	r3, r2
 8000260:	3330      	adds	r3, #48	; 0x30
 8000262:	4a1b      	ldr	r2, [pc, #108]	; (80002d0 <WS2812B_pixel_rgb_to_BUFF_DMA+0x11c>)
 8000264:	211a      	movs	r1, #26
 8000266:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		
    if (BitIsSet(Bpixel,(7-pos)) == 1)
 800026a:	797a      	ldrb	r2, [r7, #5]
 800026c:	68fb      	ldr	r3, [r7, #12]
 800026e:	f1c3 0307 	rsb	r3, r3, #7
 8000272:	fa42 f303 	asr.w	r3, r2, r3
 8000276:	f003 0301 	and.w	r3, r3, #1
 800027a:	b2db      	uxtb	r3, r3
 800027c:	2b00      	cmp	r3, #0
 800027e:	d00d      	beq.n	800029c <WS2812B_pixel_rgb_to_BUFF_DMA+0xe8>
      BUFF_DMA[DELAY_LENGTH+posX*24+pos+16] = ONE;
 8000280:	683a      	ldr	r2, [r7, #0]
 8000282:	4613      	mov	r3, r2
 8000284:	005b      	lsls	r3, r3, #1
 8000286:	4413      	add	r3, r2
 8000288:	00db      	lsls	r3, r3, #3
 800028a:	461a      	mov	r2, r3
 800028c:	68fb      	ldr	r3, [r7, #12]
 800028e:	4413      	add	r3, r2
 8000290:	3340      	adds	r3, #64	; 0x40
 8000292:	4a0f      	ldr	r2, [pc, #60]	; (80002d0 <WS2812B_pixel_rgb_to_BUFF_DMA+0x11c>)
 8000294:	2134      	movs	r1, #52	; 0x34
 8000296:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 800029a:	e00c      	b.n	80002b6 <WS2812B_pixel_rgb_to_BUFF_DMA+0x102>
    else
      BUFF_DMA[DELAY_LENGTH+posX*24+pos+16] = ZERO;
 800029c:	683a      	ldr	r2, [r7, #0]
 800029e:	4613      	mov	r3, r2
 80002a0:	005b      	lsls	r3, r3, #1
 80002a2:	4413      	add	r3, r2
 80002a4:	00db      	lsls	r3, r3, #3
 80002a6:	461a      	mov	r2, r3
 80002a8:	68fb      	ldr	r3, [r7, #12]
 80002aa:	4413      	add	r3, r2
 80002ac:	3340      	adds	r3, #64	; 0x40
 80002ae:	4a08      	ldr	r2, [pc, #32]	; (80002d0 <WS2812B_pixel_rgb_to_BUFF_DMA+0x11c>)
 80002b0:	211a      	movs	r1, #26
 80002b2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
  for(pos=0;pos<8;pos++)
 80002b6:	68fb      	ldr	r3, [r7, #12]
 80002b8:	3301      	adds	r3, #1
 80002ba:	60fb      	str	r3, [r7, #12]
 80002bc:	68fb      	ldr	r3, [r7, #12]
 80002be:	2b07      	cmp	r3, #7
 80002c0:	d987      	bls.n	80001d2 <WS2812B_pixel_rgb_to_BUFF_DMA+0x1e>
  }
}
 80002c2:	bf00      	nop
 80002c4:	bf00      	nop
 80002c6:	3714      	adds	r7, #20
 80002c8:	46bd      	mov	sp, r7
 80002ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002ce:	4770      	bx	lr
 80002d0:	20000030 	.word	0x20000030

080002d4 <WS2812B_prepareValue>:
void WS2812B_prepareValue (uint8_t r00, uint8_t g00, uint8_t b00,
                           uint8_t r01, uint8_t g01, uint8_t b01,
													 uint8_t r02, uint8_t g02, uint8_t b02,
													 uint8_t r03, uint8_t g03, uint8_t b03,
													 uint8_t r04, uint8_t g04, uint8_t b04)
{
 80002d4:	b490      	push	{r4, r7}
 80002d6:	b082      	sub	sp, #8
 80002d8:	af00      	add	r7, sp, #0
 80002da:	4604      	mov	r4, r0
 80002dc:	4608      	mov	r0, r1
 80002de:	4611      	mov	r1, r2
 80002e0:	461a      	mov	r2, r3
 80002e2:	4623      	mov	r3, r4
 80002e4:	71fb      	strb	r3, [r7, #7]
 80002e6:	4603      	mov	r3, r0
 80002e8:	71bb      	strb	r3, [r7, #6]
 80002ea:	460b      	mov	r3, r1
 80002ec:	717b      	strb	r3, [r7, #5]
 80002ee:	4613      	mov	r3, r2
 80002f0:	713b      	strb	r3, [r7, #4]
  rgb_temp[0][0]=r00; rgb_temp[0][1]=g00; rgb_temp[0][2]=b00;
 80002f2:	4a1c      	ldr	r2, [pc, #112]	; (8000364 <WS2812B_prepareValue+0x90>)
 80002f4:	79fb      	ldrb	r3, [r7, #7]
 80002f6:	7013      	strb	r3, [r2, #0]
 80002f8:	4a1a      	ldr	r2, [pc, #104]	; (8000364 <WS2812B_prepareValue+0x90>)
 80002fa:	79bb      	ldrb	r3, [r7, #6]
 80002fc:	7053      	strb	r3, [r2, #1]
 80002fe:	4a19      	ldr	r2, [pc, #100]	; (8000364 <WS2812B_prepareValue+0x90>)
 8000300:	797b      	ldrb	r3, [r7, #5]
 8000302:	7093      	strb	r3, [r2, #2]
  rgb_temp[1][0]=r01; rgb_temp[1][1]=g01; rgb_temp[1][2]=b01;
 8000304:	4a17      	ldr	r2, [pc, #92]	; (8000364 <WS2812B_prepareValue+0x90>)
 8000306:	793b      	ldrb	r3, [r7, #4]
 8000308:	70d3      	strb	r3, [r2, #3]
 800030a:	4a16      	ldr	r2, [pc, #88]	; (8000364 <WS2812B_prepareValue+0x90>)
 800030c:	7c3b      	ldrb	r3, [r7, #16]
 800030e:	7113      	strb	r3, [r2, #4]
 8000310:	4a14      	ldr	r2, [pc, #80]	; (8000364 <WS2812B_prepareValue+0x90>)
 8000312:	7d3b      	ldrb	r3, [r7, #20]
 8000314:	7153      	strb	r3, [r2, #5]
  rgb_temp[2][0]=r02; rgb_temp[2][1]=g02; rgb_temp[2][2]=b02;
 8000316:	4a13      	ldr	r2, [pc, #76]	; (8000364 <WS2812B_prepareValue+0x90>)
 8000318:	7e3b      	ldrb	r3, [r7, #24]
 800031a:	7193      	strb	r3, [r2, #6]
 800031c:	4a11      	ldr	r2, [pc, #68]	; (8000364 <WS2812B_prepareValue+0x90>)
 800031e:	7f3b      	ldrb	r3, [r7, #28]
 8000320:	71d3      	strb	r3, [r2, #7]
 8000322:	4a10      	ldr	r2, [pc, #64]	; (8000364 <WS2812B_prepareValue+0x90>)
 8000324:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000328:	7213      	strb	r3, [r2, #8]
  rgb_temp[3][0]=r03; rgb_temp[3][1]=g03; rgb_temp[3][2]=b03;
 800032a:	4a0e      	ldr	r2, [pc, #56]	; (8000364 <WS2812B_prepareValue+0x90>)
 800032c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000330:	7253      	strb	r3, [r2, #9]
 8000332:	4a0c      	ldr	r2, [pc, #48]	; (8000364 <WS2812B_prepareValue+0x90>)
 8000334:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8000338:	7293      	strb	r3, [r2, #10]
 800033a:	4a0a      	ldr	r2, [pc, #40]	; (8000364 <WS2812B_prepareValue+0x90>)
 800033c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000340:	72d3      	strb	r3, [r2, #11]
  rgb_temp[4][0]=r04; rgb_temp[4][1]=g04; rgb_temp[4][2]=b04;
 8000342:	4a08      	ldr	r2, [pc, #32]	; (8000364 <WS2812B_prepareValue+0x90>)
 8000344:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8000348:	7313      	strb	r3, [r2, #12]
 800034a:	4a06      	ldr	r2, [pc, #24]	; (8000364 <WS2812B_prepareValue+0x90>)
 800034c:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8000350:	7353      	strb	r3, [r2, #13]
 8000352:	4a04      	ldr	r2, [pc, #16]	; (8000364 <WS2812B_prepareValue+0x90>)
 8000354:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8000358:	7393      	strb	r3, [r2, #14]
}
 800035a:	bf00      	nop
 800035c:	3708      	adds	r7, #8
 800035e:	46bd      	mov	sp, r7
 8000360:	bc90      	pop	{r4, r7}
 8000362:	4770      	bx	lr
 8000364:	20003930 	.word	0x20003930

08000368 <WS2812B_setValue>:
			}
}


void WS2812B_setValue(void)
{
 8000368:	b590      	push	{r4, r7, lr}
 800036a:	b083      	sub	sp, #12
 800036c:	af00      	add	r7, sp, #0
  uint8_t n=0;
 800036e:	2300      	movs	r3, #0
 8000370:	71fb      	strb	r3, [r7, #7]
  for(n=0;n<30;n++){
 8000372:	2300      	movs	r3, #0
 8000374:	71fb      	strb	r3, [r7, #7]
 8000376:	e047      	b.n	8000408 <WS2812B_setValue+0xa0>
    WS2812B_pixel_rgb_to_BUFF_DMA( rgb_temp[0][0], rgb_temp[0][1], rgb_temp[0][2], n*5);
 8000378:	4b27      	ldr	r3, [pc, #156]	; (8000418 <WS2812B_setValue+0xb0>)
 800037a:	7818      	ldrb	r0, [r3, #0]
 800037c:	4b26      	ldr	r3, [pc, #152]	; (8000418 <WS2812B_setValue+0xb0>)
 800037e:	7859      	ldrb	r1, [r3, #1]
 8000380:	4b25      	ldr	r3, [pc, #148]	; (8000418 <WS2812B_setValue+0xb0>)
 8000382:	789c      	ldrb	r4, [r3, #2]
 8000384:	79fa      	ldrb	r2, [r7, #7]
 8000386:	4613      	mov	r3, r2
 8000388:	009b      	lsls	r3, r3, #2
 800038a:	4413      	add	r3, r2
 800038c:	4622      	mov	r2, r4
 800038e:	f7ff ff11 	bl	80001b4 <WS2812B_pixel_rgb_to_BUFF_DMA>
    WS2812B_pixel_rgb_to_BUFF_DMA( rgb_temp[1][0], rgb_temp[1][1], rgb_temp[1][2], n*5+1);
 8000392:	4b21      	ldr	r3, [pc, #132]	; (8000418 <WS2812B_setValue+0xb0>)
 8000394:	78d8      	ldrb	r0, [r3, #3]
 8000396:	4b20      	ldr	r3, [pc, #128]	; (8000418 <WS2812B_setValue+0xb0>)
 8000398:	7919      	ldrb	r1, [r3, #4]
 800039a:	4b1f      	ldr	r3, [pc, #124]	; (8000418 <WS2812B_setValue+0xb0>)
 800039c:	795c      	ldrb	r4, [r3, #5]
 800039e:	79fa      	ldrb	r2, [r7, #7]
 80003a0:	4613      	mov	r3, r2
 80003a2:	009b      	lsls	r3, r3, #2
 80003a4:	4413      	add	r3, r2
 80003a6:	3301      	adds	r3, #1
 80003a8:	4622      	mov	r2, r4
 80003aa:	f7ff ff03 	bl	80001b4 <WS2812B_pixel_rgb_to_BUFF_DMA>
    WS2812B_pixel_rgb_to_BUFF_DMA( rgb_temp[2][0], rgb_temp[2][1], rgb_temp[2][2], n*5+2);
 80003ae:	4b1a      	ldr	r3, [pc, #104]	; (8000418 <WS2812B_setValue+0xb0>)
 80003b0:	7998      	ldrb	r0, [r3, #6]
 80003b2:	4b19      	ldr	r3, [pc, #100]	; (8000418 <WS2812B_setValue+0xb0>)
 80003b4:	79d9      	ldrb	r1, [r3, #7]
 80003b6:	4b18      	ldr	r3, [pc, #96]	; (8000418 <WS2812B_setValue+0xb0>)
 80003b8:	7a1c      	ldrb	r4, [r3, #8]
 80003ba:	79fa      	ldrb	r2, [r7, #7]
 80003bc:	4613      	mov	r3, r2
 80003be:	009b      	lsls	r3, r3, #2
 80003c0:	4413      	add	r3, r2
 80003c2:	3302      	adds	r3, #2
 80003c4:	4622      	mov	r2, r4
 80003c6:	f7ff fef5 	bl	80001b4 <WS2812B_pixel_rgb_to_BUFF_DMA>
    WS2812B_pixel_rgb_to_BUFF_DMA( rgb_temp[3][0], rgb_temp[3][1], rgb_temp[3][2], n*5+3);
 80003ca:	4b13      	ldr	r3, [pc, #76]	; (8000418 <WS2812B_setValue+0xb0>)
 80003cc:	7a58      	ldrb	r0, [r3, #9]
 80003ce:	4b12      	ldr	r3, [pc, #72]	; (8000418 <WS2812B_setValue+0xb0>)
 80003d0:	7a99      	ldrb	r1, [r3, #10]
 80003d2:	4b11      	ldr	r3, [pc, #68]	; (8000418 <WS2812B_setValue+0xb0>)
 80003d4:	7adc      	ldrb	r4, [r3, #11]
 80003d6:	79fa      	ldrb	r2, [r7, #7]
 80003d8:	4613      	mov	r3, r2
 80003da:	009b      	lsls	r3, r3, #2
 80003dc:	4413      	add	r3, r2
 80003de:	3303      	adds	r3, #3
 80003e0:	4622      	mov	r2, r4
 80003e2:	f7ff fee7 	bl	80001b4 <WS2812B_pixel_rgb_to_BUFF_DMA>
    WS2812B_pixel_rgb_to_BUFF_DMA( rgb_temp[4][0], rgb_temp[4][1], rgb_temp[4][2], n*5+4);
 80003e6:	4b0c      	ldr	r3, [pc, #48]	; (8000418 <WS2812B_setValue+0xb0>)
 80003e8:	7b18      	ldrb	r0, [r3, #12]
 80003ea:	4b0b      	ldr	r3, [pc, #44]	; (8000418 <WS2812B_setValue+0xb0>)
 80003ec:	7b59      	ldrb	r1, [r3, #13]
 80003ee:	4b0a      	ldr	r3, [pc, #40]	; (8000418 <WS2812B_setValue+0xb0>)
 80003f0:	7b9c      	ldrb	r4, [r3, #14]
 80003f2:	79fa      	ldrb	r2, [r7, #7]
 80003f4:	4613      	mov	r3, r2
 80003f6:	009b      	lsls	r3, r3, #2
 80003f8:	4413      	add	r3, r2
 80003fa:	3304      	adds	r3, #4
 80003fc:	4622      	mov	r2, r4
 80003fe:	f7ff fed9 	bl	80001b4 <WS2812B_pixel_rgb_to_BUFF_DMA>
  for(n=0;n<30;n++){
 8000402:	79fb      	ldrb	r3, [r7, #7]
 8000404:	3301      	adds	r3, #1
 8000406:	71fb      	strb	r3, [r7, #7]
 8000408:	79fb      	ldrb	r3, [r7, #7]
 800040a:	2b1d      	cmp	r3, #29
 800040c:	d9b4      	bls.n	8000378 <WS2812B_setValue+0x10>
	}
}
 800040e:	bf00      	nop
 8000410:	bf00      	nop
 8000412:	370c      	adds	r7, #12
 8000414:	46bd      	mov	sp, r7
 8000416:	bd90      	pop	{r4, r7, pc}
 8000418:	20003930 	.word	0x20003930

0800041c <WS2812B_light>:

void WS2812B_light(void){
 800041c:	b580      	push	{r7, lr}
 800041e:	af00      	add	r7, sp, #0
  HAL_TIM_PWM_Start_DMA(&htim1,TIM_CHANNEL_2,BUFF_DMA,(uint16_t)BUFF_LENGTH);
 8000420:	f44f 6364 	mov.w	r3, #3648	; 0xe40
 8000424:	4a03      	ldr	r2, [pc, #12]	; (8000434 <WS2812B_light+0x18>)
 8000426:	2104      	movs	r1, #4
 8000428:	4803      	ldr	r0, [pc, #12]	; (8000438 <WS2812B_light+0x1c>)
 800042a:	f003 f817 	bl	800345c <HAL_TIM_PWM_Start_DMA>
}
 800042e:	bf00      	nop
 8000430:	bd80      	pop	{r7, pc}
 8000432:	bf00      	nop
 8000434:	20000030 	.word	0x20000030
 8000438:	200039a0 	.word	0x200039a0

0800043c <ledsEffect_1>:

void ledsEffect_1(void)
{
 800043c:	b580      	push	{r7, lr}
 800043e:	b08e      	sub	sp, #56	; 0x38
 8000440:	af0c      	add	r7, sp, #48	; 0x30
	  uint8_t pos,count;
		WS2812B_prepareValue(				     0, 32, 128,
 8000442:	2300      	movs	r3, #0
 8000444:	930a      	str	r3, [sp, #40]	; 0x28
 8000446:	2300      	movs	r3, #0
 8000448:	9309      	str	r3, [sp, #36]	; 0x24
 800044a:	2300      	movs	r3, #0
 800044c:	9308      	str	r3, [sp, #32]
 800044e:	2300      	movs	r3, #0
 8000450:	9307      	str	r3, [sp, #28]
 8000452:	2300      	movs	r3, #0
 8000454:	9306      	str	r3, [sp, #24]
 8000456:	2300      	movs	r3, #0
 8000458:	9305      	str	r3, [sp, #20]
 800045a:	2340      	movs	r3, #64	; 0x40
 800045c:	9304      	str	r3, [sp, #16]
 800045e:	2380      	movs	r3, #128	; 0x80
 8000460:	9303      	str	r3, [sp, #12]
 8000462:	2300      	movs	r3, #0
 8000464:	9302      	str	r3, [sp, #8]
 8000466:	2380      	movs	r3, #128	; 0x80
 8000468:	9301      	str	r3, [sp, #4]
 800046a:	2300      	movs	r3, #0
 800046c:	9300      	str	r3, [sp, #0]
 800046e:	2380      	movs	r3, #128	; 0x80
 8000470:	2280      	movs	r2, #128	; 0x80
 8000472:	2120      	movs	r1, #32
 8000474:	2000      	movs	r0, #0
 8000476:	f7ff ff2d 	bl	80002d4 <WS2812B_prepareValue>
											     128, 0,128,
												 0, 128, 64,
												 0, 0, 0,
												 0, 0,0);	
		WS2812B_setValue();	
 800047a:	f7ff ff75 	bl	8000368 <WS2812B_setValue>
		for(count=0;count<50;count++)
 800047e:	2300      	movs	r3, #0
 8000480:	71bb      	strb	r3, [r7, #6]
 8000482:	e032      	b.n	80004ea <ledsEffect_1+0xae>
		{
			memcpy((void*)OneLed_DMA_BUF_TEMP,(void*)(BUFF_DMA+48),96);
 8000484:	4b1d      	ldr	r3, [pc, #116]	; (80004fc <ledsEffect_1+0xc0>)
 8000486:	2260      	movs	r2, #96	; 0x60
 8000488:	4619      	mov	r1, r3
 800048a:	481d      	ldr	r0, [pc, #116]	; (8000500 <ledsEffect_1+0xc4>)
 800048c:	f004 fa3a 	bl	8004904 <memcpy>
			for(pos=0;pos<149;pos++)
 8000490:	2300      	movs	r3, #0
 8000492:	71fb      	strb	r3, [r7, #7]
 8000494:	e017      	b.n	80004c6 <ledsEffect_1+0x8a>
			{
					memcpy((void*)(pos*24+BUFF_DMA+48),(void*)(pos*24+BUFF_DMA+72),96);
 8000496:	79fa      	ldrb	r2, [r7, #7]
 8000498:	4613      	mov	r3, r2
 800049a:	005b      	lsls	r3, r3, #1
 800049c:	4413      	add	r3, r2
 800049e:	015b      	lsls	r3, r3, #5
 80004a0:	33c0      	adds	r3, #192	; 0xc0
 80004a2:	4a18      	ldr	r2, [pc, #96]	; (8000504 <ledsEffect_1+0xc8>)
 80004a4:	1898      	adds	r0, r3, r2
 80004a6:	79fa      	ldrb	r2, [r7, #7]
 80004a8:	4613      	mov	r3, r2
 80004aa:	005b      	lsls	r3, r3, #1
 80004ac:	4413      	add	r3, r2
 80004ae:	015b      	lsls	r3, r3, #5
 80004b0:	f503 7390 	add.w	r3, r3, #288	; 0x120
 80004b4:	4a13      	ldr	r2, [pc, #76]	; (8000504 <ledsEffect_1+0xc8>)
 80004b6:	4413      	add	r3, r2
 80004b8:	2260      	movs	r2, #96	; 0x60
 80004ba:	4619      	mov	r1, r3
 80004bc:	f004 fa22 	bl	8004904 <memcpy>
			for(pos=0;pos<149;pos++)
 80004c0:	79fb      	ldrb	r3, [r7, #7]
 80004c2:	3301      	adds	r3, #1
 80004c4:	71fb      	strb	r3, [r7, #7]
 80004c6:	79fb      	ldrb	r3, [r7, #7]
 80004c8:	2b94      	cmp	r3, #148	; 0x94
 80004ca:	d9e4      	bls.n	8000496 <ledsEffect_1+0x5a>
			}
			memcpy((void*)(BUFF_DMA+48+3576),(void*)OneLed_DMA_BUF_TEMP,96);
 80004cc:	4b0e      	ldr	r3, [pc, #56]	; (8000508 <ledsEffect_1+0xcc>)
 80004ce:	2260      	movs	r2, #96	; 0x60
 80004d0:	490b      	ldr	r1, [pc, #44]	; (8000500 <ledsEffect_1+0xc4>)
 80004d2:	4618      	mov	r0, r3
 80004d4:	f004 fa16 	bl	8004904 <memcpy>
			WS2812B_light();
 80004d8:	f7ff ffa0 	bl	800041c <WS2812B_light>
			HAL_Delay(500);
 80004dc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80004e0:	f000 fbec 	bl	8000cbc <HAL_Delay>
		for(count=0;count<50;count++)
 80004e4:	79bb      	ldrb	r3, [r7, #6]
 80004e6:	3301      	adds	r3, #1
 80004e8:	71bb      	strb	r3, [r7, #6]
 80004ea:	79bb      	ldrb	r3, [r7, #6]
 80004ec:	2b31      	cmp	r3, #49	; 0x31
 80004ee:	d9c9      	bls.n	8000484 <ledsEffect_1+0x48>
		}	
}
 80004f0:	bf00      	nop
 80004f2:	bf00      	nop
 80004f4:	3708      	adds	r7, #8
 80004f6:	46bd      	mov	sp, r7
 80004f8:	bd80      	pop	{r7, pc}
 80004fa:	bf00      	nop
 80004fc:	200000f0 	.word	0x200000f0
 8000500:	20003940 	.word	0x20003940
 8000504:	20000030 	.word	0x20000030
 8000508:	200038d0 	.word	0x200038d0

0800050c <LL_AHB1_GRP1_EnableClock>:
  *         @arg @ref LL_AHB1_GRP1_PERIPH_TSC
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 800050c:	b480      	push	{r7}
 800050e:	b085      	sub	sp, #20
 8000510:	af00      	add	r7, sp, #0
 8000512:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 8000514:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000518:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800051a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800051e:	687b      	ldr	r3, [r7, #4]
 8000520:	4313      	orrs	r3, r2
 8000522:	648b      	str	r3, [r1, #72]	; 0x48
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8000524:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000528:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800052a:	687b      	ldr	r3, [r7, #4]
 800052c:	4013      	ands	r3, r2
 800052e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000530:	68fb      	ldr	r3, [r7, #12]
}
 8000532:	bf00      	nop
 8000534:	3714      	adds	r7, #20
 8000536:	46bd      	mov	sp, r7
 8000538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800053c:	4770      	bx	lr

0800053e <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800053e:	b580      	push	{r7, lr}
 8000540:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000542:	2004      	movs	r0, #4
 8000544:	f7ff ffe2 	bl	800050c <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000548:	2001      	movs	r0, #1
 800054a:	f7ff ffdf 	bl	800050c <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 800054e:	2200      	movs	r2, #0
 8000550:	2100      	movs	r1, #0
 8000552:	200c      	movs	r0, #12
 8000554:	f000 fcb1 	bl	8000eba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8000558:	200c      	movs	r0, #12
 800055a:	f000 fcc8 	bl	8000eee <HAL_NVIC_EnableIRQ>

}
 800055e:	bf00      	nop
 8000560:	bd80      	pop	{r7, pc}

08000562 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000562:	b480      	push	{r7}
 8000564:	b085      	sub	sp, #20
 8000566:	af00      	add	r7, sp, #0
 8000568:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 800056a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800056e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000570:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000574:	687b      	ldr	r3, [r7, #4]
 8000576:	4313      	orrs	r3, r2
 8000578:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800057a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800057e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	4013      	ands	r3, r2
 8000584:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000586:	68fb      	ldr	r3, [r7, #12]
}
 8000588:	bf00      	nop
 800058a:	3714      	adds	r7, #20
 800058c:	46bd      	mov	sp, r7
 800058e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000592:	4770      	bx	lr

08000594 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	b086      	sub	sp, #24
 8000598:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800059a:	1d3b      	adds	r3, r7, #4
 800059c:	2200      	movs	r2, #0
 800059e:	601a      	str	r2, [r3, #0]
 80005a0:	605a      	str	r2, [r3, #4]
 80005a2:	609a      	str	r2, [r3, #8]
 80005a4:	60da      	str	r2, [r3, #12]
 80005a6:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005a8:	2004      	movs	r0, #4
 80005aa:	f7ff ffda 	bl	8000562 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005ae:	2001      	movs	r0, #1
 80005b0:	f7ff ffd7 	bl	8000562 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005b4:	2002      	movs	r0, #2
 80005b6:	f7ff ffd4 	bl	8000562 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80005ba:	2008      	movs	r0, #8
 80005bc:	f7ff ffd1 	bl	8000562 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD2_Pin|LD3_Pin|LD1_Pin, GPIO_PIN_RESET);
 80005c0:	2200      	movs	r2, #0
 80005c2:	2123      	movs	r1, #35	; 0x23
 80005c4:	4814      	ldr	r0, [pc, #80]	; (8000618 <MX_GPIO_Init+0x84>)
 80005c6:	f001 f8f1 	bl	80017ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80005ca:	2310      	movs	r3, #16
 80005cc:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80005ce:	2300      	movs	r3, #0
 80005d0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005d2:	2300      	movs	r3, #0
 80005d4:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80005d6:	1d3b      	adds	r3, r7, #4
 80005d8:	4619      	mov	r1, r3
 80005da:	4810      	ldr	r0, [pc, #64]	; (800061c <MX_GPIO_Init+0x88>)
 80005dc:	f000 ff76 	bl	80014cc <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD2_Pin|LD3_Pin|LD1_Pin;
 80005e0:	2323      	movs	r3, #35	; 0x23
 80005e2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005e4:	2301      	movs	r3, #1
 80005e6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005e8:	2300      	movs	r3, #0
 80005ea:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005ec:	2300      	movs	r3, #0
 80005ee:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005f0:	1d3b      	adds	r3, r7, #4
 80005f2:	4619      	mov	r1, r3
 80005f4:	4808      	ldr	r0, [pc, #32]	; (8000618 <MX_GPIO_Init+0x84>)
 80005f6:	f000 ff69 	bl	80014cc <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = B2_Pin|B3_Pin;
 80005fa:	2303      	movs	r3, #3
 80005fc:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80005fe:	2300      	movs	r3, #0
 8000600:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000602:	2300      	movs	r3, #0
 8000604:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000606:	1d3b      	adds	r3, r7, #4
 8000608:	4619      	mov	r1, r3
 800060a:	4805      	ldr	r0, [pc, #20]	; (8000620 <MX_GPIO_Init+0x8c>)
 800060c:	f000 ff5e 	bl	80014cc <HAL_GPIO_Init>

}
 8000610:	bf00      	nop
 8000612:	3718      	adds	r7, #24
 8000614:	46bd      	mov	sp, r7
 8000616:	bd80      	pop	{r7, pc}
 8000618:	48000400 	.word	0x48000400
 800061c:	48000800 	.word	0x48000800
 8000620:	48000c00 	.word	0x48000c00

08000624 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000628:	f000 fac2 	bl	8000bb0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800062c:	f000 f80e 	bl	800064c <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000630:	f000 f876 	bl	8000720 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000634:	f7ff ffae 	bl	8000594 <MX_GPIO_Init>
  MX_DMA_Init();
 8000638:	f7ff ff81 	bl	800053e <MX_DMA_Init>
  MX_TIM1_Init();
 800063c:	f000 f960 	bl	8000900 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  WS2812B_clear();
 8000640:	f7ff fd9c 	bl	800017c <WS2812B_clear>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  ledsEffect_1();
 8000644:	f7ff fefa 	bl	800043c <ledsEffect_1>
 8000648:	e7fc      	b.n	8000644 <main+0x20>
	...

0800064c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	b09a      	sub	sp, #104	; 0x68
 8000650:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000652:	f107 0320 	add.w	r3, r7, #32
 8000656:	2248      	movs	r2, #72	; 0x48
 8000658:	2100      	movs	r1, #0
 800065a:	4618      	mov	r0, r3
 800065c:	f004 f960 	bl	8004920 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000660:	1d3b      	adds	r3, r7, #4
 8000662:	2200      	movs	r2, #0
 8000664:	601a      	str	r2, [r3, #0]
 8000666:	605a      	str	r2, [r3, #4]
 8000668:	609a      	str	r2, [r3, #8]
 800066a:	60da      	str	r2, [r3, #12]
 800066c:	611a      	str	r2, [r3, #16]
 800066e:	615a      	str	r2, [r3, #20]
 8000670:	619a      	str	r2, [r3, #24]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000672:	4b2a      	ldr	r3, [pc, #168]	; (800071c <SystemClock_Config+0xd0>)
 8000674:	681b      	ldr	r3, [r3, #0]
 8000676:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800067a:	4a28      	ldr	r2, [pc, #160]	; (800071c <SystemClock_Config+0xd0>)
 800067c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000680:	6013      	str	r3, [r2, #0]
 8000682:	4b26      	ldr	r3, [pc, #152]	; (800071c <SystemClock_Config+0xd0>)
 8000684:	681b      	ldr	r3, [r3, #0]
 8000686:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800068a:	603b      	str	r3, [r7, #0]
 800068c:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 800068e:	2323      	movs	r3, #35	; 0x23
 8000690:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000692:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000696:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000698:	f44f 7380 	mov.w	r3, #256	; 0x100
 800069c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800069e:	2301      	movs	r3, #1
 80006a0:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006a2:	2340      	movs	r3, #64	; 0x40
 80006a4:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 80006a6:	2300      	movs	r3, #0
 80006a8:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80006aa:	2360      	movs	r3, #96	; 0x60
 80006ac:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006ae:	2302      	movs	r3, #2
 80006b0:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80006b2:	2301      	movs	r3, #1
 80006b4:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 80006b6:	2300      	movs	r3, #0
 80006b8:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLN = 32;
 80006ba:	2320      	movs	r3, #32
 80006bc:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006be:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80006c2:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80006c4:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80006c8:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80006ca:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80006ce:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006d0:	f107 0320 	add.w	r3, r7, #32
 80006d4:	4618      	mov	r0, r3
 80006d6:	f001 fbfd 	bl	8001ed4 <HAL_RCC_OscConfig>
 80006da:	4603      	mov	r3, r0
 80006dc:	2b00      	cmp	r3, #0
 80006de:	d001      	beq.n	80006e4 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80006e0:	f000 f83b 	bl	800075a <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 80006e4:	236f      	movs	r3, #111	; 0x6f
 80006e6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006e8:	2303      	movs	r3, #3
 80006ea:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006ec:	2300      	movs	r3, #0
 80006ee:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006f0:	2300      	movs	r3, #0
 80006f2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006f4:	2300      	movs	r3, #0
 80006f6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV2;
 80006f8:	2380      	movs	r3, #128	; 0x80
 80006fa:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 80006fc:	2300      	movs	r3, #0
 80006fe:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000700:	1d3b      	adds	r3, r7, #4
 8000702:	2103      	movs	r1, #3
 8000704:	4618      	mov	r0, r3
 8000706:	f001 ff59 	bl	80025bc <HAL_RCC_ClockConfig>
 800070a:	4603      	mov	r3, r0
 800070c:	2b00      	cmp	r3, #0
 800070e:	d001      	beq.n	8000714 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8000710:	f000 f823 	bl	800075a <Error_Handler>
  }
}
 8000714:	bf00      	nop
 8000716:	3768      	adds	r7, #104	; 0x68
 8000718:	46bd      	mov	sp, r7
 800071a:	bd80      	pop	{r7, pc}
 800071c:	58000400 	.word	0x58000400

08000720 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	b094      	sub	sp, #80	; 0x50
 8000724:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000726:	463b      	mov	r3, r7
 8000728:	2250      	movs	r2, #80	; 0x50
 800072a:	2100      	movs	r1, #0
 800072c:	4618      	mov	r0, r3
 800072e:	f004 f8f7 	bl	8004920 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS;
 8000732:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000736:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 8000738:	2300      	movs	r3, #0
 800073a:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE0;
 800073c:	2300      	movs	r3, #0
 800073e:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000740:	463b      	mov	r3, r7
 8000742:	4618      	mov	r0, r3
 8000744:	f002 fb4b 	bl	8002dde <HAL_RCCEx_PeriphCLKConfig>
 8000748:	4603      	mov	r3, r0
 800074a:	2b00      	cmp	r3, #0
 800074c:	d001      	beq.n	8000752 <PeriphCommonClock_Config+0x32>
  {
    Error_Handler();
 800074e:	f000 f804 	bl	800075a <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 8000752:	bf00      	nop
 8000754:	3750      	adds	r7, #80	; 0x50
 8000756:	46bd      	mov	sp, r7
 8000758:	bd80      	pop	{r7, pc}

0800075a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800075a:	b480      	push	{r7}
 800075c:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800075e:	b672      	cpsid	i
}
 8000760:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000762:	e7fe      	b.n	8000762 <Error_Handler+0x8>

08000764 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000764:	b480      	push	{r7}
 8000766:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000768:	bf00      	nop
 800076a:	46bd      	mov	sp, r7
 800076c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000770:	4770      	bx	lr

08000772 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000772:	b480      	push	{r7}
 8000774:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000776:	e7fe      	b.n	8000776 <NMI_Handler+0x4>

08000778 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000778:	b480      	push	{r7}
 800077a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800077c:	e7fe      	b.n	800077c <HardFault_Handler+0x4>

0800077e <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800077e:	b480      	push	{r7}
 8000780:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000782:	e7fe      	b.n	8000782 <MemManage_Handler+0x4>

08000784 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000784:	b480      	push	{r7}
 8000786:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000788:	e7fe      	b.n	8000788 <BusFault_Handler+0x4>

0800078a <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800078a:	b480      	push	{r7}
 800078c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800078e:	e7fe      	b.n	800078e <UsageFault_Handler+0x4>

08000790 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000790:	b480      	push	{r7}
 8000792:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000794:	bf00      	nop
 8000796:	46bd      	mov	sp, r7
 8000798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800079c:	4770      	bx	lr

0800079e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800079e:	b480      	push	{r7}
 80007a0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80007a2:	bf00      	nop
 80007a4:	46bd      	mov	sp, r7
 80007a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007aa:	4770      	bx	lr

080007ac <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80007ac:	b480      	push	{r7}
 80007ae:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80007b0:	bf00      	nop
 80007b2:	46bd      	mov	sp, r7
 80007b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b8:	4770      	bx	lr

080007ba <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80007ba:	b580      	push	{r7, lr}
 80007bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80007be:	f000 fa51 	bl	8000c64 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80007c2:	bf00      	nop
 80007c4:	bd80      	pop	{r7, pc}
	...

080007c8 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch2);
 80007cc:	4802      	ldr	r0, [pc, #8]	; (80007d8 <DMA1_Channel2_IRQHandler+0x10>)
 80007ce:	f000 fd2b 	bl	8001228 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */
  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 80007d2:	bf00      	nop
 80007d4:	bd80      	pop	{r7, pc}
 80007d6:	bf00      	nop
 80007d8:	200039ec 	.word	0x200039ec

080007dc <HAL_TIM_PWM_PulseFinishedCallback>:

/* USER CODE BEGIN 1 */
void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	b082      	sub	sp, #8
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	6078      	str	r0, [r7, #4]
  HAL_TIM_PWM_Stop_DMA(&htim1,TIM_CHANNEL_2);
 80007e4:	2104      	movs	r1, #4
 80007e6:	4803      	ldr	r0, [pc, #12]	; (80007f4 <HAL_TIM_PWM_PulseFinishedCallback+0x18>)
 80007e8:	f003 f82a 	bl	8003840 <HAL_TIM_PWM_Stop_DMA>
}
 80007ec:	bf00      	nop
 80007ee:	3708      	adds	r7, #8
 80007f0:	46bd      	mov	sp, r7
 80007f2:	bd80      	pop	{r7, pc}
 80007f4:	200039a0 	.word	0x200039a0

080007f8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80007f8:	b480      	push	{r7}
 80007fa:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif /* USER_VECT_TAB_ADDRESS */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
 80007fc:	4b24      	ldr	r3, [pc, #144]	; (8000890 <SystemInit+0x98>)
 80007fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000802:	4a23      	ldr	r2, [pc, #140]	; (8000890 <SystemInit+0x98>)
 8000804:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000808:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif /* FPU */

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 800080c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000810:	681b      	ldr	r3, [r3, #0]
 8000812:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000816:	f043 0301 	orr.w	r3, r3, #1
 800081a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 800081c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000820:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 8000824:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8000826:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800082a:	681a      	ldr	r2, [r3, #0]
 800082c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000830:	4b18      	ldr	r3, [pc, #96]	; (8000894 <SystemInit+0x9c>)
 8000832:	4013      	ands	r3, r2
 8000834:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 8000836:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800083a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800083e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000842:	f023 0305 	bic.w	r3, r3, #5
 8000846:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 800084a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800084e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8000852:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000856:	f023 0301 	bic.w	r3, r3, #1
 800085a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 800085e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000862:	4a0d      	ldr	r2, [pc, #52]	; (8000898 <SystemInit+0xa0>)
 8000864:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 8000866:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800086a:	4a0b      	ldr	r2, [pc, #44]	; (8000898 <SystemInit+0xa0>)
 800086c:	611a      	str	r2, [r3, #16]
#endif /* STM32WB55xx || STM32WB5Mxx */

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800086e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000872:	681b      	ldr	r3, [r3, #0]
 8000874:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000878:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800087c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800087e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000882:	2200      	movs	r2, #0
 8000884:	619a      	str	r2, [r3, #24]
}
 8000886:	bf00      	nop
 8000888:	46bd      	mov	sp, r7
 800088a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800088e:	4770      	bx	lr
 8000890:	e000ed00 	.word	0xe000ed00
 8000894:	faf6fefb 	.word	0xfaf6fefb
 8000898:	22041000 	.word	0x22041000

0800089c <LL_AHB2_GRP1_EnableClock>:
{
 800089c:	b480      	push	{r7}
 800089e:	b085      	sub	sp, #20
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80008a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80008a8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80008aa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	4313      	orrs	r3, r2
 80008b2:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80008b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80008b8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	4013      	ands	r3, r2
 80008be:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80008c0:	68fb      	ldr	r3, [r7, #12]
}
 80008c2:	bf00      	nop
 80008c4:	3714      	adds	r7, #20
 80008c6:	46bd      	mov	sp, r7
 80008c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008cc:	4770      	bx	lr

080008ce <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 80008ce:	b480      	push	{r7}
 80008d0:	b085      	sub	sp, #20
 80008d2:	af00      	add	r7, sp, #0
 80008d4:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 80008d6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80008da:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80008dc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	4313      	orrs	r3, r2
 80008e4:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80008e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80008ea:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	4013      	ands	r3, r2
 80008f0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80008f2:	68fb      	ldr	r3, [r7, #12]
}
 80008f4:	bf00      	nop
 80008f6:	3714      	adds	r7, #20
 80008f8:	46bd      	mov	sp, r7
 80008fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008fe:	4770      	bx	lr

08000900 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
DMA_HandleTypeDef hdma_tim1_ch2;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	b09c      	sub	sp, #112	; 0x70
 8000904:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000906:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800090a:	2200      	movs	r2, #0
 800090c:	601a      	str	r2, [r3, #0]
 800090e:	605a      	str	r2, [r3, #4]
 8000910:	609a      	str	r2, [r3, #8]
 8000912:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000914:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000918:	2200      	movs	r2, #0
 800091a:	601a      	str	r2, [r3, #0]
 800091c:	605a      	str	r2, [r3, #4]
 800091e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000920:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000924:	2200      	movs	r2, #0
 8000926:	601a      	str	r2, [r3, #0]
 8000928:	605a      	str	r2, [r3, #4]
 800092a:	609a      	str	r2, [r3, #8]
 800092c:	60da      	str	r2, [r3, #12]
 800092e:	611a      	str	r2, [r3, #16]
 8000930:	615a      	str	r2, [r3, #20]
 8000932:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000934:	1d3b      	adds	r3, r7, #4
 8000936:	2234      	movs	r2, #52	; 0x34
 8000938:	2100      	movs	r1, #0
 800093a:	4618      	mov	r0, r3
 800093c:	f003 fff0 	bl	8004920 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000940:	4b45      	ldr	r3, [pc, #276]	; (8000a58 <MX_TIM1_Init+0x158>)
 8000942:	4a46      	ldr	r2, [pc, #280]	; (8000a5c <MX_TIM1_Init+0x15c>)
 8000944:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000946:	4b44      	ldr	r3, [pc, #272]	; (8000a58 <MX_TIM1_Init+0x158>)
 8000948:	2200      	movs	r2, #0
 800094a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800094c:	4b42      	ldr	r3, [pc, #264]	; (8000a58 <MX_TIM1_Init+0x158>)
 800094e:	2200      	movs	r2, #0
 8000950:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 80-1;
 8000952:	4b41      	ldr	r3, [pc, #260]	; (8000a58 <MX_TIM1_Init+0x158>)
 8000954:	224f      	movs	r2, #79	; 0x4f
 8000956:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000958:	4b3f      	ldr	r3, [pc, #252]	; (8000a58 <MX_TIM1_Init+0x158>)
 800095a:	2200      	movs	r2, #0
 800095c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800095e:	4b3e      	ldr	r3, [pc, #248]	; (8000a58 <MX_TIM1_Init+0x158>)
 8000960:	2200      	movs	r2, #0
 8000962:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000964:	4b3c      	ldr	r3, [pc, #240]	; (8000a58 <MX_TIM1_Init+0x158>)
 8000966:	2200      	movs	r2, #0
 8000968:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800096a:	483b      	ldr	r0, [pc, #236]	; (8000a58 <MX_TIM1_Init+0x158>)
 800096c:	f002 fcbe 	bl	80032ec <HAL_TIM_Base_Init>
 8000970:	4603      	mov	r3, r0
 8000972:	2b00      	cmp	r3, #0
 8000974:	d001      	beq.n	800097a <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8000976:	f7ff fef0 	bl	800075a <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800097a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800097e:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000980:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8000984:	4619      	mov	r1, r3
 8000986:	4834      	ldr	r0, [pc, #208]	; (8000a58 <MX_TIM1_Init+0x158>)
 8000988:	f003 f956 	bl	8003c38 <HAL_TIM_ConfigClockSource>
 800098c:	4603      	mov	r3, r0
 800098e:	2b00      	cmp	r3, #0
 8000990:	d001      	beq.n	8000996 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8000992:	f7ff fee2 	bl	800075a <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000996:	4830      	ldr	r0, [pc, #192]	; (8000a58 <MX_TIM1_Init+0x158>)
 8000998:	f002 fcff 	bl	800339a <HAL_TIM_PWM_Init>
 800099c:	4603      	mov	r3, r0
 800099e:	2b00      	cmp	r3, #0
 80009a0:	d001      	beq.n	80009a6 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 80009a2:	f7ff feda 	bl	800075a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009a6:	2300      	movs	r3, #0
 80009a8:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80009aa:	2300      	movs	r3, #0
 80009ac:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009ae:	2300      	movs	r3, #0
 80009b0:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80009b2:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80009b6:	4619      	mov	r1, r3
 80009b8:	4827      	ldr	r0, [pc, #156]	; (8000a58 <MX_TIM1_Init+0x158>)
 80009ba:	f003 fe8f 	bl	80046dc <HAL_TIMEx_MasterConfigSynchronization>
 80009be:	4603      	mov	r3, r0
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	d001      	beq.n	80009c8 <MX_TIM1_Init+0xc8>
  {
    Error_Handler();
 80009c4:	f7ff fec9 	bl	800075a <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80009c8:	2360      	movs	r3, #96	; 0x60
 80009ca:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 80009cc:	2300      	movs	r3, #0
 80009ce:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80009d0:	2300      	movs	r3, #0
 80009d2:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80009d4:	2300      	movs	r3, #0
 80009d6:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80009d8:	2300      	movs	r3, #0
 80009da:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80009dc:	2300      	movs	r3, #0
 80009de:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80009e0:	2300      	movs	r3, #0
 80009e2:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80009e4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80009e8:	2204      	movs	r2, #4
 80009ea:	4619      	mov	r1, r3
 80009ec:	481a      	ldr	r0, [pc, #104]	; (8000a58 <MX_TIM1_Init+0x158>)
 80009ee:	f003 f80f 	bl	8003a10 <HAL_TIM_PWM_ConfigChannel>
 80009f2:	4603      	mov	r3, r0
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	d001      	beq.n	80009fc <MX_TIM1_Init+0xfc>
  {
    Error_Handler();
 80009f8:	f7ff feaf 	bl	800075a <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80009fc:	2300      	movs	r3, #0
 80009fe:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000a00:	2300      	movs	r3, #0
 8000a02:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000a04:	2300      	movs	r3, #0
 8000a06:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000a08:	2300      	movs	r3, #0
 8000a0a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000a10:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a14:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000a16:	2300      	movs	r3, #0
 8000a18:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000a1e:	2300      	movs	r3, #0
 8000a20:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000a22:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000a26:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000a28:	2300      	movs	r3, #0
 8000a2a:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000a30:	2300      	movs	r3, #0
 8000a32:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000a34:	1d3b      	adds	r3, r7, #4
 8000a36:	4619      	mov	r1, r3
 8000a38:	4807      	ldr	r0, [pc, #28]	; (8000a58 <MX_TIM1_Init+0x158>)
 8000a3a:	f003 feaf 	bl	800479c <HAL_TIMEx_ConfigBreakDeadTime>
 8000a3e:	4603      	mov	r3, r0
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	d001      	beq.n	8000a48 <MX_TIM1_Init+0x148>
  {
    Error_Handler();
 8000a44:	f7ff fe89 	bl	800075a <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000a48:	4803      	ldr	r0, [pc, #12]	; (8000a58 <MX_TIM1_Init+0x158>)
 8000a4a:	f000 f84b 	bl	8000ae4 <HAL_TIM_MspPostInit>

}
 8000a4e:	bf00      	nop
 8000a50:	3770      	adds	r7, #112	; 0x70
 8000a52:	46bd      	mov	sp, r7
 8000a54:	bd80      	pop	{r7, pc}
 8000a56:	bf00      	nop
 8000a58:	200039a0 	.word	0x200039a0
 8000a5c:	40012c00 	.word	0x40012c00

08000a60 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b082      	sub	sp, #8
 8000a64:	af00      	add	r7, sp, #0
 8000a66:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	4a1a      	ldr	r2, [pc, #104]	; (8000ad8 <HAL_TIM_Base_MspInit+0x78>)
 8000a6e:	4293      	cmp	r3, r2
 8000a70:	d12e      	bne.n	8000ad0 <HAL_TIM_Base_MspInit+0x70>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000a72:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8000a76:	f7ff ff2a 	bl	80008ce <LL_APB2_GRP1_EnableClock>

    /* TIM1 DMA Init */
    /* TIM1_CH2 Init */
    hdma_tim1_ch2.Instance = DMA1_Channel2;
 8000a7a:	4b18      	ldr	r3, [pc, #96]	; (8000adc <HAL_TIM_Base_MspInit+0x7c>)
 8000a7c:	4a18      	ldr	r2, [pc, #96]	; (8000ae0 <HAL_TIM_Base_MspInit+0x80>)
 8000a7e:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch2.Init.Request = DMA_REQUEST_TIM1_CH2;
 8000a80:	4b16      	ldr	r3, [pc, #88]	; (8000adc <HAL_TIM_Base_MspInit+0x7c>)
 8000a82:	2216      	movs	r2, #22
 8000a84:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000a86:	4b15      	ldr	r3, [pc, #84]	; (8000adc <HAL_TIM_Base_MspInit+0x7c>)
 8000a88:	2210      	movs	r2, #16
 8000a8a:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 8000a8c:	4b13      	ldr	r3, [pc, #76]	; (8000adc <HAL_TIM_Base_MspInit+0x7c>)
 8000a8e:	2200      	movs	r2, #0
 8000a90:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch2.Init.MemInc = DMA_MINC_ENABLE;
 8000a92:	4b12      	ldr	r3, [pc, #72]	; (8000adc <HAL_TIM_Base_MspInit+0x7c>)
 8000a94:	2280      	movs	r2, #128	; 0x80
 8000a96:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000a98:	4b10      	ldr	r3, [pc, #64]	; (8000adc <HAL_TIM_Base_MspInit+0x7c>)
 8000a9a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000a9e:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000aa0:	4b0e      	ldr	r3, [pc, #56]	; (8000adc <HAL_TIM_Base_MspInit+0x7c>)
 8000aa2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000aa6:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch2.Init.Mode = DMA_CIRCULAR;
 8000aa8:	4b0c      	ldr	r3, [pc, #48]	; (8000adc <HAL_TIM_Base_MspInit+0x7c>)
 8000aaa:	2220      	movs	r2, #32
 8000aac:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch2.Init.Priority = DMA_PRIORITY_LOW;
 8000aae:	4b0b      	ldr	r3, [pc, #44]	; (8000adc <HAL_TIM_Base_MspInit+0x7c>)
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim1_ch2) != HAL_OK)
 8000ab4:	4809      	ldr	r0, [pc, #36]	; (8000adc <HAL_TIM_Base_MspInit+0x7c>)
 8000ab6:	f000 fa35 	bl	8000f24 <HAL_DMA_Init>
 8000aba:	4603      	mov	r3, r0
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	d001      	beq.n	8000ac4 <HAL_TIM_Base_MspInit+0x64>
    {
      Error_Handler();
 8000ac0:	f7ff fe4b 	bl	800075a <Error_Handler>
    }

    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC2],hdma_tim1_ch2);
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	4a05      	ldr	r2, [pc, #20]	; (8000adc <HAL_TIM_Base_MspInit+0x7c>)
 8000ac8:	629a      	str	r2, [r3, #40]	; 0x28
 8000aca:	4a04      	ldr	r2, [pc, #16]	; (8000adc <HAL_TIM_Base_MspInit+0x7c>)
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8000ad0:	bf00      	nop
 8000ad2:	3708      	adds	r7, #8
 8000ad4:	46bd      	mov	sp, r7
 8000ad6:	bd80      	pop	{r7, pc}
 8000ad8:	40012c00 	.word	0x40012c00
 8000adc:	200039ec 	.word	0x200039ec
 8000ae0:	4002001c 	.word	0x4002001c

08000ae4 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b088      	sub	sp, #32
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aec:	f107 030c 	add.w	r3, r7, #12
 8000af0:	2200      	movs	r2, #0
 8000af2:	601a      	str	r2, [r3, #0]
 8000af4:	605a      	str	r2, [r3, #4]
 8000af6:	609a      	str	r2, [r3, #8]
 8000af8:	60da      	str	r2, [r3, #12]
 8000afa:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	4a0d      	ldr	r2, [pc, #52]	; (8000b38 <HAL_TIM_MspPostInit+0x54>)
 8000b02:	4293      	cmp	r3, r2
 8000b04:	d114      	bne.n	8000b30 <HAL_TIM_MspPostInit+0x4c>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b06:	2001      	movs	r0, #1
 8000b08:	f7ff fec8 	bl	800089c <LL_AHB2_GRP1_EnableClock>
    /**TIM1 GPIO Configuration
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000b0c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000b10:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b12:	2302      	movs	r3, #2
 8000b14:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b16:	2300      	movs	r3, #0
 8000b18:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000b1e:	2301      	movs	r3, #1
 8000b20:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b22:	f107 030c 	add.w	r3, r7, #12
 8000b26:	4619      	mov	r1, r3
 8000b28:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b2c:	f000 fcce 	bl	80014cc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000b30:	bf00      	nop
 8000b32:	3720      	adds	r7, #32
 8000b34:	46bd      	mov	sp, r7
 8000b36:	bd80      	pop	{r7, pc}
 8000b38:	40012c00 	.word	0x40012c00

08000b3c <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8000b3c:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b3e:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b40:	3304      	adds	r3, #4

08000b42 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b42:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b44:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 8000b46:	d3f9      	bcc.n	8000b3c <CopyDataInit>
  bx lr
 8000b48:	4770      	bx	lr

08000b4a <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 8000b4a:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8000b4c:	3004      	adds	r0, #4

08000b4e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 8000b4e:	4288      	cmp	r0, r1
  bcc FillZerobss
 8000b50:	d3fb      	bcc.n	8000b4a <FillZerobss>
  bx lr
 8000b52:	4770      	bx	lr

08000b54 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000b54:	480c      	ldr	r0, [pc, #48]	; (8000b88 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000b56:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000b58:	f7ff fe4e 	bl	80007f8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8000b5c:	480b      	ldr	r0, [pc, #44]	; (8000b8c <LoopForever+0x6>)
 8000b5e:	490c      	ldr	r1, [pc, #48]	; (8000b90 <LoopForever+0xa>)
 8000b60:	4a0c      	ldr	r2, [pc, #48]	; (8000b94 <LoopForever+0xe>)
 8000b62:	2300      	movs	r3, #0
 8000b64:	f7ff ffed 	bl	8000b42 <LoopCopyDataInit>
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8000b68:	480b      	ldr	r0, [pc, #44]	; (8000b98 <LoopForever+0x12>)
 8000b6a:	490c      	ldr	r1, [pc, #48]	; (8000b9c <LoopForever+0x16>)
 8000b6c:	4a0c      	ldr	r2, [pc, #48]	; (8000ba0 <LoopForever+0x1a>)
 8000b6e:	2300      	movs	r3, #0
 8000b70:	f7ff ffe7 	bl	8000b42 <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8000b74:	480b      	ldr	r0, [pc, #44]	; (8000ba4 <LoopForever+0x1e>)
 8000b76:	490c      	ldr	r1, [pc, #48]	; (8000ba8 <LoopForever+0x22>)
 8000b78:	2300      	movs	r3, #0
 8000b7a:	f7ff ffe8 	bl	8000b4e <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000b7e:	f003 fe9d 	bl	80048bc <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8000b82:	f7ff fd4f 	bl	8000624 <main>

08000b86 <LoopForever>:

LoopForever:
  b LoopForever
 8000b86:	e7fe      	b.n	8000b86 <LoopForever>
  ldr   r0, =_estack
 8000b88:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 8000b8c:	20000008 	.word	0x20000008
 8000b90:	20000014 	.word	0x20000014
 8000b94:	080049fc 	.word	0x080049fc
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8000b98:	20030000 	.word	0x20030000
 8000b9c:	20030000 	.word	0x20030000
 8000ba0:	08004a08 	.word	0x08004a08
  INIT_BSS _sbss, _ebss
 8000ba4:	20000014 	.word	0x20000014
 8000ba8:	20003a50 	.word	0x20003a50

08000bac <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000bac:	e7fe      	b.n	8000bac <ADC1_IRQHandler>
	...

08000bb0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b082      	sub	sp, #8
 8000bb4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000bba:	4b0c      	ldr	r3, [pc, #48]	; (8000bec <HAL_Init+0x3c>)
 8000bbc:	681b      	ldr	r3, [r3, #0]
 8000bbe:	4a0b      	ldr	r2, [pc, #44]	; (8000bec <HAL_Init+0x3c>)
 8000bc0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000bc4:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000bc6:	2003      	movs	r0, #3
 8000bc8:	f000 f96c 	bl	8000ea4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000bcc:	2000      	movs	r0, #0
 8000bce:	f000 f80f 	bl	8000bf0 <HAL_InitTick>
 8000bd2:	4603      	mov	r3, r0
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	d002      	beq.n	8000bde <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000bd8:	2301      	movs	r3, #1
 8000bda:	71fb      	strb	r3, [r7, #7]
 8000bdc:	e001      	b.n	8000be2 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000bde:	f7ff fdc1 	bl	8000764 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000be2:	79fb      	ldrb	r3, [r7, #7]
}
 8000be4:	4618      	mov	r0, r3
 8000be6:	3708      	adds	r7, #8
 8000be8:	46bd      	mov	sp, r7
 8000bea:	bd80      	pop	{r7, pc}
 8000bec:	58004000 	.word	0x58004000

08000bf0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b084      	sub	sp, #16
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 8000bfc:	4b17      	ldr	r3, [pc, #92]	; (8000c5c <HAL_InitTick+0x6c>)
 8000bfe:	781b      	ldrb	r3, [r3, #0]
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d024      	beq.n	8000c4e <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000c04:	f001 fe86 	bl	8002914 <HAL_RCC_GetHCLKFreq>
 8000c08:	4602      	mov	r2, r0
 8000c0a:	4b14      	ldr	r3, [pc, #80]	; (8000c5c <HAL_InitTick+0x6c>)
 8000c0c:	781b      	ldrb	r3, [r3, #0]
 8000c0e:	4619      	mov	r1, r3
 8000c10:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c14:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c18:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c1c:	4618      	mov	r0, r3
 8000c1e:	f000 f974 	bl	8000f0a <HAL_SYSTICK_Config>
 8000c22:	4603      	mov	r3, r0
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d10f      	bne.n	8000c48 <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	2b0f      	cmp	r3, #15
 8000c2c:	d809      	bhi.n	8000c42 <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c2e:	2200      	movs	r2, #0
 8000c30:	6879      	ldr	r1, [r7, #4]
 8000c32:	f04f 30ff 	mov.w	r0, #4294967295
 8000c36:	f000 f940 	bl	8000eba <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000c3a:	4a09      	ldr	r2, [pc, #36]	; (8000c60 <HAL_InitTick+0x70>)
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	6013      	str	r3, [r2, #0]
 8000c40:	e007      	b.n	8000c52 <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 8000c42:	2301      	movs	r3, #1
 8000c44:	73fb      	strb	r3, [r7, #15]
 8000c46:	e004      	b.n	8000c52 <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000c48:	2301      	movs	r3, #1
 8000c4a:	73fb      	strb	r3, [r7, #15]
 8000c4c:	e001      	b.n	8000c52 <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000c4e:	2301      	movs	r3, #1
 8000c50:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000c52:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c54:	4618      	mov	r0, r3
 8000c56:	3710      	adds	r7, #16
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	bd80      	pop	{r7, pc}
 8000c5c:	20000010 	.word	0x20000010
 8000c60:	2000000c 	.word	0x2000000c

08000c64 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c64:	b480      	push	{r7}
 8000c66:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000c68:	4b06      	ldr	r3, [pc, #24]	; (8000c84 <HAL_IncTick+0x20>)
 8000c6a:	781b      	ldrb	r3, [r3, #0]
 8000c6c:	461a      	mov	r2, r3
 8000c6e:	4b06      	ldr	r3, [pc, #24]	; (8000c88 <HAL_IncTick+0x24>)
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	4413      	add	r3, r2
 8000c74:	4a04      	ldr	r2, [pc, #16]	; (8000c88 <HAL_IncTick+0x24>)
 8000c76:	6013      	str	r3, [r2, #0]
}
 8000c78:	bf00      	nop
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c80:	4770      	bx	lr
 8000c82:	bf00      	nop
 8000c84:	20000010 	.word	0x20000010
 8000c88:	20003a4c 	.word	0x20003a4c

08000c8c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	af00      	add	r7, sp, #0
  return uwTick;
 8000c90:	4b03      	ldr	r3, [pc, #12]	; (8000ca0 <HAL_GetTick+0x14>)
 8000c92:	681b      	ldr	r3, [r3, #0]
}
 8000c94:	4618      	mov	r0, r3
 8000c96:	46bd      	mov	sp, r7
 8000c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9c:	4770      	bx	lr
 8000c9e:	bf00      	nop
 8000ca0:	20003a4c 	.word	0x20003a4c

08000ca4 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8000ca8:	4b03      	ldr	r3, [pc, #12]	; (8000cb8 <HAL_GetTickPrio+0x14>)
 8000caa:	681b      	ldr	r3, [r3, #0]
}
 8000cac:	4618      	mov	r0, r3
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop
 8000cb8:	2000000c 	.word	0x2000000c

08000cbc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b084      	sub	sp, #16
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000cc4:	f7ff ffe2 	bl	8000c8c <HAL_GetTick>
 8000cc8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000cce:	68fb      	ldr	r3, [r7, #12]
 8000cd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000cd4:	d005      	beq.n	8000ce2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000cd6:	4b0a      	ldr	r3, [pc, #40]	; (8000d00 <HAL_Delay+0x44>)
 8000cd8:	781b      	ldrb	r3, [r3, #0]
 8000cda:	461a      	mov	r2, r3
 8000cdc:	68fb      	ldr	r3, [r7, #12]
 8000cde:	4413      	add	r3, r2
 8000ce0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000ce2:	bf00      	nop
 8000ce4:	f7ff ffd2 	bl	8000c8c <HAL_GetTick>
 8000ce8:	4602      	mov	r2, r0
 8000cea:	68bb      	ldr	r3, [r7, #8]
 8000cec:	1ad3      	subs	r3, r2, r3
 8000cee:	68fa      	ldr	r2, [r7, #12]
 8000cf0:	429a      	cmp	r2, r3
 8000cf2:	d8f7      	bhi.n	8000ce4 <HAL_Delay+0x28>
  {
  }
}
 8000cf4:	bf00      	nop
 8000cf6:	bf00      	nop
 8000cf8:	3710      	adds	r7, #16
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	bd80      	pop	{r7, pc}
 8000cfe:	bf00      	nop
 8000d00:	20000010 	.word	0x20000010

08000d04 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d04:	b480      	push	{r7}
 8000d06:	b085      	sub	sp, #20
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	f003 0307 	and.w	r3, r3, #7
 8000d12:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d14:	4b0c      	ldr	r3, [pc, #48]	; (8000d48 <__NVIC_SetPriorityGrouping+0x44>)
 8000d16:	68db      	ldr	r3, [r3, #12]
 8000d18:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d1a:	68ba      	ldr	r2, [r7, #8]
 8000d1c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d20:	4013      	ands	r3, r2
 8000d22:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d24:	68fb      	ldr	r3, [r7, #12]
 8000d26:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d28:	68bb      	ldr	r3, [r7, #8]
 8000d2a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d2c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d30:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d34:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d36:	4a04      	ldr	r2, [pc, #16]	; (8000d48 <__NVIC_SetPriorityGrouping+0x44>)
 8000d38:	68bb      	ldr	r3, [r7, #8]
 8000d3a:	60d3      	str	r3, [r2, #12]
}
 8000d3c:	bf00      	nop
 8000d3e:	3714      	adds	r7, #20
 8000d40:	46bd      	mov	sp, r7
 8000d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d46:	4770      	bx	lr
 8000d48:	e000ed00 	.word	0xe000ed00

08000d4c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d50:	4b04      	ldr	r3, [pc, #16]	; (8000d64 <__NVIC_GetPriorityGrouping+0x18>)
 8000d52:	68db      	ldr	r3, [r3, #12]
 8000d54:	0a1b      	lsrs	r3, r3, #8
 8000d56:	f003 0307 	and.w	r3, r3, #7
}
 8000d5a:	4618      	mov	r0, r3
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d62:	4770      	bx	lr
 8000d64:	e000ed00 	.word	0xe000ed00

08000d68 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d68:	b480      	push	{r7}
 8000d6a:	b083      	sub	sp, #12
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	4603      	mov	r3, r0
 8000d70:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	db0b      	blt.n	8000d92 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d7a:	79fb      	ldrb	r3, [r7, #7]
 8000d7c:	f003 021f 	and.w	r2, r3, #31
 8000d80:	4907      	ldr	r1, [pc, #28]	; (8000da0 <__NVIC_EnableIRQ+0x38>)
 8000d82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d86:	095b      	lsrs	r3, r3, #5
 8000d88:	2001      	movs	r0, #1
 8000d8a:	fa00 f202 	lsl.w	r2, r0, r2
 8000d8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000d92:	bf00      	nop
 8000d94:	370c      	adds	r7, #12
 8000d96:	46bd      	mov	sp, r7
 8000d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9c:	4770      	bx	lr
 8000d9e:	bf00      	nop
 8000da0:	e000e100 	.word	0xe000e100

08000da4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000da4:	b480      	push	{r7}
 8000da6:	b083      	sub	sp, #12
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	4603      	mov	r3, r0
 8000dac:	6039      	str	r1, [r7, #0]
 8000dae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000db0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	db0a      	blt.n	8000dce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000db8:	683b      	ldr	r3, [r7, #0]
 8000dba:	b2da      	uxtb	r2, r3
 8000dbc:	490c      	ldr	r1, [pc, #48]	; (8000df0 <__NVIC_SetPriority+0x4c>)
 8000dbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dc2:	0112      	lsls	r2, r2, #4
 8000dc4:	b2d2      	uxtb	r2, r2
 8000dc6:	440b      	add	r3, r1
 8000dc8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000dcc:	e00a      	b.n	8000de4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dce:	683b      	ldr	r3, [r7, #0]
 8000dd0:	b2da      	uxtb	r2, r3
 8000dd2:	4908      	ldr	r1, [pc, #32]	; (8000df4 <__NVIC_SetPriority+0x50>)
 8000dd4:	79fb      	ldrb	r3, [r7, #7]
 8000dd6:	f003 030f 	and.w	r3, r3, #15
 8000dda:	3b04      	subs	r3, #4
 8000ddc:	0112      	lsls	r2, r2, #4
 8000dde:	b2d2      	uxtb	r2, r2
 8000de0:	440b      	add	r3, r1
 8000de2:	761a      	strb	r2, [r3, #24]
}
 8000de4:	bf00      	nop
 8000de6:	370c      	adds	r7, #12
 8000de8:	46bd      	mov	sp, r7
 8000dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dee:	4770      	bx	lr
 8000df0:	e000e100 	.word	0xe000e100
 8000df4:	e000ed00 	.word	0xe000ed00

08000df8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000df8:	b480      	push	{r7}
 8000dfa:	b089      	sub	sp, #36	; 0x24
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	60f8      	str	r0, [r7, #12]
 8000e00:	60b9      	str	r1, [r7, #8]
 8000e02:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e04:	68fb      	ldr	r3, [r7, #12]
 8000e06:	f003 0307 	and.w	r3, r3, #7
 8000e0a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e0c:	69fb      	ldr	r3, [r7, #28]
 8000e0e:	f1c3 0307 	rsb	r3, r3, #7
 8000e12:	2b04      	cmp	r3, #4
 8000e14:	bf28      	it	cs
 8000e16:	2304      	movcs	r3, #4
 8000e18:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e1a:	69fb      	ldr	r3, [r7, #28]
 8000e1c:	3304      	adds	r3, #4
 8000e1e:	2b06      	cmp	r3, #6
 8000e20:	d902      	bls.n	8000e28 <NVIC_EncodePriority+0x30>
 8000e22:	69fb      	ldr	r3, [r7, #28]
 8000e24:	3b03      	subs	r3, #3
 8000e26:	e000      	b.n	8000e2a <NVIC_EncodePriority+0x32>
 8000e28:	2300      	movs	r3, #0
 8000e2a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e2c:	f04f 32ff 	mov.w	r2, #4294967295
 8000e30:	69bb      	ldr	r3, [r7, #24]
 8000e32:	fa02 f303 	lsl.w	r3, r2, r3
 8000e36:	43da      	mvns	r2, r3
 8000e38:	68bb      	ldr	r3, [r7, #8]
 8000e3a:	401a      	ands	r2, r3
 8000e3c:	697b      	ldr	r3, [r7, #20]
 8000e3e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e40:	f04f 31ff 	mov.w	r1, #4294967295
 8000e44:	697b      	ldr	r3, [r7, #20]
 8000e46:	fa01 f303 	lsl.w	r3, r1, r3
 8000e4a:	43d9      	mvns	r1, r3
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e50:	4313      	orrs	r3, r2
         );
}
 8000e52:	4618      	mov	r0, r3
 8000e54:	3724      	adds	r7, #36	; 0x24
 8000e56:	46bd      	mov	sp, r7
 8000e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5c:	4770      	bx	lr
	...

08000e60 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b082      	sub	sp, #8
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	3b01      	subs	r3, #1
 8000e6c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000e70:	d301      	bcc.n	8000e76 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e72:	2301      	movs	r3, #1
 8000e74:	e00f      	b.n	8000e96 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e76:	4a0a      	ldr	r2, [pc, #40]	; (8000ea0 <SysTick_Config+0x40>)
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	3b01      	subs	r3, #1
 8000e7c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e7e:	210f      	movs	r1, #15
 8000e80:	f04f 30ff 	mov.w	r0, #4294967295
 8000e84:	f7ff ff8e 	bl	8000da4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e88:	4b05      	ldr	r3, [pc, #20]	; (8000ea0 <SysTick_Config+0x40>)
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e8e:	4b04      	ldr	r3, [pc, #16]	; (8000ea0 <SysTick_Config+0x40>)
 8000e90:	2207      	movs	r2, #7
 8000e92:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e94:	2300      	movs	r3, #0
}
 8000e96:	4618      	mov	r0, r3
 8000e98:	3708      	adds	r7, #8
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	bd80      	pop	{r7, pc}
 8000e9e:	bf00      	nop
 8000ea0:	e000e010 	.word	0xe000e010

08000ea4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b082      	sub	sp, #8
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000eac:	6878      	ldr	r0, [r7, #4]
 8000eae:	f7ff ff29 	bl	8000d04 <__NVIC_SetPriorityGrouping>
}
 8000eb2:	bf00      	nop
 8000eb4:	3708      	adds	r7, #8
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	bd80      	pop	{r7, pc}

08000eba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000eba:	b580      	push	{r7, lr}
 8000ebc:	b086      	sub	sp, #24
 8000ebe:	af00      	add	r7, sp, #0
 8000ec0:	4603      	mov	r3, r0
 8000ec2:	60b9      	str	r1, [r7, #8]
 8000ec4:	607a      	str	r2, [r7, #4]
 8000ec6:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000ec8:	f7ff ff40 	bl	8000d4c <__NVIC_GetPriorityGrouping>
 8000ecc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ece:	687a      	ldr	r2, [r7, #4]
 8000ed0:	68b9      	ldr	r1, [r7, #8]
 8000ed2:	6978      	ldr	r0, [r7, #20]
 8000ed4:	f7ff ff90 	bl	8000df8 <NVIC_EncodePriority>
 8000ed8:	4602      	mov	r2, r0
 8000eda:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ede:	4611      	mov	r1, r2
 8000ee0:	4618      	mov	r0, r3
 8000ee2:	f7ff ff5f 	bl	8000da4 <__NVIC_SetPriority>
}
 8000ee6:	bf00      	nop
 8000ee8:	3718      	adds	r7, #24
 8000eea:	46bd      	mov	sp, r7
 8000eec:	bd80      	pop	{r7, pc}

08000eee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000eee:	b580      	push	{r7, lr}
 8000ef0:	b082      	sub	sp, #8
 8000ef2:	af00      	add	r7, sp, #0
 8000ef4:	4603      	mov	r3, r0
 8000ef6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ef8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000efc:	4618      	mov	r0, r3
 8000efe:	f7ff ff33 	bl	8000d68 <__NVIC_EnableIRQ>
}
 8000f02:	bf00      	nop
 8000f04:	3708      	adds	r7, #8
 8000f06:	46bd      	mov	sp, r7
 8000f08:	bd80      	pop	{r7, pc}

08000f0a <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f0a:	b580      	push	{r7, lr}
 8000f0c:	b082      	sub	sp, #8
 8000f0e:	af00      	add	r7, sp, #0
 8000f10:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8000f12:	6878      	ldr	r0, [r7, #4]
 8000f14:	f7ff ffa4 	bl	8000e60 <SysTick_Config>
 8000f18:	4603      	mov	r3, r0
}
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	3708      	adds	r7, #8
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	bd80      	pop	{r7, pc}
	...

08000f24 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b084      	sub	sp, #16
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d101      	bne.n	8000f36 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8000f32:	2301      	movs	r3, #1
 8000f34:	e08e      	b.n	8001054 <HAL_DMA_Init+0x130>

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

#if defined(DMA2)
  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	461a      	mov	r2, r3
 8000f3c:	4b47      	ldr	r3, [pc, #284]	; (800105c <HAL_DMA_Init+0x138>)
 8000f3e:	429a      	cmp	r2, r3
 8000f40:	d80f      	bhi.n	8000f62 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	461a      	mov	r2, r3
 8000f48:	4b45      	ldr	r3, [pc, #276]	; (8001060 <HAL_DMA_Init+0x13c>)
 8000f4a:	4413      	add	r3, r2
 8000f4c:	4a45      	ldr	r2, [pc, #276]	; (8001064 <HAL_DMA_Init+0x140>)
 8000f4e:	fba2 2303 	umull	r2, r3, r2, r3
 8000f52:	091b      	lsrs	r3, r3, #4
 8000f54:	009a      	lsls	r2, r3, #2
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	4a42      	ldr	r2, [pc, #264]	; (8001068 <HAL_DMA_Init+0x144>)
 8000f5e:	641a      	str	r2, [r3, #64]	; 0x40
 8000f60:	e00e      	b.n	8000f80 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	461a      	mov	r2, r3
 8000f68:	4b40      	ldr	r3, [pc, #256]	; (800106c <HAL_DMA_Init+0x148>)
 8000f6a:	4413      	add	r3, r2
 8000f6c:	4a3d      	ldr	r2, [pc, #244]	; (8001064 <HAL_DMA_Init+0x140>)
 8000f6e:	fba2 2303 	umull	r2, r3, r2, r3
 8000f72:	091b      	lsrs	r3, r3, #4
 8000f74:	009a      	lsls	r2, r3, #2
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	4a3c      	ldr	r2, [pc, #240]	; (8001070 <HAL_DMA_Init+0x14c>)
 8000f7e:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	2202      	movs	r2, #2
 8000f84:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8000f90:	68fb      	ldr	r3, [r7, #12]
 8000f92:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8000f96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000f9a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8000fa4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	691b      	ldr	r3, [r3, #16]
 8000faa:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000fb0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	699b      	ldr	r3, [r3, #24]
 8000fb6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000fbc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	6a1b      	ldr	r3, [r3, #32]
 8000fc2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000fc4:	68fa      	ldr	r2, [r7, #12]
 8000fc6:	4313      	orrs	r3, r2
 8000fc8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	68fa      	ldr	r2, [r7, #12]
 8000fd0:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8000fd2:	6878      	ldr	r0, [r7, #4]
 8000fd4:	f000 fa16 	bl	8001404 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	689b      	ldr	r3, [r3, #8]
 8000fdc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000fe0:	d102      	bne.n	8000fe8 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	685a      	ldr	r2, [r3, #4]
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000ff0:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8000ff4:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ffa:	687a      	ldr	r2, [r7, #4]
 8000ffc:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8000ffe:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	685b      	ldr	r3, [r3, #4]
 8001004:	2b00      	cmp	r3, #0
 8001006:	d010      	beq.n	800102a <HAL_DMA_Init+0x106>
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	685b      	ldr	r3, [r3, #4]
 800100c:	2b04      	cmp	r3, #4
 800100e:	d80c      	bhi.n	800102a <HAL_DMA_Init+0x106>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8001010:	6878      	ldr	r0, [r7, #4]
 8001012:	f000 fa35 	bl	8001480 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800101a:	2200      	movs	r2, #0
 800101c:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001022:	687a      	ldr	r2, [r7, #4]
 8001024:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001026:	605a      	str	r2, [r3, #4]
 8001028:	e008      	b.n	800103c <HAL_DMA_Init+0x118>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	2200      	movs	r2, #0
 800102e:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	2200      	movs	r2, #0
 8001034:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	2200      	movs	r2, #0
 800103a:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	2200      	movs	r2, #0
 8001040:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	2201      	movs	r2, #1
 8001046:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	2200      	movs	r2, #0
 800104e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8001052:	2300      	movs	r3, #0
}
 8001054:	4618      	mov	r0, r3
 8001056:	3710      	adds	r7, #16
 8001058:	46bd      	mov	sp, r7
 800105a:	bd80      	pop	{r7, pc}
 800105c:	40020407 	.word	0x40020407
 8001060:	bffdfff8 	.word	0xbffdfff8
 8001064:	cccccccd 	.word	0xcccccccd
 8001068:	40020000 	.word	0x40020000
 800106c:	bffdfbf8 	.word	0xbffdfbf8
 8001070:	40020400 	.word	0x40020400

08001074 <HAL_DMA_Start_IT>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b086      	sub	sp, #24
 8001078:	af00      	add	r7, sp, #0
 800107a:	60f8      	str	r0, [r7, #12]
 800107c:	60b9      	str	r1, [r7, #8]
 800107e:	607a      	str	r2, [r7, #4]
 8001080:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001082:	2300      	movs	r3, #0
 8001084:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001086:	68fb      	ldr	r3, [r7, #12]
 8001088:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800108c:	2b01      	cmp	r3, #1
 800108e:	d101      	bne.n	8001094 <HAL_DMA_Start_IT+0x20>
 8001090:	2302      	movs	r3, #2
 8001092:	e066      	b.n	8001162 <HAL_DMA_Start_IT+0xee>
 8001094:	68fb      	ldr	r3, [r7, #12]
 8001096:	2201      	movs	r2, #1
 8001098:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 800109c:	68fb      	ldr	r3, [r7, #12]
 800109e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80010a2:	b2db      	uxtb	r3, r3
 80010a4:	2b01      	cmp	r3, #1
 80010a6:	d155      	bne.n	8001154 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80010a8:	68fb      	ldr	r3, [r7, #12]
 80010aa:	2202      	movs	r2, #2
 80010ac:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80010b0:	68fb      	ldr	r3, [r7, #12]
 80010b2:	2200      	movs	r2, #0
 80010b4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80010b6:	68fb      	ldr	r3, [r7, #12]
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	681a      	ldr	r2, [r3, #0]
 80010bc:	68fb      	ldr	r3, [r7, #12]
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	f022 0201 	bic.w	r2, r2, #1
 80010c4:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80010c6:	683b      	ldr	r3, [r7, #0]
 80010c8:	687a      	ldr	r2, [r7, #4]
 80010ca:	68b9      	ldr	r1, [r7, #8]
 80010cc:	68f8      	ldr	r0, [r7, #12]
 80010ce:	f000 f95a 	bl	8001386 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80010d2:	68fb      	ldr	r3, [r7, #12]
 80010d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d008      	beq.n	80010ec <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80010da:	68fb      	ldr	r3, [r7, #12]
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	681a      	ldr	r2, [r3, #0]
 80010e0:	68fb      	ldr	r3, [r7, #12]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	f042 020e 	orr.w	r2, r2, #14
 80010e8:	601a      	str	r2, [r3, #0]
 80010ea:	e00f      	b.n	800110c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80010ec:	68fb      	ldr	r3, [r7, #12]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	681a      	ldr	r2, [r3, #0]
 80010f2:	68fb      	ldr	r3, [r7, #12]
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	f022 0204 	bic.w	r2, r2, #4
 80010fa:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80010fc:	68fb      	ldr	r3, [r7, #12]
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	681a      	ldr	r2, [r3, #0]
 8001102:	68fb      	ldr	r3, [r7, #12]
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	f042 020a 	orr.w	r2, r2, #10
 800110a:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800110c:	68fb      	ldr	r3, [r7, #12]
 800110e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001116:	2b00      	cmp	r3, #0
 8001118:	d007      	beq.n	800112a <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800111a:	68fb      	ldr	r3, [r7, #12]
 800111c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800111e:	681a      	ldr	r2, [r3, #0]
 8001120:	68fb      	ldr	r3, [r7, #12]
 8001122:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001124:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001128:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 800112a:	68fb      	ldr	r3, [r7, #12]
 800112c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800112e:	2b00      	cmp	r3, #0
 8001130:	d007      	beq.n	8001142 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8001132:	68fb      	ldr	r3, [r7, #12]
 8001134:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001136:	681a      	ldr	r2, [r3, #0]
 8001138:	68fb      	ldr	r3, [r7, #12]
 800113a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800113c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001140:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001142:	68fb      	ldr	r3, [r7, #12]
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	681a      	ldr	r2, [r3, #0]
 8001148:	68fb      	ldr	r3, [r7, #12]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	f042 0201 	orr.w	r2, r2, #1
 8001150:	601a      	str	r2, [r3, #0]
 8001152:	e005      	b.n	8001160 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001154:	68fb      	ldr	r3, [r7, #12]
 8001156:	2200      	movs	r2, #0
 8001158:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800115c:	2302      	movs	r3, #2
 800115e:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8001160:	7dfb      	ldrb	r3, [r7, #23]
}
 8001162:	4618      	mov	r0, r3
 8001164:	3718      	adds	r7, #24
 8001166:	46bd      	mov	sp, r7
 8001168:	bd80      	pop	{r7, pc}

0800116a <HAL_DMA_Abort_IT>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800116a:	b580      	push	{r7, lr}
 800116c:	b084      	sub	sp, #16
 800116e:	af00      	add	r7, sp, #0
 8001170:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001172:	2300      	movs	r3, #0
 8001174:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800117c:	b2db      	uxtb	r3, r3
 800117e:	2b02      	cmp	r3, #2
 8001180:	d005      	beq.n	800118e <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	2204      	movs	r2, #4
 8001186:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8001188:	2301      	movs	r3, #1
 800118a:	73fb      	strb	r3, [r7, #15]
 800118c:	e047      	b.n	800121e <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	681a      	ldr	r2, [r3, #0]
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	f022 020e 	bic.w	r2, r2, #14
 800119c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	681a      	ldr	r2, [r3, #0]
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	f022 0201 	bic.w	r2, r2, #1
 80011ac:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80011b2:	681a      	ldr	r2, [r3, #0]
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80011b8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80011bc:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011c2:	f003 021c 	and.w	r2, r3, #28
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011ca:	2101      	movs	r1, #1
 80011cc:	fa01 f202 	lsl.w	r2, r1, r2
 80011d0:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011d6:	687a      	ldr	r2, [r7, #4]
 80011d8:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80011da:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d00c      	beq.n	80011fe <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80011e8:	681a      	ldr	r2, [r3, #0]
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80011ee:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80011f2:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011f8:	687a      	ldr	r2, [r7, #4]
 80011fa:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80011fc:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	2201      	movs	r2, #1
 8001202:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	2200      	movs	r2, #0
 800120a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001212:	2b00      	cmp	r3, #0
 8001214:	d003      	beq.n	800121e <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800121a:	6878      	ldr	r0, [r7, #4]
 800121c:	4798      	blx	r3
    }
  }
  return status;
 800121e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001220:	4618      	mov	r0, r3
 8001222:	3710      	adds	r7, #16
 8001224:	46bd      	mov	sp, r7
 8001226:	bd80      	pop	{r7, pc}

08001228 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b084      	sub	sp, #16
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001244:	f003 031c 	and.w	r3, r3, #28
 8001248:	2204      	movs	r2, #4
 800124a:	409a      	lsls	r2, r3
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	4013      	ands	r3, r2
 8001250:	2b00      	cmp	r3, #0
 8001252:	d026      	beq.n	80012a2 <HAL_DMA_IRQHandler+0x7a>
 8001254:	68bb      	ldr	r3, [r7, #8]
 8001256:	f003 0304 	and.w	r3, r3, #4
 800125a:	2b00      	cmp	r3, #0
 800125c:	d021      	beq.n	80012a2 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	f003 0320 	and.w	r3, r3, #32
 8001268:	2b00      	cmp	r3, #0
 800126a:	d107      	bne.n	800127c <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	681a      	ldr	r2, [r3, #0]
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	f022 0204 	bic.w	r2, r2, #4
 800127a:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU));
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001280:	f003 021c 	and.w	r2, r3, #28
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001288:	2104      	movs	r1, #4
 800128a:	fa01 f202 	lsl.w	r2, r1, r2
 800128e:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001294:	2b00      	cmp	r3, #0
 8001296:	d071      	beq.n	800137c <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800129c:	6878      	ldr	r0, [r7, #4]
 800129e:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80012a0:	e06c      	b.n	800137c <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012a6:	f003 031c 	and.w	r3, r3, #28
 80012aa:	2202      	movs	r2, #2
 80012ac:	409a      	lsls	r2, r3
 80012ae:	68fb      	ldr	r3, [r7, #12]
 80012b0:	4013      	ands	r3, r2
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d02e      	beq.n	8001314 <HAL_DMA_IRQHandler+0xec>
 80012b6:	68bb      	ldr	r3, [r7, #8]
 80012b8:	f003 0302 	and.w	r3, r3, #2
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d029      	beq.n	8001314 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	f003 0320 	and.w	r3, r3, #32
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d10b      	bne.n	80012e6 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	681a      	ldr	r2, [r3, #0]
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	f022 020a 	bic.w	r2, r2, #10
 80012dc:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	2201      	movs	r2, #1
 80012e2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012ea:	f003 021c 	and.w	r2, r3, #28
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012f2:	2102      	movs	r1, #2
 80012f4:	fa01 f202 	lsl.w	r2, r1, r2
 80012f8:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	2200      	movs	r2, #0
 80012fe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001306:	2b00      	cmp	r3, #0
 8001308:	d038      	beq.n	800137c <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800130e:	6878      	ldr	r0, [r7, #4]
 8001310:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8001312:	e033      	b.n	800137c <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))!= 0U) && ((source_it & DMA_IT_TE) != 0U))
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001318:	f003 031c 	and.w	r3, r3, #28
 800131c:	2208      	movs	r2, #8
 800131e:	409a      	lsls	r2, r3
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	4013      	ands	r3, r2
 8001324:	2b00      	cmp	r3, #0
 8001326:	d02a      	beq.n	800137e <HAL_DMA_IRQHandler+0x156>
 8001328:	68bb      	ldr	r3, [r7, #8]
 800132a:	f003 0308 	and.w	r3, r3, #8
 800132e:	2b00      	cmp	r3, #0
 8001330:	d025      	beq.n	800137e <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	681a      	ldr	r2, [r3, #0]
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	f022 020e 	bic.w	r2, r2, #14
 8001340:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001346:	f003 021c 	and.w	r2, r3, #28
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800134e:	2101      	movs	r1, #1
 8001350:	fa01 f202 	lsl.w	r2, r1, r2
 8001354:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	2201      	movs	r2, #1
 800135a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	2201      	movs	r2, #1
 8001360:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	2200      	movs	r2, #0
 8001368:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001370:	2b00      	cmp	r3, #0
 8001372:	d004      	beq.n	800137e <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001378:	6878      	ldr	r0, [r7, #4]
 800137a:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800137c:	bf00      	nop
 800137e:	bf00      	nop
}
 8001380:	3710      	adds	r7, #16
 8001382:	46bd      	mov	sp, r7
 8001384:	bd80      	pop	{r7, pc}

08001386 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001386:	b480      	push	{r7}
 8001388:	b085      	sub	sp, #20
 800138a:	af00      	add	r7, sp, #0
 800138c:	60f8      	str	r0, [r7, #12]
 800138e:	60b9      	str	r1, [r7, #8]
 8001390:	607a      	str	r2, [r7, #4]
 8001392:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001398:	68fa      	ldr	r2, [r7, #12]
 800139a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800139c:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 800139e:	68fb      	ldr	r3, [r7, #12]
 80013a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d004      	beq.n	80013b0 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80013a6:	68fb      	ldr	r3, [r7, #12]
 80013a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013aa:	68fa      	ldr	r2, [r7, #12]
 80013ac:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80013ae:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013b4:	f003 021c 	and.w	r2, r3, #28
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013bc:	2101      	movs	r1, #1
 80013be:	fa01 f202 	lsl.w	r2, r1, r2
 80013c2:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	683a      	ldr	r2, [r7, #0]
 80013ca:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	689b      	ldr	r3, [r3, #8]
 80013d0:	2b10      	cmp	r3, #16
 80013d2:	d108      	bne.n	80013e6 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	687a      	ldr	r2, [r7, #4]
 80013da:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	68ba      	ldr	r2, [r7, #8]
 80013e2:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80013e4:	e007      	b.n	80013f6 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 80013e6:	68fb      	ldr	r3, [r7, #12]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	68ba      	ldr	r2, [r7, #8]
 80013ec:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80013ee:	68fb      	ldr	r3, [r7, #12]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	687a      	ldr	r2, [r7, #4]
 80013f4:	60da      	str	r2, [r3, #12]
}
 80013f6:	bf00      	nop
 80013f8:	3714      	adds	r7, #20
 80013fa:	46bd      	mov	sp, r7
 80013fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001400:	4770      	bx	lr
	...

08001404 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001404:	b480      	push	{r7}
 8001406:	b085      	sub	sp, #20
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
#if defined(DMA2)
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	461a      	mov	r2, r3
 8001412:	4b17      	ldr	r3, [pc, #92]	; (8001470 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8001414:	429a      	cmp	r2, r3
 8001416:	d80a      	bhi.n	800142e <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800141c:	089b      	lsrs	r3, r3, #2
 800141e:	009b      	lsls	r3, r3, #2
 8001420:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001424:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8001428:	687a      	ldr	r2, [r7, #4]
 800142a:	6493      	str	r3, [r2, #72]	; 0x48
 800142c:	e007      	b.n	800143e <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001432:	089b      	lsrs	r3, r3, #2
 8001434:	009a      	lsls	r2, r3, #2
 8001436:	4b0f      	ldr	r3, [pc, #60]	; (8001474 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8001438:	4413      	add	r3, r2
 800143a:	687a      	ldr	r2, [r7, #4]
 800143c:	6493      	str	r3, [r2, #72]	; 0x48
  }
#else
  /* DMA1 */
  hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
#endif
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	b2db      	uxtb	r3, r3
 8001444:	3b08      	subs	r3, #8
 8001446:	4a0c      	ldr	r2, [pc, #48]	; (8001478 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8001448:	fba2 2303 	umull	r2, r3, r2, r3
 800144c:	091b      	lsrs	r3, r3, #4
 800144e:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	4a0a      	ldr	r2, [pc, #40]	; (800147c <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8001454:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8001456:	68fb      	ldr	r3, [r7, #12]
 8001458:	f003 031f 	and.w	r3, r3, #31
 800145c:	2201      	movs	r2, #1
 800145e:	409a      	lsls	r2, r3
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	651a      	str	r2, [r3, #80]	; 0x50
}
 8001464:	bf00      	nop
 8001466:	3714      	adds	r7, #20
 8001468:	46bd      	mov	sp, r7
 800146a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146e:	4770      	bx	lr
 8001470:	40020407 	.word	0x40020407
 8001474:	4002081c 	.word	0x4002081c
 8001478:	cccccccd 	.word	0xcccccccd
 800147c:	40020880 	.word	0x40020880

08001480 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001480:	b480      	push	{r7}
 8001482:	b085      	sub	sp, #20
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	685b      	ldr	r3, [r3, #4]
 800148c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001490:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8001492:	68fa      	ldr	r2, [r7, #12]
 8001494:	4b0b      	ldr	r3, [pc, #44]	; (80014c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8001496:	4413      	add	r3, r2
 8001498:	009b      	lsls	r3, r3, #2
 800149a:	461a      	mov	r2, r3
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	4a09      	ldr	r2, [pc, #36]	; (80014c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x48>)
 80014a4:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 80014a6:	68fb      	ldr	r3, [r7, #12]
 80014a8:	3b01      	subs	r3, #1
 80014aa:	f003 0303 	and.w	r3, r3, #3
 80014ae:	2201      	movs	r2, #1
 80014b0:	409a      	lsls	r2, r3
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	65da      	str	r2, [r3, #92]	; 0x5c
}
 80014b6:	bf00      	nop
 80014b8:	3714      	adds	r7, #20
 80014ba:	46bd      	mov	sp, r7
 80014bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c0:	4770      	bx	lr
 80014c2:	bf00      	nop
 80014c4:	1000823f 	.word	0x1000823f
 80014c8:	40020940 	.word	0x40020940

080014cc <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80014cc:	b480      	push	{r7}
 80014ce:	b087      	sub	sp, #28
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]
 80014d4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80014d6:	2300      	movs	r3, #0
 80014d8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80014da:	e14c      	b.n	8001776 <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80014dc:	683b      	ldr	r3, [r7, #0]
 80014de:	681a      	ldr	r2, [r3, #0]
 80014e0:	2101      	movs	r1, #1
 80014e2:	697b      	ldr	r3, [r7, #20]
 80014e4:	fa01 f303 	lsl.w	r3, r1, r3
 80014e8:	4013      	ands	r3, r2
 80014ea:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	f000 813e 	beq.w	8001770 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80014f4:	683b      	ldr	r3, [r7, #0]
 80014f6:	685b      	ldr	r3, [r3, #4]
 80014f8:	f003 0303 	and.w	r3, r3, #3
 80014fc:	2b01      	cmp	r3, #1
 80014fe:	d005      	beq.n	800150c <HAL_GPIO_Init+0x40>
 8001500:	683b      	ldr	r3, [r7, #0]
 8001502:	685b      	ldr	r3, [r3, #4]
 8001504:	f003 0303 	and.w	r3, r3, #3
 8001508:	2b02      	cmp	r3, #2
 800150a:	d130      	bne.n	800156e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	689b      	ldr	r3, [r3, #8]
 8001510:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001512:	697b      	ldr	r3, [r7, #20]
 8001514:	005b      	lsls	r3, r3, #1
 8001516:	2203      	movs	r2, #3
 8001518:	fa02 f303 	lsl.w	r3, r2, r3
 800151c:	43db      	mvns	r3, r3
 800151e:	693a      	ldr	r2, [r7, #16]
 8001520:	4013      	ands	r3, r2
 8001522:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001524:	683b      	ldr	r3, [r7, #0]
 8001526:	68da      	ldr	r2, [r3, #12]
 8001528:	697b      	ldr	r3, [r7, #20]
 800152a:	005b      	lsls	r3, r3, #1
 800152c:	fa02 f303 	lsl.w	r3, r2, r3
 8001530:	693a      	ldr	r2, [r7, #16]
 8001532:	4313      	orrs	r3, r2
 8001534:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	693a      	ldr	r2, [r7, #16]
 800153a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	685b      	ldr	r3, [r3, #4]
 8001540:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001542:	2201      	movs	r2, #1
 8001544:	697b      	ldr	r3, [r7, #20]
 8001546:	fa02 f303 	lsl.w	r3, r2, r3
 800154a:	43db      	mvns	r3, r3
 800154c:	693a      	ldr	r2, [r7, #16]
 800154e:	4013      	ands	r3, r2
 8001550:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001552:	683b      	ldr	r3, [r7, #0]
 8001554:	685b      	ldr	r3, [r3, #4]
 8001556:	091b      	lsrs	r3, r3, #4
 8001558:	f003 0201 	and.w	r2, r3, #1
 800155c:	697b      	ldr	r3, [r7, #20]
 800155e:	fa02 f303 	lsl.w	r3, r2, r3
 8001562:	693a      	ldr	r2, [r7, #16]
 8001564:	4313      	orrs	r3, r2
 8001566:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	693a      	ldr	r2, [r7, #16]
 800156c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800156e:	683b      	ldr	r3, [r7, #0]
 8001570:	685b      	ldr	r3, [r3, #4]
 8001572:	f003 0303 	and.w	r3, r3, #3
 8001576:	2b03      	cmp	r3, #3
 8001578:	d017      	beq.n	80015aa <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	68db      	ldr	r3, [r3, #12]
 800157e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001580:	697b      	ldr	r3, [r7, #20]
 8001582:	005b      	lsls	r3, r3, #1
 8001584:	2203      	movs	r2, #3
 8001586:	fa02 f303 	lsl.w	r3, r2, r3
 800158a:	43db      	mvns	r3, r3
 800158c:	693a      	ldr	r2, [r7, #16]
 800158e:	4013      	ands	r3, r2
 8001590:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001592:	683b      	ldr	r3, [r7, #0]
 8001594:	689a      	ldr	r2, [r3, #8]
 8001596:	697b      	ldr	r3, [r7, #20]
 8001598:	005b      	lsls	r3, r3, #1
 800159a:	fa02 f303 	lsl.w	r3, r2, r3
 800159e:	693a      	ldr	r2, [r7, #16]
 80015a0:	4313      	orrs	r3, r2
 80015a2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	693a      	ldr	r2, [r7, #16]
 80015a8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80015aa:	683b      	ldr	r3, [r7, #0]
 80015ac:	685b      	ldr	r3, [r3, #4]
 80015ae:	f003 0303 	and.w	r3, r3, #3
 80015b2:	2b02      	cmp	r3, #2
 80015b4:	d123      	bne.n	80015fe <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80015b6:	697b      	ldr	r3, [r7, #20]
 80015b8:	08da      	lsrs	r2, r3, #3
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	3208      	adds	r2, #8
 80015be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80015c2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80015c4:	697b      	ldr	r3, [r7, #20]
 80015c6:	f003 0307 	and.w	r3, r3, #7
 80015ca:	009b      	lsls	r3, r3, #2
 80015cc:	220f      	movs	r2, #15
 80015ce:	fa02 f303 	lsl.w	r3, r2, r3
 80015d2:	43db      	mvns	r3, r3
 80015d4:	693a      	ldr	r2, [r7, #16]
 80015d6:	4013      	ands	r3, r2
 80015d8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80015da:	683b      	ldr	r3, [r7, #0]
 80015dc:	691a      	ldr	r2, [r3, #16]
 80015de:	697b      	ldr	r3, [r7, #20]
 80015e0:	f003 0307 	and.w	r3, r3, #7
 80015e4:	009b      	lsls	r3, r3, #2
 80015e6:	fa02 f303 	lsl.w	r3, r2, r3
 80015ea:	693a      	ldr	r2, [r7, #16]
 80015ec:	4313      	orrs	r3, r2
 80015ee:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80015f0:	697b      	ldr	r3, [r7, #20]
 80015f2:	08da      	lsrs	r2, r3, #3
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	3208      	adds	r2, #8
 80015f8:	6939      	ldr	r1, [r7, #16]
 80015fa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001604:	697b      	ldr	r3, [r7, #20]
 8001606:	005b      	lsls	r3, r3, #1
 8001608:	2203      	movs	r2, #3
 800160a:	fa02 f303 	lsl.w	r3, r2, r3
 800160e:	43db      	mvns	r3, r3
 8001610:	693a      	ldr	r2, [r7, #16]
 8001612:	4013      	ands	r3, r2
 8001614:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001616:	683b      	ldr	r3, [r7, #0]
 8001618:	685b      	ldr	r3, [r3, #4]
 800161a:	f003 0203 	and.w	r2, r3, #3
 800161e:	697b      	ldr	r3, [r7, #20]
 8001620:	005b      	lsls	r3, r3, #1
 8001622:	fa02 f303 	lsl.w	r3, r2, r3
 8001626:	693a      	ldr	r2, [r7, #16]
 8001628:	4313      	orrs	r3, r2
 800162a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	693a      	ldr	r2, [r7, #16]
 8001630:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001632:	683b      	ldr	r3, [r7, #0]
 8001634:	685b      	ldr	r3, [r3, #4]
 8001636:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800163a:	2b00      	cmp	r3, #0
 800163c:	f000 8098 	beq.w	8001770 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8001640:	4a54      	ldr	r2, [pc, #336]	; (8001794 <HAL_GPIO_Init+0x2c8>)
 8001642:	697b      	ldr	r3, [r7, #20]
 8001644:	089b      	lsrs	r3, r3, #2
 8001646:	3302      	adds	r3, #2
 8001648:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800164c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800164e:	697b      	ldr	r3, [r7, #20]
 8001650:	f003 0303 	and.w	r3, r3, #3
 8001654:	009b      	lsls	r3, r3, #2
 8001656:	220f      	movs	r2, #15
 8001658:	fa02 f303 	lsl.w	r3, r2, r3
 800165c:	43db      	mvns	r3, r3
 800165e:	693a      	ldr	r2, [r7, #16]
 8001660:	4013      	ands	r3, r2
 8001662:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800166a:	d019      	beq.n	80016a0 <HAL_GPIO_Init+0x1d4>
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	4a4a      	ldr	r2, [pc, #296]	; (8001798 <HAL_GPIO_Init+0x2cc>)
 8001670:	4293      	cmp	r3, r2
 8001672:	d013      	beq.n	800169c <HAL_GPIO_Init+0x1d0>
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	4a49      	ldr	r2, [pc, #292]	; (800179c <HAL_GPIO_Init+0x2d0>)
 8001678:	4293      	cmp	r3, r2
 800167a:	d00d      	beq.n	8001698 <HAL_GPIO_Init+0x1cc>
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	4a48      	ldr	r2, [pc, #288]	; (80017a0 <HAL_GPIO_Init+0x2d4>)
 8001680:	4293      	cmp	r3, r2
 8001682:	d007      	beq.n	8001694 <HAL_GPIO_Init+0x1c8>
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	4a47      	ldr	r2, [pc, #284]	; (80017a4 <HAL_GPIO_Init+0x2d8>)
 8001688:	4293      	cmp	r3, r2
 800168a:	d101      	bne.n	8001690 <HAL_GPIO_Init+0x1c4>
 800168c:	2304      	movs	r3, #4
 800168e:	e008      	b.n	80016a2 <HAL_GPIO_Init+0x1d6>
 8001690:	2307      	movs	r3, #7
 8001692:	e006      	b.n	80016a2 <HAL_GPIO_Init+0x1d6>
 8001694:	2303      	movs	r3, #3
 8001696:	e004      	b.n	80016a2 <HAL_GPIO_Init+0x1d6>
 8001698:	2302      	movs	r3, #2
 800169a:	e002      	b.n	80016a2 <HAL_GPIO_Init+0x1d6>
 800169c:	2301      	movs	r3, #1
 800169e:	e000      	b.n	80016a2 <HAL_GPIO_Init+0x1d6>
 80016a0:	2300      	movs	r3, #0
 80016a2:	697a      	ldr	r2, [r7, #20]
 80016a4:	f002 0203 	and.w	r2, r2, #3
 80016a8:	0092      	lsls	r2, r2, #2
 80016aa:	4093      	lsls	r3, r2
 80016ac:	693a      	ldr	r2, [r7, #16]
 80016ae:	4313      	orrs	r3, r2
 80016b0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80016b2:	4938      	ldr	r1, [pc, #224]	; (8001794 <HAL_GPIO_Init+0x2c8>)
 80016b4:	697b      	ldr	r3, [r7, #20]
 80016b6:	089b      	lsrs	r3, r3, #2
 80016b8:	3302      	adds	r3, #2
 80016ba:	693a      	ldr	r2, [r7, #16]
 80016bc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80016c0:	4b39      	ldr	r3, [pc, #228]	; (80017a8 <HAL_GPIO_Init+0x2dc>)
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	43db      	mvns	r3, r3
 80016ca:	693a      	ldr	r2, [r7, #16]
 80016cc:	4013      	ands	r3, r2
 80016ce:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80016d0:	683b      	ldr	r3, [r7, #0]
 80016d2:	685b      	ldr	r3, [r3, #4]
 80016d4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d003      	beq.n	80016e4 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 80016dc:	693a      	ldr	r2, [r7, #16]
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	4313      	orrs	r3, r2
 80016e2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80016e4:	4a30      	ldr	r2, [pc, #192]	; (80017a8 <HAL_GPIO_Init+0x2dc>)
 80016e6:	693b      	ldr	r3, [r7, #16]
 80016e8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80016ea:	4b2f      	ldr	r3, [pc, #188]	; (80017a8 <HAL_GPIO_Init+0x2dc>)
 80016ec:	685b      	ldr	r3, [r3, #4]
 80016ee:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	43db      	mvns	r3, r3
 80016f4:	693a      	ldr	r2, [r7, #16]
 80016f6:	4013      	ands	r3, r2
 80016f8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80016fa:	683b      	ldr	r3, [r7, #0]
 80016fc:	685b      	ldr	r3, [r3, #4]
 80016fe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001702:	2b00      	cmp	r3, #0
 8001704:	d003      	beq.n	800170e <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8001706:	693a      	ldr	r2, [r7, #16]
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	4313      	orrs	r3, r2
 800170c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800170e:	4a26      	ldr	r2, [pc, #152]	; (80017a8 <HAL_GPIO_Init+0x2dc>)
 8001710:	693b      	ldr	r3, [r7, #16]
 8001712:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001714:	4b24      	ldr	r3, [pc, #144]	; (80017a8 <HAL_GPIO_Init+0x2dc>)
 8001716:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800171a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	43db      	mvns	r3, r3
 8001720:	693a      	ldr	r2, [r7, #16]
 8001722:	4013      	ands	r3, r2
 8001724:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001726:	683b      	ldr	r3, [r7, #0]
 8001728:	685b      	ldr	r3, [r3, #4]
 800172a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800172e:	2b00      	cmp	r3, #0
 8001730:	d003      	beq.n	800173a <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 8001732:	693a      	ldr	r2, [r7, #16]
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	4313      	orrs	r3, r2
 8001738:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800173a:	4a1b      	ldr	r2, [pc, #108]	; (80017a8 <HAL_GPIO_Init+0x2dc>)
 800173c:	693b      	ldr	r3, [r7, #16]
 800173e:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 8001742:	4b19      	ldr	r3, [pc, #100]	; (80017a8 <HAL_GPIO_Init+0x2dc>)
 8001744:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001748:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	43db      	mvns	r3, r3
 800174e:	693a      	ldr	r2, [r7, #16]
 8001750:	4013      	ands	r3, r2
 8001752:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001754:	683b      	ldr	r3, [r7, #0]
 8001756:	685b      	ldr	r3, [r3, #4]
 8001758:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800175c:	2b00      	cmp	r3, #0
 800175e:	d003      	beq.n	8001768 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8001760:	693a      	ldr	r2, [r7, #16]
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	4313      	orrs	r3, r2
 8001766:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001768:	4a0f      	ldr	r2, [pc, #60]	; (80017a8 <HAL_GPIO_Init+0x2dc>)
 800176a:	693b      	ldr	r3, [r7, #16]
 800176c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
      }
    }

    position++;
 8001770:	697b      	ldr	r3, [r7, #20]
 8001772:	3301      	adds	r3, #1
 8001774:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001776:	683b      	ldr	r3, [r7, #0]
 8001778:	681a      	ldr	r2, [r3, #0]
 800177a:	697b      	ldr	r3, [r7, #20]
 800177c:	fa22 f303 	lsr.w	r3, r2, r3
 8001780:	2b00      	cmp	r3, #0
 8001782:	f47f aeab 	bne.w	80014dc <HAL_GPIO_Init+0x10>
  }
}
 8001786:	bf00      	nop
 8001788:	bf00      	nop
 800178a:	371c      	adds	r7, #28
 800178c:	46bd      	mov	sp, r7
 800178e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001792:	4770      	bx	lr
 8001794:	40010000 	.word	0x40010000
 8001798:	48000400 	.word	0x48000400
 800179c:	48000800 	.word	0x48000800
 80017a0:	48000c00 	.word	0x48000c00
 80017a4:	48001000 	.word	0x48001000
 80017a8:	58000800 	.word	0x58000800

080017ac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80017ac:	b480      	push	{r7}
 80017ae:	b083      	sub	sp, #12
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]
 80017b4:	460b      	mov	r3, r1
 80017b6:	807b      	strh	r3, [r7, #2]
 80017b8:	4613      	mov	r3, r2
 80017ba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80017bc:	787b      	ldrb	r3, [r7, #1]
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d003      	beq.n	80017ca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80017c2:	887a      	ldrh	r2, [r7, #2]
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80017c8:	e002      	b.n	80017d0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80017ca:	887a      	ldrh	r2, [r7, #2]
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	629a      	str	r2, [r3, #40]	; 0x28
}
 80017d0:	bf00      	nop
 80017d2:	370c      	adds	r7, #12
 80017d4:	46bd      	mov	sp, r7
 80017d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017da:	4770      	bx	lr

080017dc <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80017dc:	b480      	push	{r7}
 80017de:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80017e0:	4b05      	ldr	r3, [pc, #20]	; (80017f8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	4a04      	ldr	r2, [pc, #16]	; (80017f8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80017e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017ea:	6013      	str	r3, [r2, #0]
}
 80017ec:	bf00      	nop
 80017ee:	46bd      	mov	sp, r7
 80017f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f4:	4770      	bx	lr
 80017f6:	bf00      	nop
 80017f8:	58000400 	.word	0x58000400

080017fc <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */  
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80017fc:	b480      	push	{r7}
 80017fe:	af00      	add	r7, sp, #0
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001800:	4b04      	ldr	r3, [pc, #16]	; (8001814 <HAL_PWREx_GetVoltageRange+0x18>)
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8001808:	4618      	mov	r0, r3
 800180a:	46bd      	mov	sp, r7
 800180c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001810:	4770      	bx	lr
 8001812:	bf00      	nop
 8001814:	58000400 	.word	0x58000400

08001818 <LL_RCC_HSE_IsEnabledDiv2>:
  * @brief  Get HSE sysclk and pll prescaler
  * @rmtoll CR           HSEPRE        LL_RCC_HSE_IsEnabledDiv2
  * @retval None
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsEnabledDiv2(void)
{
 8001818:	b480      	push	{r7}
 800181a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 800181c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001826:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800182a:	d101      	bne.n	8001830 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 800182c:	2301      	movs	r3, #1
 800182e:	e000      	b.n	8001832 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8001830:	2300      	movs	r3, #0
}
 8001832:	4618      	mov	r0, r3
 8001834:	46bd      	mov	sp, r7
 8001836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183a:	4770      	bx	lr

0800183c <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 800183c:	b480      	push	{r7}
 800183e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8001840:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800184a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800184e:	6013      	str	r3, [r2, #0]
}
 8001850:	bf00      	nop
 8001852:	46bd      	mov	sp, r7
 8001854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001858:	4770      	bx	lr

0800185a <LL_RCC_HSE_Disable>:
  * @brief  Disable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Disable(void)
{
 800185a:	b480      	push	{r7}
 800185c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 800185e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001868:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800186c:	6013      	str	r3, [r2, #0]
}
 800186e:	bf00      	nop
 8001870:	46bd      	mov	sp, r7
 8001872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001876:	4770      	bx	lr

08001878 <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 8001878:	b480      	push	{r7}
 800187a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 800187c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001886:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800188a:	d101      	bne.n	8001890 <LL_RCC_HSE_IsReady+0x18>
 800188c:	2301      	movs	r3, #1
 800188e:	e000      	b.n	8001892 <LL_RCC_HSE_IsReady+0x1a>
 8001890:	2300      	movs	r3, #0
}
 8001892:	4618      	mov	r0, r3
 8001894:	46bd      	mov	sp, r7
 8001896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189a:	4770      	bx	lr

0800189c <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 800189c:	b480      	push	{r7}
 800189e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80018a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80018aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018ae:	6013      	str	r3, [r2, #0]
}
 80018b0:	bf00      	nop
 80018b2:	46bd      	mov	sp, r7
 80018b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b8:	4770      	bx	lr

080018ba <LL_RCC_HSI_Disable>:
  * @brief  Disable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Disable(void)
{
 80018ba:	b480      	push	{r7}
 80018bc:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 80018be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80018c8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80018cc:	6013      	str	r3, [r2, #0]
}
 80018ce:	bf00      	nop
 80018d0:	46bd      	mov	sp, r7
 80018d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d6:	4770      	bx	lr

080018d8 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 80018d8:	b480      	push	{r7}
 80018da:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 80018dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80018e6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80018ea:	d101      	bne.n	80018f0 <LL_RCC_HSI_IsReady+0x18>
 80018ec:	2301      	movs	r3, #1
 80018ee:	e000      	b.n	80018f2 <LL_RCC_HSI_IsReady+0x1a>
 80018f0:	2300      	movs	r3, #0
}
 80018f2:	4618      	mov	r0, r3
 80018f4:	46bd      	mov	sp, r7
 80018f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fa:	4770      	bx	lr

080018fc <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll ICSCR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 127
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 80018fc:	b480      	push	{r7}
 80018fe:	b083      	sub	sp, #12
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8001904:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001908:	685b      	ldr	r3, [r3, #4]
 800190a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	061b      	lsls	r3, r3, #24
 8001912:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001916:	4313      	orrs	r3, r2
 8001918:	604b      	str	r3, [r1, #4]
}
 800191a:	bf00      	nop
 800191c:	370c      	adds	r7, #12
 800191e:	46bd      	mov	sp, r7
 8001920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001924:	4770      	bx	lr

08001926 <LL_RCC_HSI48_Enable>:
  * @brief  Enable HSI48
  * @rmtoll CRRCR          HSI48ON       LL_RCC_HSI48_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI48_Enable(void)
{
 8001926:	b480      	push	{r7}
 8001928:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 800192a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800192e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001932:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001936:	f043 0301 	orr.w	r3, r3, #1
 800193a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 800193e:	bf00      	nop
 8001940:	46bd      	mov	sp, r7
 8001942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001946:	4770      	bx	lr

08001948 <LL_RCC_HSI48_Disable>:
  * @brief  Disable HSI48
  * @rmtoll CRRCR          HSI48ON       LL_RCC_HSI48_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI48_Disable(void)
{
 8001948:	b480      	push	{r7}
 800194a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 800194c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001950:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001954:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001958:	f023 0301 	bic.w	r3, r3, #1
 800195c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8001960:	bf00      	nop
 8001962:	46bd      	mov	sp, r7
 8001964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001968:	4770      	bx	lr

0800196a <LL_RCC_HSI48_IsReady>:
  * @brief  Check if HSI48 oscillator Ready
  * @rmtoll CRRCR          HSI48RDY      LL_RCC_HSI48_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI48_IsReady(void)
{
 800196a:	b480      	push	{r7}
 800196c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 800196e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001972:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001976:	f003 0302 	and.w	r3, r3, #2
 800197a:	2b02      	cmp	r3, #2
 800197c:	d101      	bne.n	8001982 <LL_RCC_HSI48_IsReady+0x18>
 800197e:	2301      	movs	r3, #1
 8001980:	e000      	b.n	8001984 <LL_RCC_HSI48_IsReady+0x1a>
 8001982:	2300      	movs	r3, #0
}
 8001984:	4618      	mov	r0, r3
 8001986:	46bd      	mov	sp, r7
 8001988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198c:	4770      	bx	lr

0800198e <LL_RCC_LSE_Enable>:
  * @brief  Enable  Low Speed External (LSE) crystal.
  * @rmtoll BDCR         LSEON         LL_RCC_LSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_Enable(void)
{
 800198e:	b480      	push	{r7}
 8001990:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001992:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001996:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800199a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800199e:	f043 0301 	orr.w	r3, r3, #1
 80019a2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80019a6:	bf00      	nop
 80019a8:	46bd      	mov	sp, r7
 80019aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ae:	4770      	bx	lr

080019b0 <LL_RCC_LSE_Disable>:
  * @brief  Disable  Low Speed External (LSE) crystal.
  * @rmtoll BDCR         LSEON         LL_RCC_LSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_Disable(void)
{
 80019b0:	b480      	push	{r7}
 80019b2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80019b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80019b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80019bc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80019c0:	f023 0301 	bic.w	r3, r3, #1
 80019c4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80019c8:	bf00      	nop
 80019ca:	46bd      	mov	sp, r7
 80019cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d0:	4770      	bx	lr

080019d2 <LL_RCC_LSE_EnableBypass>:
  * @brief  Enable external clock source (LSE bypass).
  * @rmtoll BDCR         LSEBYP        LL_RCC_LSE_EnableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_EnableBypass(void)
{
 80019d2:	b480      	push	{r7}
 80019d4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80019d6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80019da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80019de:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80019e2:	f043 0304 	orr.w	r3, r3, #4
 80019e6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80019ea:	bf00      	nop
 80019ec:	46bd      	mov	sp, r7
 80019ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f2:	4770      	bx	lr

080019f4 <LL_RCC_LSE_DisableBypass>:
  * @brief  Disable external clock source (LSE bypass).
  * @rmtoll BDCR         LSEBYP        LL_RCC_LSE_DisableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_DisableBypass(void)
{
 80019f4:	b480      	push	{r7}
 80019f6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80019f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80019fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a00:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001a04:	f023 0304 	bic.w	r3, r3, #4
 8001a08:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8001a0c:	bf00      	nop
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a14:	4770      	bx	lr

08001a16 <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 8001a16:	b480      	push	{r7}
 8001a18:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8001a1a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a22:	f003 0302 	and.w	r3, r3, #2
 8001a26:	2b02      	cmp	r3, #2
 8001a28:	d101      	bne.n	8001a2e <LL_RCC_LSE_IsReady+0x18>
 8001a2a:	2301      	movs	r3, #1
 8001a2c:	e000      	b.n	8001a30 <LL_RCC_LSE_IsReady+0x1a>
 8001a2e:	2300      	movs	r3, #0
}
 8001a30:	4618      	mov	r0, r3
 8001a32:	46bd      	mov	sp, r7
 8001a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a38:	4770      	bx	lr

08001a3a <LL_RCC_LSI1_Enable>:
  * @brief  Enable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Enable(void)
{
 8001a3a:	b480      	push	{r7}
 8001a3c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8001a3e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a42:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a46:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001a4a:	f043 0301 	orr.w	r3, r3, #1
 8001a4e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8001a52:	bf00      	nop
 8001a54:	46bd      	mov	sp, r7
 8001a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5a:	4770      	bx	lr

08001a5c <LL_RCC_LSI1_Disable>:
  * @brief  Disable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Disable(void)
{
 8001a5c:	b480      	push	{r7}
 8001a5e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8001a60:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a64:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a68:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001a6c:	f023 0301 	bic.w	r3, r3, #1
 8001a70:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8001a74:	bf00      	nop
 8001a76:	46bd      	mov	sp, r7
 8001a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7c:	4770      	bx	lr

08001a7e <LL_RCC_LSI1_IsReady>:
  * @brief  Check if LSI1 is Ready
  * @rmtoll CSR          LSI1RDY        LL_RCC_LSI1_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI1_IsReady(void)
{
 8001a7e:	b480      	push	{r7}
 8001a80:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 8001a82:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a86:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a8a:	f003 0302 	and.w	r3, r3, #2
 8001a8e:	2b02      	cmp	r3, #2
 8001a90:	d101      	bne.n	8001a96 <LL_RCC_LSI1_IsReady+0x18>
 8001a92:	2301      	movs	r3, #1
 8001a94:	e000      	b.n	8001a98 <LL_RCC_LSI1_IsReady+0x1a>
 8001a96:	2300      	movs	r3, #0
}
 8001a98:	4618      	mov	r0, r3
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa0:	4770      	bx	lr

08001aa2 <LL_RCC_LSI2_Enable>:
  * @brief  Enable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Enable(void)
{
 8001aa2:	b480      	push	{r7}
 8001aa4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8001aa6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001aaa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001aae:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001ab2:	f043 0304 	orr.w	r3, r3, #4
 8001ab6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8001aba:	bf00      	nop
 8001abc:	46bd      	mov	sp, r7
 8001abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac2:	4770      	bx	lr

08001ac4 <LL_RCC_LSI2_Disable>:
  * @brief  Disable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Disable(void)
{
 8001ac4:	b480      	push	{r7}
 8001ac6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8001ac8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001acc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ad0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001ad4:	f023 0304 	bic.w	r3, r3, #4
 8001ad8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8001adc:	bf00      	nop
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae4:	4770      	bx	lr

08001ae6 <LL_RCC_LSI2_IsReady>:
  * @brief  Check if LSI2 is Ready
  * @rmtoll CSR          LSI2RDY        LL_RCC_LSI2_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI2_IsReady(void)
{
 8001ae6:	b480      	push	{r7}
 8001ae8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8001aea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001aee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001af2:	f003 0308 	and.w	r3, r3, #8
 8001af6:	2b08      	cmp	r3, #8
 8001af8:	d101      	bne.n	8001afe <LL_RCC_LSI2_IsReady+0x18>
 8001afa:	2301      	movs	r3, #1
 8001afc:	e000      	b.n	8001b00 <LL_RCC_LSI2_IsReady+0x1a>
 8001afe:	2300      	movs	r3, #0
}
 8001b00:	4618      	mov	r0, r3
 8001b02:	46bd      	mov	sp, r7
 8001b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b08:	4770      	bx	lr

08001b0a <LL_RCC_LSI2_SetTrimming>:
  * @rmtoll CSR        LSI2TRIM       LL_RCC_LSI2_SetTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 15
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_SetTrimming(uint32_t Value)
{
 8001b0a:	b480      	push	{r7}
 8001b0c:	b083      	sub	sp, #12
 8001b0e:	af00      	add	r7, sp, #0
 8001b10:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 8001b12:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b16:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b1a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	021b      	lsls	r3, r3, #8
 8001b22:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001b26:	4313      	orrs	r3, r2
 8001b28:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8001b2c:	bf00      	nop
 8001b2e:	370c      	adds	r7, #12
 8001b30:	46bd      	mov	sp, r7
 8001b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b36:	4770      	bx	lr

08001b38 <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 8001b38:	b480      	push	{r7}
 8001b3a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8001b3c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001b46:	f043 0301 	orr.w	r3, r3, #1
 8001b4a:	6013      	str	r3, [r2, #0]
}
 8001b4c:	bf00      	nop
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b54:	4770      	bx	lr

08001b56 <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 8001b56:	b480      	push	{r7}
 8001b58:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8001b5a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001b64:	f023 0301 	bic.w	r3, r3, #1
 8001b68:	6013      	str	r3, [r2, #0]
}
 8001b6a:	bf00      	nop
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b72:	4770      	bx	lr

08001b74 <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 8001b74:	b480      	push	{r7}
 8001b76:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8001b78:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	f003 0302 	and.w	r3, r3, #2
 8001b82:	2b02      	cmp	r3, #2
 8001b84:	d101      	bne.n	8001b8a <LL_RCC_MSI_IsReady+0x16>
 8001b86:	2301      	movs	r3, #1
 8001b88:	e000      	b.n	8001b8c <LL_RCC_MSI_IsReady+0x18>
 8001b8a:	2300      	movs	r3, #0
}
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b94:	4770      	bx	lr

08001b96 <LL_RCC_MSI_SetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetRange(uint32_t Range)
{
 8001b96:	b480      	push	{r7}
 8001b98:	b083      	sub	sp, #12
 8001b9a:	af00      	add	r7, sp, #0
 8001b9c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 8001b9e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ba8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	4313      	orrs	r3, r2
 8001bb0:	600b      	str	r3, [r1, #0]
}
 8001bb2:	bf00      	nop
 8001bb4:	370c      	adds	r7, #12
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bbc:	4770      	bx	lr

08001bbe <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 8001bbe:	b480      	push	{r7}
 8001bc0:	b083      	sub	sp, #12
 8001bc2:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8001bc4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001bce:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	2bb0      	cmp	r3, #176	; 0xb0
 8001bd4:	d901      	bls.n	8001bda <LL_RCC_MSI_GetRange+0x1c>
  {
    msiRange = LL_RCC_MSIRANGE_11;
 8001bd6:	23b0      	movs	r3, #176	; 0xb0
 8001bd8:	607b      	str	r3, [r7, #4]
  }
  return msiRange;
 8001bda:	687b      	ldr	r3, [r7, #4]
}
 8001bdc:	4618      	mov	r0, r3
 8001bde:	370c      	adds	r7, #12
 8001be0:	46bd      	mov	sp, r7
 8001be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be6:	4770      	bx	lr

08001be8 <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 8001be8:	b480      	push	{r7}
 8001bea:	b083      	sub	sp, #12
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8001bf0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001bf4:	685b      	ldr	r3, [r3, #4]
 8001bf6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	021b      	lsls	r3, r3, #8
 8001bfe:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001c02:	4313      	orrs	r3, r2
 8001c04:	604b      	str	r3, [r1, #4]
}
 8001c06:	bf00      	nop
 8001c08:	370c      	adds	r7, #12
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c10:	4770      	bx	lr

08001c12 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8001c12:	b480      	push	{r7}
 8001c14:	b083      	sub	sp, #12
 8001c16:	af00      	add	r7, sp, #0
 8001c18:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8001c1a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c1e:	689b      	ldr	r3, [r3, #8]
 8001c20:	f023 0203 	bic.w	r2, r3, #3
 8001c24:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	4313      	orrs	r3, r2
 8001c2c:	608b      	str	r3, [r1, #8]
}
 8001c2e:	bf00      	nop
 8001c30:	370c      	adds	r7, #12
 8001c32:	46bd      	mov	sp, r7
 8001c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c38:	4770      	bx	lr

08001c3a <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8001c3a:	b480      	push	{r7}
 8001c3c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001c3e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c42:	689b      	ldr	r3, [r3, #8]
 8001c44:	f003 030c 	and.w	r3, r3, #12
}
 8001c48:	4618      	mov	r0, r3
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c50:	4770      	bx	lr

08001c52 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8001c52:	b480      	push	{r7}
 8001c54:	b083      	sub	sp, #12
 8001c56:	af00      	add	r7, sp, #0
 8001c58:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8001c5a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c5e:	689b      	ldr	r3, [r3, #8]
 8001c60:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c64:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	4313      	orrs	r3, r2
 8001c6c:	608b      	str	r3, [r1, #8]
}
 8001c6e:	bf00      	nop
 8001c70:	370c      	adds	r7, #12
 8001c72:	46bd      	mov	sp, r7
 8001c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c78:	4770      	bx	lr

08001c7a <LL_C2_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_C2_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8001c7a:	b480      	push	{r7}
 8001c7c:	b083      	sub	sp, #12
 8001c7e:	af00      	add	r7, sp, #0
 8001c80:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8001c82:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c86:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001c8a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c8e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	4313      	orrs	r3, r2
 8001c96:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8001c9a:	bf00      	nop
 8001c9c:	370c      	adds	r7, #12
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca4:	4770      	bx	lr

08001ca6 <LL_RCC_SetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB4Prescaler(uint32_t Prescaler)
{
 8001ca6:	b480      	push	{r7}
 8001ca8:	b083      	sub	sp, #12
 8001caa:	af00      	add	r7, sp, #0
 8001cac:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8001cae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001cb2:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001cb6:	f023 020f 	bic.w	r2, r3, #15
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	091b      	lsrs	r3, r3, #4
 8001cbe:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001cc2:	4313      	orrs	r3, r2
 8001cc4:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8001cc8:	bf00      	nop
 8001cca:	370c      	adds	r7, #12
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd2:	4770      	bx	lr

08001cd4 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8001cd4:	b480      	push	{r7}
 8001cd6:	b083      	sub	sp, #12
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8001cdc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ce0:	689b      	ldr	r3, [r3, #8]
 8001ce2:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001ce6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	4313      	orrs	r3, r2
 8001cee:	608b      	str	r3, [r1, #8]
}
 8001cf0:	bf00      	nop
 8001cf2:	370c      	adds	r7, #12
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfa:	4770      	bx	lr

08001cfc <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8001cfc:	b480      	push	{r7}
 8001cfe:	b083      	sub	sp, #12
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8001d04:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d08:	689b      	ldr	r3, [r3, #8]
 8001d0a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001d0e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	4313      	orrs	r3, r2
 8001d16:	608b      	str	r3, [r1, #8]
}
 8001d18:	bf00      	nop
 8001d1a:	370c      	adds	r7, #12
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d22:	4770      	bx	lr

08001d24 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8001d24:	b480      	push	{r7}
 8001d26:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8001d28:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d2c:	689b      	ldr	r3, [r3, #8]
 8001d2e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8001d32:	4618      	mov	r0, r3
 8001d34:	46bd      	mov	sp, r7
 8001d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3a:	4770      	bx	lr

08001d3c <LL_RCC_GetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB4Prescaler(void)
{
 8001d3c:	b480      	push	{r7}
 8001d3e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8001d40:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d44:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001d48:	011b      	lsls	r3, r3, #4
 8001d4a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8001d4e:	4618      	mov	r0, r3
 8001d50:	46bd      	mov	sp, r7
 8001d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d56:	4770      	bx	lr

08001d58 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8001d58:	b480      	push	{r7}
 8001d5a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8001d5c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001d66:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001d6a:	6013      	str	r3, [r2, #0]
}
 8001d6c:	bf00      	nop
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d74:	4770      	bx	lr

08001d76 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8001d76:	b480      	push	{r7}
 8001d78:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8001d7a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001d84:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001d88:	6013      	str	r3, [r2, #0]
}
 8001d8a:	bf00      	nop
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d92:	4770      	bx	lr

08001d94 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8001d94:	b480      	push	{r7}
 8001d96:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8001d98:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001da2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001da6:	d101      	bne.n	8001dac <LL_RCC_PLL_IsReady+0x18>
 8001da8:	2301      	movs	r3, #1
 8001daa:	e000      	b.n	8001dae <LL_RCC_PLL_IsReady+0x1a>
 8001dac:	2300      	movs	r3, #0
}
 8001dae:	4618      	mov	r0, r3
 8001db0:	46bd      	mov	sp, r7
 8001db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db6:	4770      	bx	lr

08001db8 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8001db8:	b480      	push	{r7}
 8001dba:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8001dbc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001dc0:	68db      	ldr	r3, [r3, #12]
 8001dc2:	0a1b      	lsrs	r3, r3, #8
 8001dc4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8001dc8:	4618      	mov	r0, r3
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd0:	4770      	bx	lr

08001dd2 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8001dd2:	b480      	push	{r7}
 8001dd4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8001dd6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001dda:	68db      	ldr	r3, [r3, #12]
 8001ddc:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8001de0:	4618      	mov	r0, r3
 8001de2:	46bd      	mov	sp, r7
 8001de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de8:	4770      	bx	lr

08001dea <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8001dea:	b480      	push	{r7}
 8001dec:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8001dee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001df2:	68db      	ldr	r3, [r3, #12]
 8001df4:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8001df8:	4618      	mov	r0, r3
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e00:	4770      	bx	lr

08001e02 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8001e02:	b480      	push	{r7}
 8001e04:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8001e06:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e0a:	68db      	ldr	r3, [r3, #12]
 8001e0c:	f003 0303 	and.w	r3, r3, #3
}
 8001e10:	4618      	mov	r0, r3
 8001e12:	46bd      	mov	sp, r7
 8001e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e18:	4770      	bx	lr

08001e1a <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8001e1a:	b480      	push	{r7}
 8001e1c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8001e1e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e22:	689b      	ldr	r3, [r3, #8]
 8001e24:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e28:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e2c:	d101      	bne.n	8001e32 <LL_RCC_IsActiveFlag_HPRE+0x18>
 8001e2e:	2301      	movs	r3, #1
 8001e30:	e000      	b.n	8001e34 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8001e32:	2300      	movs	r3, #0
}
 8001e34:	4618      	mov	r0, r3
 8001e36:	46bd      	mov	sp, r7
 8001e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3c:	4770      	bx	lr

08001e3e <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 8001e3e:	b480      	push	{r7}
 8001e40:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8001e42:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e46:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001e4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e4e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001e52:	d101      	bne.n	8001e58 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8001e54:	2301      	movs	r3, #1
 8001e56:	e000      	b.n	8001e5a <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8001e58:	2300      	movs	r3, #0
}
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e62:	4770      	bx	lr

08001e64 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8001e64:	b480      	push	{r7}
 8001e66:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8001e68:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e6c:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001e70:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e74:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e78:	d101      	bne.n	8001e7e <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8001e7a:	2301      	movs	r3, #1
 8001e7c:	e000      	b.n	8001e80 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8001e7e:	2300      	movs	r3, #0
}
 8001e80:	4618      	mov	r0, r3
 8001e82:	46bd      	mov	sp, r7
 8001e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e88:	4770      	bx	lr

08001e8a <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8001e8a:	b480      	push	{r7}
 8001e8c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8001e8e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e92:	689b      	ldr	r3, [r3, #8]
 8001e94:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e98:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001e9c:	d101      	bne.n	8001ea2 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8001e9e:	2301      	movs	r3, #1
 8001ea0:	e000      	b.n	8001ea4 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8001ea2:	2300      	movs	r3, #0
}
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eac:	4770      	bx	lr

08001eae <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8001eae:	b480      	push	{r7}
 8001eb0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8001eb2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001eb6:	689b      	ldr	r3, [r3, #8]
 8001eb8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001ebc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001ec0:	d101      	bne.n	8001ec6 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8001ec2:	2301      	movs	r3, #1
 8001ec4:	e000      	b.n	8001ec8 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8001ec6:	2300      	movs	r3, #0
}
 8001ec8:	4618      	mov	r0, r3
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed0:	4770      	bx	lr
	...

08001ed4 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ed4:	b590      	push	{r4, r7, lr}
 8001ed6:	b08d      	sub	sp, #52	; 0x34
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d101      	bne.n	8001ee6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001ee2:	2301      	movs	r3, #1
 8001ee4:	e363      	b.n	80025ae <HAL_RCC_OscConfig+0x6da>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f003 0320 	and.w	r3, r3, #32
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	f000 808d 	beq.w	800200e <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001ef4:	f7ff fea1 	bl	8001c3a <LL_RCC_GetSysClkSource>
 8001ef8:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001efa:	f7ff ff82 	bl	8001e02 <LL_RCC_PLL_GetMainSource>
 8001efe:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8001f00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d005      	beq.n	8001f12 <HAL_RCC_OscConfig+0x3e>
 8001f06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f08:	2b0c      	cmp	r3, #12
 8001f0a:	d147      	bne.n	8001f9c <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 8001f0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f0e:	2b01      	cmp	r3, #1
 8001f10:	d144      	bne.n	8001f9c <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	69db      	ldr	r3, [r3, #28]
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d101      	bne.n	8001f1e <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 8001f1a:	2301      	movs	r3, #1
 8001f1c:	e347      	b.n	80025ae <HAL_RCC_OscConfig+0x6da>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8001f22:	f7ff fe4c 	bl	8001bbe <LL_RCC_MSI_GetRange>
 8001f26:	4603      	mov	r3, r0
 8001f28:	429c      	cmp	r4, r3
 8001f2a:	d914      	bls.n	8001f56 <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f30:	4618      	mov	r0, r3
 8001f32:	f000 fd03 	bl	800293c <RCC_SetFlashLatencyFromMSIRange>
 8001f36:	4603      	mov	r3, r0
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d001      	beq.n	8001f40 <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 8001f3c:	2301      	movs	r3, #1
 8001f3e:	e336      	b.n	80025ae <HAL_RCC_OscConfig+0x6da>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f44:	4618      	mov	r0, r3
 8001f46:	f7ff fe26 	bl	8001b96 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	6a1b      	ldr	r3, [r3, #32]
 8001f4e:	4618      	mov	r0, r3
 8001f50:	f7ff fe4a 	bl	8001be8 <LL_RCC_MSI_SetCalibTrimming>
 8001f54:	e013      	b.n	8001f7e <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	f7ff fe1b 	bl	8001b96 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	6a1b      	ldr	r3, [r3, #32]
 8001f64:	4618      	mov	r0, r3
 8001f66:	f7ff fe3f 	bl	8001be8 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f6e:	4618      	mov	r0, r3
 8001f70:	f000 fce4 	bl	800293c <RCC_SetFlashLatencyFromMSIRange>
 8001f74:	4603      	mov	r3, r0
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d001      	beq.n	8001f7e <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 8001f7a:	2301      	movs	r3, #1
 8001f7c:	e317      	b.n	80025ae <HAL_RCC_OscConfig+0x6da>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8001f7e:	f000 fcc9 	bl	8002914 <HAL_RCC_GetHCLKFreq>
 8001f82:	4603      	mov	r3, r0
 8001f84:	4aa4      	ldr	r2, [pc, #656]	; (8002218 <HAL_RCC_OscConfig+0x344>)
 8001f86:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001f88:	4ba4      	ldr	r3, [pc, #656]	; (800221c <HAL_RCC_OscConfig+0x348>)
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	f7fe fe2f 	bl	8000bf0 <HAL_InitTick>
 8001f92:	4603      	mov	r3, r0
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d039      	beq.n	800200c <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 8001f98:	2301      	movs	r3, #1
 8001f9a:	e308      	b.n	80025ae <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	69db      	ldr	r3, [r3, #28]
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d01e      	beq.n	8001fe2 <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001fa4:	f7ff fdc8 	bl	8001b38 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001fa8:	f7fe fe70 	bl	8000c8c <HAL_GetTick>
 8001fac:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8001fae:	e008      	b.n	8001fc2 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001fb0:	f7fe fe6c 	bl	8000c8c <HAL_GetTick>
 8001fb4:	4602      	mov	r2, r0
 8001fb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fb8:	1ad3      	subs	r3, r2, r3
 8001fba:	2b02      	cmp	r3, #2
 8001fbc:	d901      	bls.n	8001fc2 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8001fbe:	2303      	movs	r3, #3
 8001fc0:	e2f5      	b.n	80025ae <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() == 0U)
 8001fc2:	f7ff fdd7 	bl	8001b74 <LL_RCC_MSI_IsReady>
 8001fc6:	4603      	mov	r3, r0
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d0f1      	beq.n	8001fb0 <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	f7ff fde0 	bl	8001b96 <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	6a1b      	ldr	r3, [r3, #32]
 8001fda:	4618      	mov	r0, r3
 8001fdc:	f7ff fe04 	bl	8001be8 <LL_RCC_MSI_SetCalibTrimming>
 8001fe0:	e015      	b.n	800200e <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001fe2:	f7ff fdb8 	bl	8001b56 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001fe6:	f7fe fe51 	bl	8000c8c <HAL_GetTick>
 8001fea:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8001fec:	e008      	b.n	8002000 <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001fee:	f7fe fe4d 	bl	8000c8c <HAL_GetTick>
 8001ff2:	4602      	mov	r2, r0
 8001ff4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ff6:	1ad3      	subs	r3, r2, r3
 8001ff8:	2b02      	cmp	r3, #2
 8001ffa:	d901      	bls.n	8002000 <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8001ffc:	2303      	movs	r3, #3
 8001ffe:	e2d6      	b.n	80025ae <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() != 0U)
 8002000:	f7ff fdb8 	bl	8001b74 <LL_RCC_MSI_IsReady>
 8002004:	4603      	mov	r3, r0
 8002006:	2b00      	cmp	r3, #0
 8002008:	d1f1      	bne.n	8001fee <HAL_RCC_OscConfig+0x11a>
 800200a:	e000      	b.n	800200e <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800200c:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f003 0301 	and.w	r3, r3, #1
 8002016:	2b00      	cmp	r3, #0
 8002018:	d047      	beq.n	80020aa <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800201a:	f7ff fe0e 	bl	8001c3a <LL_RCC_GetSysClkSource>
 800201e:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002020:	f7ff feef 	bl	8001e02 <LL_RCC_PLL_GetMainSource>
 8002024:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8002026:	6a3b      	ldr	r3, [r7, #32]
 8002028:	2b08      	cmp	r3, #8
 800202a:	d005      	beq.n	8002038 <HAL_RCC_OscConfig+0x164>
 800202c:	6a3b      	ldr	r3, [r7, #32]
 800202e:	2b0c      	cmp	r3, #12
 8002030:	d108      	bne.n	8002044 <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 8002032:	69fb      	ldr	r3, [r7, #28]
 8002034:	2b03      	cmp	r3, #3
 8002036:	d105      	bne.n	8002044 <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	685b      	ldr	r3, [r3, #4]
 800203c:	2b00      	cmp	r3, #0
 800203e:	d134      	bne.n	80020aa <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 8002040:	2301      	movs	r3, #1
 8002042:	e2b4      	b.n	80025ae <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	685b      	ldr	r3, [r3, #4]
 8002048:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800204c:	d102      	bne.n	8002054 <HAL_RCC_OscConfig+0x180>
 800204e:	f7ff fbf5 	bl	800183c <LL_RCC_HSE_Enable>
 8002052:	e001      	b.n	8002058 <HAL_RCC_OscConfig+0x184>
 8002054:	f7ff fc01 	bl	800185a <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	685b      	ldr	r3, [r3, #4]
 800205c:	2b00      	cmp	r3, #0
 800205e:	d012      	beq.n	8002086 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002060:	f7fe fe14 	bl	8000c8c <HAL_GetTick>
 8002064:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8002066:	e008      	b.n	800207a <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002068:	f7fe fe10 	bl	8000c8c <HAL_GetTick>
 800206c:	4602      	mov	r2, r0
 800206e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002070:	1ad3      	subs	r3, r2, r3
 8002072:	2b64      	cmp	r3, #100	; 0x64
 8002074:	d901      	bls.n	800207a <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8002076:	2303      	movs	r3, #3
 8002078:	e299      	b.n	80025ae <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() == 0U)
 800207a:	f7ff fbfd 	bl	8001878 <LL_RCC_HSE_IsReady>
 800207e:	4603      	mov	r3, r0
 8002080:	2b00      	cmp	r3, #0
 8002082:	d0f1      	beq.n	8002068 <HAL_RCC_OscConfig+0x194>
 8002084:	e011      	b.n	80020aa <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002086:	f7fe fe01 	bl	8000c8c <HAL_GetTick>
 800208a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 800208c:	e008      	b.n	80020a0 <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800208e:	f7fe fdfd 	bl	8000c8c <HAL_GetTick>
 8002092:	4602      	mov	r2, r0
 8002094:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002096:	1ad3      	subs	r3, r2, r3
 8002098:	2b64      	cmp	r3, #100	; 0x64
 800209a:	d901      	bls.n	80020a0 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 800209c:	2303      	movs	r3, #3
 800209e:	e286      	b.n	80025ae <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() != 0U)
 80020a0:	f7ff fbea 	bl	8001878 <LL_RCC_HSE_IsReady>
 80020a4:	4603      	mov	r3, r0
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d1f1      	bne.n	800208e <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f003 0302 	and.w	r3, r3, #2
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d04c      	beq.n	8002150 <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80020b6:	f7ff fdc0 	bl	8001c3a <LL_RCC_GetSysClkSource>
 80020ba:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80020bc:	f7ff fea1 	bl	8001e02 <LL_RCC_PLL_GetMainSource>
 80020c0:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80020c2:	69bb      	ldr	r3, [r7, #24]
 80020c4:	2b04      	cmp	r3, #4
 80020c6:	d005      	beq.n	80020d4 <HAL_RCC_OscConfig+0x200>
 80020c8:	69bb      	ldr	r3, [r7, #24]
 80020ca:	2b0c      	cmp	r3, #12
 80020cc:	d10e      	bne.n	80020ec <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 80020ce:	697b      	ldr	r3, [r7, #20]
 80020d0:	2b02      	cmp	r3, #2
 80020d2:	d10b      	bne.n	80020ec <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	68db      	ldr	r3, [r3, #12]
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d101      	bne.n	80020e0 <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 80020dc:	2301      	movs	r3, #1
 80020de:	e266      	b.n	80025ae <HAL_RCC_OscConfig+0x6da>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	691b      	ldr	r3, [r3, #16]
 80020e4:	4618      	mov	r0, r3
 80020e6:	f7ff fc09 	bl	80018fc <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80020ea:	e031      	b.n	8002150 <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	68db      	ldr	r3, [r3, #12]
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d019      	beq.n	8002128 <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80020f4:	f7ff fbd2 	bl	800189c <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020f8:	f7fe fdc8 	bl	8000c8c <HAL_GetTick>
 80020fc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 80020fe:	e008      	b.n	8002112 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002100:	f7fe fdc4 	bl	8000c8c <HAL_GetTick>
 8002104:	4602      	mov	r2, r0
 8002106:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002108:	1ad3      	subs	r3, r2, r3
 800210a:	2b02      	cmp	r3, #2
 800210c:	d901      	bls.n	8002112 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800210e:	2303      	movs	r3, #3
 8002110:	e24d      	b.n	80025ae <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() == 0U)
 8002112:	f7ff fbe1 	bl	80018d8 <LL_RCC_HSI_IsReady>
 8002116:	4603      	mov	r3, r0
 8002118:	2b00      	cmp	r3, #0
 800211a:	d0f1      	beq.n	8002100 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	691b      	ldr	r3, [r3, #16]
 8002120:	4618      	mov	r0, r3
 8002122:	f7ff fbeb 	bl	80018fc <LL_RCC_HSI_SetCalibTrimming>
 8002126:	e013      	b.n	8002150 <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002128:	f7ff fbc7 	bl	80018ba <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800212c:	f7fe fdae 	bl	8000c8c <HAL_GetTick>
 8002130:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8002132:	e008      	b.n	8002146 <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002134:	f7fe fdaa 	bl	8000c8c <HAL_GetTick>
 8002138:	4602      	mov	r2, r0
 800213a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800213c:	1ad3      	subs	r3, r2, r3
 800213e:	2b02      	cmp	r3, #2
 8002140:	d901      	bls.n	8002146 <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 8002142:	2303      	movs	r3, #3
 8002144:	e233      	b.n	80025ae <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() != 0U)
 8002146:	f7ff fbc7 	bl	80018d8 <LL_RCC_HSI_IsReady>
 800214a:	4603      	mov	r3, r0
 800214c:	2b00      	cmp	r3, #0
 800214e:	d1f1      	bne.n	8002134 <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f003 0308 	and.w	r3, r3, #8
 8002158:	2b00      	cmp	r3, #0
 800215a:	d106      	bne.n	800216a <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8002164:	2b00      	cmp	r3, #0
 8002166:	f000 80a3 	beq.w	80022b0 <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	695b      	ldr	r3, [r3, #20]
 800216e:	2b00      	cmp	r3, #0
 8002170:	d076      	beq.n	8002260 <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f003 0310 	and.w	r3, r3, #16
 800217a:	2b00      	cmp	r3, #0
 800217c:	d046      	beq.n	800220c <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 800217e:	f7ff fc7e 	bl	8001a7e <LL_RCC_LSI1_IsReady>
 8002182:	4603      	mov	r3, r0
 8002184:	2b00      	cmp	r3, #0
 8002186:	d113      	bne.n	80021b0 <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 8002188:	f7ff fc57 	bl	8001a3a <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800218c:	f7fe fd7e 	bl	8000c8c <HAL_GetTick>
 8002190:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 8002192:	e008      	b.n	80021a6 <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8002194:	f7fe fd7a 	bl	8000c8c <HAL_GetTick>
 8002198:	4602      	mov	r2, r0
 800219a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800219c:	1ad3      	subs	r3, r2, r3
 800219e:	2b02      	cmp	r3, #2
 80021a0:	d901      	bls.n	80021a6 <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 80021a2:	2303      	movs	r3, #3
 80021a4:	e203      	b.n	80025ae <HAL_RCC_OscConfig+0x6da>
          while (LL_RCC_LSI1_IsReady() == 0U)
 80021a6:	f7ff fc6a 	bl	8001a7e <LL_RCC_LSI1_IsReady>
 80021aa:	4603      	mov	r3, r0
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d0f1      	beq.n	8002194 <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 80021b0:	f7ff fc77 	bl	8001aa2 <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021b4:	f7fe fd6a 	bl	8000c8c <HAL_GetTick>
 80021b8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 80021ba:	e008      	b.n	80021ce <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80021bc:	f7fe fd66 	bl	8000c8c <HAL_GetTick>
 80021c0:	4602      	mov	r2, r0
 80021c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021c4:	1ad3      	subs	r3, r2, r3
 80021c6:	2b03      	cmp	r3, #3
 80021c8:	d901      	bls.n	80021ce <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 80021ca:	2303      	movs	r3, #3
 80021cc:	e1ef      	b.n	80025ae <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() == 0U)
 80021ce:	f7ff fc8a 	bl	8001ae6 <LL_RCC_LSI2_IsReady>
 80021d2:	4603      	mov	r3, r0
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d0f1      	beq.n	80021bc <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	699b      	ldr	r3, [r3, #24]
 80021dc:	4618      	mov	r0, r3
 80021de:	f7ff fc94 	bl	8001b0a <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 80021e2:	f7ff fc3b 	bl	8001a5c <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021e6:	f7fe fd51 	bl	8000c8c <HAL_GetTick>
 80021ea:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 80021ec:	e008      	b.n	8002200 <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80021ee:	f7fe fd4d 	bl	8000c8c <HAL_GetTick>
 80021f2:	4602      	mov	r2, r0
 80021f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021f6:	1ad3      	subs	r3, r2, r3
 80021f8:	2b02      	cmp	r3, #2
 80021fa:	d901      	bls.n	8002200 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 80021fc:	2303      	movs	r3, #3
 80021fe:	e1d6      	b.n	80025ae <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() != 0U)
 8002200:	f7ff fc3d 	bl	8001a7e <LL_RCC_LSI1_IsReady>
 8002204:	4603      	mov	r3, r0
 8002206:	2b00      	cmp	r3, #0
 8002208:	d1f1      	bne.n	80021ee <HAL_RCC_OscConfig+0x31a>
 800220a:	e051      	b.n	80022b0 <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 800220c:	f7ff fc15 	bl	8001a3a <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002210:	f7fe fd3c 	bl	8000c8c <HAL_GetTick>
 8002214:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 8002216:	e00c      	b.n	8002232 <HAL_RCC_OscConfig+0x35e>
 8002218:	20000008 	.word	0x20000008
 800221c:	2000000c 	.word	0x2000000c
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8002220:	f7fe fd34 	bl	8000c8c <HAL_GetTick>
 8002224:	4602      	mov	r2, r0
 8002226:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002228:	1ad3      	subs	r3, r2, r3
 800222a:	2b02      	cmp	r3, #2
 800222c:	d901      	bls.n	8002232 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 800222e:	2303      	movs	r3, #3
 8002230:	e1bd      	b.n	80025ae <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() == 0U)
 8002232:	f7ff fc24 	bl	8001a7e <LL_RCC_LSI1_IsReady>
 8002236:	4603      	mov	r3, r0
 8002238:	2b00      	cmp	r3, #0
 800223a:	d0f1      	beq.n	8002220 <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 800223c:	f7ff fc42 	bl	8001ac4 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 8002240:	e008      	b.n	8002254 <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8002242:	f7fe fd23 	bl	8000c8c <HAL_GetTick>
 8002246:	4602      	mov	r2, r0
 8002248:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800224a:	1ad3      	subs	r3, r2, r3
 800224c:	2b03      	cmp	r3, #3
 800224e:	d901      	bls.n	8002254 <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 8002250:	2303      	movs	r3, #3
 8002252:	e1ac      	b.n	80025ae <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() != 0U)
 8002254:	f7ff fc47 	bl	8001ae6 <LL_RCC_LSI2_IsReady>
 8002258:	4603      	mov	r3, r0
 800225a:	2b00      	cmp	r3, #0
 800225c:	d1f1      	bne.n	8002242 <HAL_RCC_OscConfig+0x36e>
 800225e:	e027      	b.n	80022b0 <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 8002260:	f7ff fc30 	bl	8001ac4 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002264:	f7fe fd12 	bl	8000c8c <HAL_GetTick>
 8002268:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 800226a:	e008      	b.n	800227e <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800226c:	f7fe fd0e 	bl	8000c8c <HAL_GetTick>
 8002270:	4602      	mov	r2, r0
 8002272:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002274:	1ad3      	subs	r3, r2, r3
 8002276:	2b03      	cmp	r3, #3
 8002278:	d901      	bls.n	800227e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800227a:	2303      	movs	r3, #3
 800227c:	e197      	b.n	80025ae <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI2_IsReady() != 0U)
 800227e:	f7ff fc32 	bl	8001ae6 <LL_RCC_LSI2_IsReady>
 8002282:	4603      	mov	r3, r0
 8002284:	2b00      	cmp	r3, #0
 8002286:	d1f1      	bne.n	800226c <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 8002288:	f7ff fbe8 	bl	8001a5c <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800228c:	f7fe fcfe 	bl	8000c8c <HAL_GetTick>
 8002290:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 8002292:	e008      	b.n	80022a6 <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8002294:	f7fe fcfa 	bl	8000c8c <HAL_GetTick>
 8002298:	4602      	mov	r2, r0
 800229a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800229c:	1ad3      	subs	r3, r2, r3
 800229e:	2b02      	cmp	r3, #2
 80022a0:	d901      	bls.n	80022a6 <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 80022a2:	2303      	movs	r3, #3
 80022a4:	e183      	b.n	80025ae <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI1_IsReady() != 0U)
 80022a6:	f7ff fbea 	bl	8001a7e <LL_RCC_LSI1_IsReady>
 80022aa:	4603      	mov	r3, r0
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d1f1      	bne.n	8002294 <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	f003 0304 	and.w	r3, r3, #4
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d05b      	beq.n	8002374 <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80022bc:	4ba7      	ldr	r3, [pc, #668]	; (800255c <HAL_RCC_OscConfig+0x688>)
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d114      	bne.n	80022f2 <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 80022c8:	f7ff fa88 	bl	80017dc <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80022cc:	f7fe fcde 	bl	8000c8c <HAL_GetTick>
 80022d0:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80022d2:	e008      	b.n	80022e6 <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80022d4:	f7fe fcda 	bl	8000c8c <HAL_GetTick>
 80022d8:	4602      	mov	r2, r0
 80022da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022dc:	1ad3      	subs	r3, r2, r3
 80022de:	2b02      	cmp	r3, #2
 80022e0:	d901      	bls.n	80022e6 <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 80022e2:	2303      	movs	r3, #3
 80022e4:	e163      	b.n	80025ae <HAL_RCC_OscConfig+0x6da>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80022e6:	4b9d      	ldr	r3, [pc, #628]	; (800255c <HAL_RCC_OscConfig+0x688>)
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d0f0      	beq.n	80022d4 <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	689b      	ldr	r3, [r3, #8]
 80022f6:	2b01      	cmp	r3, #1
 80022f8:	d102      	bne.n	8002300 <HAL_RCC_OscConfig+0x42c>
 80022fa:	f7ff fb48 	bl	800198e <LL_RCC_LSE_Enable>
 80022fe:	e00c      	b.n	800231a <HAL_RCC_OscConfig+0x446>
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	689b      	ldr	r3, [r3, #8]
 8002304:	2b05      	cmp	r3, #5
 8002306:	d104      	bne.n	8002312 <HAL_RCC_OscConfig+0x43e>
 8002308:	f7ff fb63 	bl	80019d2 <LL_RCC_LSE_EnableBypass>
 800230c:	f7ff fb3f 	bl	800198e <LL_RCC_LSE_Enable>
 8002310:	e003      	b.n	800231a <HAL_RCC_OscConfig+0x446>
 8002312:	f7ff fb4d 	bl	80019b0 <LL_RCC_LSE_Disable>
 8002316:	f7ff fb6d 	bl	80019f4 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	689b      	ldr	r3, [r3, #8]
 800231e:	2b00      	cmp	r3, #0
 8002320:	d014      	beq.n	800234c <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002322:	f7fe fcb3 	bl	8000c8c <HAL_GetTick>
 8002326:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8002328:	e00a      	b.n	8002340 <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800232a:	f7fe fcaf 	bl	8000c8c <HAL_GetTick>
 800232e:	4602      	mov	r2, r0
 8002330:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002332:	1ad3      	subs	r3, r2, r3
 8002334:	f241 3288 	movw	r2, #5000	; 0x1388
 8002338:	4293      	cmp	r3, r2
 800233a:	d901      	bls.n	8002340 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 800233c:	2303      	movs	r3, #3
 800233e:	e136      	b.n	80025ae <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() == 0U)
 8002340:	f7ff fb69 	bl	8001a16 <LL_RCC_LSE_IsReady>
 8002344:	4603      	mov	r3, r0
 8002346:	2b00      	cmp	r3, #0
 8002348:	d0ef      	beq.n	800232a <HAL_RCC_OscConfig+0x456>
 800234a:	e013      	b.n	8002374 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800234c:	f7fe fc9e 	bl	8000c8c <HAL_GetTick>
 8002350:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8002352:	e00a      	b.n	800236a <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002354:	f7fe fc9a 	bl	8000c8c <HAL_GetTick>
 8002358:	4602      	mov	r2, r0
 800235a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800235c:	1ad3      	subs	r3, r2, r3
 800235e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002362:	4293      	cmp	r3, r2
 8002364:	d901      	bls.n	800236a <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 8002366:	2303      	movs	r3, #3
 8002368:	e121      	b.n	80025ae <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() != 0U)
 800236a:	f7ff fb54 	bl	8001a16 <LL_RCC_LSE_IsReady>
 800236e:	4603      	mov	r3, r0
 8002370:	2b00      	cmp	r3, #0
 8002372:	d1ef      	bne.n	8002354 <HAL_RCC_OscConfig+0x480>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800237c:	2b00      	cmp	r3, #0
 800237e:	d02c      	beq.n	80023da <HAL_RCC_OscConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002384:	2b00      	cmp	r3, #0
 8002386:	d014      	beq.n	80023b2 <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002388:	f7ff facd 	bl	8001926 <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800238c:	f7fe fc7e 	bl	8000c8c <HAL_GetTick>
 8002390:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 8002392:	e008      	b.n	80023a6 <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002394:	f7fe fc7a 	bl	8000c8c <HAL_GetTick>
 8002398:	4602      	mov	r2, r0
 800239a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800239c:	1ad3      	subs	r3, r2, r3
 800239e:	2b02      	cmp	r3, #2
 80023a0:	d901      	bls.n	80023a6 <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 80023a2:	2303      	movs	r3, #3
 80023a4:	e103      	b.n	80025ae <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() == 0U)
 80023a6:	f7ff fae0 	bl	800196a <LL_RCC_HSI48_IsReady>
 80023aa:	4603      	mov	r3, r0
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d0f1      	beq.n	8002394 <HAL_RCC_OscConfig+0x4c0>
 80023b0:	e013      	b.n	80023da <HAL_RCC_OscConfig+0x506>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80023b2:	f7ff fac9 	bl	8001948 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023b6:	f7fe fc69 	bl	8000c8c <HAL_GetTick>
 80023ba:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 80023bc:	e008      	b.n	80023d0 <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80023be:	f7fe fc65 	bl	8000c8c <HAL_GetTick>
 80023c2:	4602      	mov	r2, r0
 80023c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023c6:	1ad3      	subs	r3, r2, r3
 80023c8:	2b02      	cmp	r3, #2
 80023ca:	d901      	bls.n	80023d0 <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 80023cc:	2303      	movs	r3, #3
 80023ce:	e0ee      	b.n	80025ae <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() != 0U)
 80023d0:	f7ff facb 	bl	800196a <LL_RCC_HSI48_IsReady>
 80023d4:	4603      	mov	r3, r0
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d1f1      	bne.n	80023be <HAL_RCC_OscConfig+0x4ea>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023de:	2b00      	cmp	r3, #0
 80023e0:	f000 80e4 	beq.w	80025ac <HAL_RCC_OscConfig+0x6d8>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80023e4:	f7ff fc29 	bl	8001c3a <LL_RCC_GetSysClkSource>
 80023e8:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 80023ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80023ee:	68db      	ldr	r3, [r3, #12]
 80023f0:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023f6:	2b02      	cmp	r3, #2
 80023f8:	f040 80b4 	bne.w	8002564 <HAL_RCC_OscConfig+0x690>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	f003 0203 	and.w	r2, r3, #3
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002406:	429a      	cmp	r2, r3
 8002408:	d123      	bne.n	8002452 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002414:	429a      	cmp	r2, r3
 8002416:	d11c      	bne.n	8002452 <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	0a1b      	lsrs	r3, r3, #8
 800241c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002424:	429a      	cmp	r2, r3
 8002426:	d114      	bne.n	8002452 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8002432:	429a      	cmp	r2, r3
 8002434:	d10d      	bne.n	8002452 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002440:	429a      	cmp	r2, r3
 8002442:	d106      	bne.n	8002452 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800244e:	429a      	cmp	r2, r3
 8002450:	d05d      	beq.n	800250e <HAL_RCC_OscConfig+0x63a>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002452:	693b      	ldr	r3, [r7, #16]
 8002454:	2b0c      	cmp	r3, #12
 8002456:	d058      	beq.n	800250a <HAL_RCC_OscConfig+0x636>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002458:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002462:	2b00      	cmp	r3, #0
 8002464:	d001      	beq.n	800246a <HAL_RCC_OscConfig+0x596>

          {
            return HAL_ERROR;
 8002466:	2301      	movs	r3, #1
 8002468:	e0a1      	b.n	80025ae <HAL_RCC_OscConfig+0x6da>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800246a:	f7ff fc84 	bl	8001d76 <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800246e:	f7fe fc0d 	bl	8000c8c <HAL_GetTick>
 8002472:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002474:	e008      	b.n	8002488 <HAL_RCC_OscConfig+0x5b4>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002476:	f7fe fc09 	bl	8000c8c <HAL_GetTick>
 800247a:	4602      	mov	r2, r0
 800247c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800247e:	1ad3      	subs	r3, r2, r3
 8002480:	2b02      	cmp	r3, #2
 8002482:	d901      	bls.n	8002488 <HAL_RCC_OscConfig+0x5b4>
              {
                return HAL_TIMEOUT;
 8002484:	2303      	movs	r3, #3
 8002486:	e092      	b.n	80025ae <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002488:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002492:	2b00      	cmp	r3, #0
 8002494:	d1ef      	bne.n	8002476 <HAL_RCC_OscConfig+0x5a2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002496:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800249a:	68da      	ldr	r2, [r3, #12]
 800249c:	4b30      	ldr	r3, [pc, #192]	; (8002560 <HAL_RCC_OscConfig+0x68c>)
 800249e:	4013      	ands	r3, r2
 80024a0:	687a      	ldr	r2, [r7, #4]
 80024a2:	6b11      	ldr	r1, [r2, #48]	; 0x30
 80024a4:	687a      	ldr	r2, [r7, #4]
 80024a6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80024a8:	4311      	orrs	r1, r2
 80024aa:	687a      	ldr	r2, [r7, #4]
 80024ac:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80024ae:	0212      	lsls	r2, r2, #8
 80024b0:	4311      	orrs	r1, r2
 80024b2:	687a      	ldr	r2, [r7, #4]
 80024b4:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80024b6:	4311      	orrs	r1, r2
 80024b8:	687a      	ldr	r2, [r7, #4]
 80024ba:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80024bc:	4311      	orrs	r1, r2
 80024be:	687a      	ldr	r2, [r7, #4]
 80024c0:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80024c2:	430a      	orrs	r2, r1
 80024c4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80024c8:	4313      	orrs	r3, r2
 80024ca:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80024cc:	f7ff fc44 	bl	8001d58 <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80024d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80024d4:	68db      	ldr	r3, [r3, #12]
 80024d6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80024da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024de:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80024e0:	f7fe fbd4 	bl	8000c8c <HAL_GetTick>
 80024e4:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80024e6:	e008      	b.n	80024fa <HAL_RCC_OscConfig+0x626>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024e8:	f7fe fbd0 	bl	8000c8c <HAL_GetTick>
 80024ec:	4602      	mov	r2, r0
 80024ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024f0:	1ad3      	subs	r3, r2, r3
 80024f2:	2b02      	cmp	r3, #2
 80024f4:	d901      	bls.n	80024fa <HAL_RCC_OscConfig+0x626>
              {
                return HAL_TIMEOUT;
 80024f6:	2303      	movs	r3, #3
 80024f8:	e059      	b.n	80025ae <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80024fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002504:	2b00      	cmp	r3, #0
 8002506:	d0ef      	beq.n	80024e8 <HAL_RCC_OscConfig+0x614>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002508:	e050      	b.n	80025ac <HAL_RCC_OscConfig+0x6d8>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800250a:	2301      	movs	r3, #1
 800250c:	e04f      	b.n	80025ae <HAL_RCC_OscConfig+0x6da>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800250e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002518:	2b00      	cmp	r3, #0
 800251a:	d147      	bne.n	80025ac <HAL_RCC_OscConfig+0x6d8>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800251c:	f7ff fc1c 	bl	8001d58 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002520:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002524:	68db      	ldr	r3, [r3, #12]
 8002526:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800252a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800252e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002530:	f7fe fbac 	bl	8000c8c <HAL_GetTick>
 8002534:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002536:	e008      	b.n	800254a <HAL_RCC_OscConfig+0x676>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002538:	f7fe fba8 	bl	8000c8c <HAL_GetTick>
 800253c:	4602      	mov	r2, r0
 800253e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002540:	1ad3      	subs	r3, r2, r3
 8002542:	2b02      	cmp	r3, #2
 8002544:	d901      	bls.n	800254a <HAL_RCC_OscConfig+0x676>
            {
              return HAL_TIMEOUT;
 8002546:	2303      	movs	r3, #3
 8002548:	e031      	b.n	80025ae <HAL_RCC_OscConfig+0x6da>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800254a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002554:	2b00      	cmp	r3, #0
 8002556:	d0ef      	beq.n	8002538 <HAL_RCC_OscConfig+0x664>
 8002558:	e028      	b.n	80025ac <HAL_RCC_OscConfig+0x6d8>
 800255a:	bf00      	nop
 800255c:	58000400 	.word	0x58000400
 8002560:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002564:	693b      	ldr	r3, [r7, #16]
 8002566:	2b0c      	cmp	r3, #12
 8002568:	d01e      	beq.n	80025a8 <HAL_RCC_OscConfig+0x6d4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800256a:	f7ff fc04 	bl	8001d76 <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800256e:	f7fe fb8d 	bl	8000c8c <HAL_GetTick>
 8002572:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002574:	e008      	b.n	8002588 <HAL_RCC_OscConfig+0x6b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002576:	f7fe fb89 	bl	8000c8c <HAL_GetTick>
 800257a:	4602      	mov	r2, r0
 800257c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800257e:	1ad3      	subs	r3, r2, r3
 8002580:	2b02      	cmp	r3, #2
 8002582:	d901      	bls.n	8002588 <HAL_RCC_OscConfig+0x6b4>
          {
            return HAL_TIMEOUT;
 8002584:	2303      	movs	r3, #3
 8002586:	e012      	b.n	80025ae <HAL_RCC_OscConfig+0x6da>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002588:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002592:	2b00      	cmp	r3, #0
 8002594:	d1ef      	bne.n	8002576 <HAL_RCC_OscConfig+0x6a2>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 8002596:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800259a:	68da      	ldr	r2, [r3, #12]
 800259c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80025a0:	4b05      	ldr	r3, [pc, #20]	; (80025b8 <HAL_RCC_OscConfig+0x6e4>)
 80025a2:	4013      	ands	r3, r2
 80025a4:	60cb      	str	r3, [r1, #12]
 80025a6:	e001      	b.n	80025ac <HAL_RCC_OscConfig+0x6d8>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80025a8:	2301      	movs	r3, #1
 80025aa:	e000      	b.n	80025ae <HAL_RCC_OscConfig+0x6da>
      }
    }
  }
  return HAL_OK;
 80025ac:	2300      	movs	r3, #0
}
 80025ae:	4618      	mov	r0, r3
 80025b0:	3734      	adds	r7, #52	; 0x34
 80025b2:	46bd      	mov	sp, r7
 80025b4:	bd90      	pop	{r4, r7, pc}
 80025b6:	bf00      	nop
 80025b8:	eefefffc 	.word	0xeefefffc

080025bc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80025bc:	b580      	push	{r7, lr}
 80025be:	b084      	sub	sp, #16
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	6078      	str	r0, [r7, #4]
 80025c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d101      	bne.n	80025d0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80025cc:	2301      	movs	r3, #1
 80025ce:	e12d      	b.n	800282c <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80025d0:	4b98      	ldr	r3, [pc, #608]	; (8002834 <HAL_RCC_ClockConfig+0x278>)
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f003 0307 	and.w	r3, r3, #7
 80025d8:	683a      	ldr	r2, [r7, #0]
 80025da:	429a      	cmp	r2, r3
 80025dc:	d91b      	bls.n	8002616 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025de:	4b95      	ldr	r3, [pc, #596]	; (8002834 <HAL_RCC_ClockConfig+0x278>)
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f023 0207 	bic.w	r2, r3, #7
 80025e6:	4993      	ldr	r1, [pc, #588]	; (8002834 <HAL_RCC_ClockConfig+0x278>)
 80025e8:	683b      	ldr	r3, [r7, #0]
 80025ea:	4313      	orrs	r3, r2
 80025ec:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80025ee:	f7fe fb4d 	bl	8000c8c <HAL_GetTick>
 80025f2:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80025f4:	e008      	b.n	8002608 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80025f6:	f7fe fb49 	bl	8000c8c <HAL_GetTick>
 80025fa:	4602      	mov	r2, r0
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	1ad3      	subs	r3, r2, r3
 8002600:	2b02      	cmp	r3, #2
 8002602:	d901      	bls.n	8002608 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8002604:	2303      	movs	r3, #3
 8002606:	e111      	b.n	800282c <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002608:	4b8a      	ldr	r3, [pc, #552]	; (8002834 <HAL_RCC_ClockConfig+0x278>)
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f003 0307 	and.w	r3, r3, #7
 8002610:	683a      	ldr	r2, [r7, #0]
 8002612:	429a      	cmp	r2, r3
 8002614:	d1ef      	bne.n	80025f6 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f003 0302 	and.w	r3, r3, #2
 800261e:	2b00      	cmp	r3, #0
 8002620:	d016      	beq.n	8002650 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	689b      	ldr	r3, [r3, #8]
 8002626:	4618      	mov	r0, r3
 8002628:	f7ff fb13 	bl	8001c52 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800262c:	f7fe fb2e 	bl	8000c8c <HAL_GetTick>
 8002630:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8002632:	e008      	b.n	8002646 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002634:	f7fe fb2a 	bl	8000c8c <HAL_GetTick>
 8002638:	4602      	mov	r2, r0
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	1ad3      	subs	r3, r2, r3
 800263e:	2b02      	cmp	r3, #2
 8002640:	d901      	bls.n	8002646 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8002642:	2303      	movs	r3, #3
 8002644:	e0f2      	b.n	800282c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8002646:	f7ff fbe8 	bl	8001e1a <LL_RCC_IsActiveFlag_HPRE>
 800264a:	4603      	mov	r3, r0
 800264c:	2b00      	cmp	r3, #0
 800264e:	d0f1      	beq.n	8002634 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f003 0320 	and.w	r3, r3, #32
 8002658:	2b00      	cmp	r3, #0
 800265a:	d016      	beq.n	800268a <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	695b      	ldr	r3, [r3, #20]
 8002660:	4618      	mov	r0, r3
 8002662:	f7ff fb0a 	bl	8001c7a <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002666:	f7fe fb11 	bl	8000c8c <HAL_GetTick>
 800266a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 800266c:	e008      	b.n	8002680 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800266e:	f7fe fb0d 	bl	8000c8c <HAL_GetTick>
 8002672:	4602      	mov	r2, r0
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	1ad3      	subs	r3, r2, r3
 8002678:	2b02      	cmp	r3, #2
 800267a:	d901      	bls.n	8002680 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 800267c:	2303      	movs	r3, #3
 800267e:	e0d5      	b.n	800282c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8002680:	f7ff fbdd 	bl	8001e3e <LL_RCC_IsActiveFlag_C2HPRE>
 8002684:	4603      	mov	r3, r0
 8002686:	2b00      	cmp	r3, #0
 8002688:	d0f1      	beq.n	800266e <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002692:	2b00      	cmp	r3, #0
 8002694:	d016      	beq.n	80026c4 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	699b      	ldr	r3, [r3, #24]
 800269a:	4618      	mov	r0, r3
 800269c:	f7ff fb03 	bl	8001ca6 <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80026a0:	f7fe faf4 	bl	8000c8c <HAL_GetTick>
 80026a4:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 80026a6:	e008      	b.n	80026ba <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80026a8:	f7fe faf0 	bl	8000c8c <HAL_GetTick>
 80026ac:	4602      	mov	r2, r0
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	1ad3      	subs	r3, r2, r3
 80026b2:	2b02      	cmp	r3, #2
 80026b4:	d901      	bls.n	80026ba <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 80026b6:	2303      	movs	r3, #3
 80026b8:	e0b8      	b.n	800282c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 80026ba:	f7ff fbd3 	bl	8001e64 <LL_RCC_IsActiveFlag_SHDHPRE>
 80026be:	4603      	mov	r3, r0
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d0f1      	beq.n	80026a8 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f003 0304 	and.w	r3, r3, #4
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d016      	beq.n	80026fe <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	68db      	ldr	r3, [r3, #12]
 80026d4:	4618      	mov	r0, r3
 80026d6:	f7ff fafd 	bl	8001cd4 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80026da:	f7fe fad7 	bl	8000c8c <HAL_GetTick>
 80026de:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 80026e0:	e008      	b.n	80026f4 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80026e2:	f7fe fad3 	bl	8000c8c <HAL_GetTick>
 80026e6:	4602      	mov	r2, r0
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	1ad3      	subs	r3, r2, r3
 80026ec:	2b02      	cmp	r3, #2
 80026ee:	d901      	bls.n	80026f4 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 80026f0:	2303      	movs	r3, #3
 80026f2:	e09b      	b.n	800282c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 80026f4:	f7ff fbc9 	bl	8001e8a <LL_RCC_IsActiveFlag_PPRE1>
 80026f8:	4603      	mov	r3, r0
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d0f1      	beq.n	80026e2 <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f003 0308 	and.w	r3, r3, #8
 8002706:	2b00      	cmp	r3, #0
 8002708:	d017      	beq.n	800273a <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	691b      	ldr	r3, [r3, #16]
 800270e:	00db      	lsls	r3, r3, #3
 8002710:	4618      	mov	r0, r3
 8002712:	f7ff faf3 	bl	8001cfc <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002716:	f7fe fab9 	bl	8000c8c <HAL_GetTick>
 800271a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 800271c:	e008      	b.n	8002730 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800271e:	f7fe fab5 	bl	8000c8c <HAL_GetTick>
 8002722:	4602      	mov	r2, r0
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	1ad3      	subs	r3, r2, r3
 8002728:	2b02      	cmp	r3, #2
 800272a:	d901      	bls.n	8002730 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 800272c:	2303      	movs	r3, #3
 800272e:	e07d      	b.n	800282c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8002730:	f7ff fbbd 	bl	8001eae <LL_RCC_IsActiveFlag_PPRE2>
 8002734:	4603      	mov	r3, r0
 8002736:	2b00      	cmp	r3, #0
 8002738:	d0f1      	beq.n	800271e <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f003 0301 	and.w	r3, r3, #1
 8002742:	2b00      	cmp	r3, #0
 8002744:	d043      	beq.n	80027ce <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	685b      	ldr	r3, [r3, #4]
 800274a:	2b02      	cmp	r3, #2
 800274c:	d106      	bne.n	800275c <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 800274e:	f7ff f893 	bl	8001878 <LL_RCC_HSE_IsReady>
 8002752:	4603      	mov	r3, r0
 8002754:	2b00      	cmp	r3, #0
 8002756:	d11e      	bne.n	8002796 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002758:	2301      	movs	r3, #1
 800275a:	e067      	b.n	800282c <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	685b      	ldr	r3, [r3, #4]
 8002760:	2b03      	cmp	r3, #3
 8002762:	d106      	bne.n	8002772 <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8002764:	f7ff fb16 	bl	8001d94 <LL_RCC_PLL_IsReady>
 8002768:	4603      	mov	r3, r0
 800276a:	2b00      	cmp	r3, #0
 800276c:	d113      	bne.n	8002796 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800276e:	2301      	movs	r3, #1
 8002770:	e05c      	b.n	800282c <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	685b      	ldr	r3, [r3, #4]
 8002776:	2b00      	cmp	r3, #0
 8002778:	d106      	bne.n	8002788 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 800277a:	f7ff f9fb 	bl	8001b74 <LL_RCC_MSI_IsReady>
 800277e:	4603      	mov	r3, r0
 8002780:	2b00      	cmp	r3, #0
 8002782:	d108      	bne.n	8002796 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002784:	2301      	movs	r3, #1
 8002786:	e051      	b.n	800282c <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8002788:	f7ff f8a6 	bl	80018d8 <LL_RCC_HSI_IsReady>
 800278c:	4603      	mov	r3, r0
 800278e:	2b00      	cmp	r3, #0
 8002790:	d101      	bne.n	8002796 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002792:	2301      	movs	r3, #1
 8002794:	e04a      	b.n	800282c <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	685b      	ldr	r3, [r3, #4]
 800279a:	4618      	mov	r0, r3
 800279c:	f7ff fa39 	bl	8001c12 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80027a0:	f7fe fa74 	bl	8000c8c <HAL_GetTick>
 80027a4:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027a6:	e00a      	b.n	80027be <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80027a8:	f7fe fa70 	bl	8000c8c <HAL_GetTick>
 80027ac:	4602      	mov	r2, r0
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	1ad3      	subs	r3, r2, r3
 80027b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80027b6:	4293      	cmp	r3, r2
 80027b8:	d901      	bls.n	80027be <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 80027ba:	2303      	movs	r3, #3
 80027bc:	e036      	b.n	800282c <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027be:	f7ff fa3c 	bl	8001c3a <LL_RCC_GetSysClkSource>
 80027c2:	4602      	mov	r2, r0
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	685b      	ldr	r3, [r3, #4]
 80027c8:	009b      	lsls	r3, r3, #2
 80027ca:	429a      	cmp	r2, r3
 80027cc:	d1ec      	bne.n	80027a8 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80027ce:	4b19      	ldr	r3, [pc, #100]	; (8002834 <HAL_RCC_ClockConfig+0x278>)
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f003 0307 	and.w	r3, r3, #7
 80027d6:	683a      	ldr	r2, [r7, #0]
 80027d8:	429a      	cmp	r2, r3
 80027da:	d21b      	bcs.n	8002814 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027dc:	4b15      	ldr	r3, [pc, #84]	; (8002834 <HAL_RCC_ClockConfig+0x278>)
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f023 0207 	bic.w	r2, r3, #7
 80027e4:	4913      	ldr	r1, [pc, #76]	; (8002834 <HAL_RCC_ClockConfig+0x278>)
 80027e6:	683b      	ldr	r3, [r7, #0]
 80027e8:	4313      	orrs	r3, r2
 80027ea:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80027ec:	f7fe fa4e 	bl	8000c8c <HAL_GetTick>
 80027f0:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80027f2:	e008      	b.n	8002806 <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80027f4:	f7fe fa4a 	bl	8000c8c <HAL_GetTick>
 80027f8:	4602      	mov	r2, r0
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	1ad3      	subs	r3, r2, r3
 80027fe:	2b02      	cmp	r3, #2
 8002800:	d901      	bls.n	8002806 <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8002802:	2303      	movs	r3, #3
 8002804:	e012      	b.n	800282c <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002806:	4b0b      	ldr	r3, [pc, #44]	; (8002834 <HAL_RCC_ClockConfig+0x278>)
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f003 0307 	and.w	r3, r3, #7
 800280e:	683a      	ldr	r2, [r7, #0]
 8002810:	429a      	cmp	r2, r3
 8002812:	d1ef      	bne.n	80027f4 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8002814:	f000 f87e 	bl	8002914 <HAL_RCC_GetHCLKFreq>
 8002818:	4603      	mov	r3, r0
 800281a:	4a07      	ldr	r2, [pc, #28]	; (8002838 <HAL_RCC_ClockConfig+0x27c>)
 800281c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 800281e:	f7fe fa41 	bl	8000ca4 <HAL_GetTickPrio>
 8002822:	4603      	mov	r3, r0
 8002824:	4618      	mov	r0, r3
 8002826:	f7fe f9e3 	bl	8000bf0 <HAL_InitTick>
 800282a:	4603      	mov	r3, r0
}
 800282c:	4618      	mov	r0, r3
 800282e:	3710      	adds	r7, #16
 8002830:	46bd      	mov	sp, r7
 8002832:	bd80      	pop	{r7, pc}
 8002834:	58004000 	.word	0x58004000
 8002838:	20000008 	.word	0x20000008

0800283c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800283c:	b590      	push	{r4, r7, lr}
 800283e:	b085      	sub	sp, #20
 8002840:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002842:	f7ff f9fa 	bl	8001c3a <LL_RCC_GetSysClkSource>
 8002846:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	2b00      	cmp	r3, #0
 800284c:	d10a      	bne.n	8002864 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 800284e:	f7ff f9b6 	bl	8001bbe <LL_RCC_MSI_GetRange>
 8002852:	4603      	mov	r3, r0
 8002854:	091b      	lsrs	r3, r3, #4
 8002856:	f003 030f 	and.w	r3, r3, #15
 800285a:	4a2b      	ldr	r2, [pc, #172]	; (8002908 <HAL_RCC_GetSysClockFreq+0xcc>)
 800285c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002860:	60fb      	str	r3, [r7, #12]
 8002862:	e04b      	b.n	80028fc <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	2b04      	cmp	r3, #4
 8002868:	d102      	bne.n	8002870 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800286a:	4b28      	ldr	r3, [pc, #160]	; (800290c <HAL_RCC_GetSysClockFreq+0xd0>)
 800286c:	60fb      	str	r3, [r7, #12]
 800286e:	e045      	b.n	80028fc <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	2b08      	cmp	r3, #8
 8002874:	d10a      	bne.n	800288c <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8002876:	f7fe ffcf 	bl	8001818 <LL_RCC_HSE_IsEnabledDiv2>
 800287a:	4603      	mov	r3, r0
 800287c:	2b01      	cmp	r3, #1
 800287e:	d102      	bne.n	8002886 <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8002880:	4b22      	ldr	r3, [pc, #136]	; (800290c <HAL_RCC_GetSysClockFreq+0xd0>)
 8002882:	60fb      	str	r3, [r7, #12]
 8002884:	e03a      	b.n	80028fc <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8002886:	4b22      	ldr	r3, [pc, #136]	; (8002910 <HAL_RCC_GetSysClockFreq+0xd4>)
 8002888:	60fb      	str	r3, [r7, #12]
 800288a:	e037      	b.n	80028fc <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 800288c:	f7ff fab9 	bl	8001e02 <LL_RCC_PLL_GetMainSource>
 8002890:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 8002892:	683b      	ldr	r3, [r7, #0]
 8002894:	2b02      	cmp	r3, #2
 8002896:	d003      	beq.n	80028a0 <HAL_RCC_GetSysClockFreq+0x64>
 8002898:	683b      	ldr	r3, [r7, #0]
 800289a:	2b03      	cmp	r3, #3
 800289c:	d003      	beq.n	80028a6 <HAL_RCC_GetSysClockFreq+0x6a>
 800289e:	e00d      	b.n	80028bc <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 80028a0:	4b1a      	ldr	r3, [pc, #104]	; (800290c <HAL_RCC_GetSysClockFreq+0xd0>)
 80028a2:	60bb      	str	r3, [r7, #8]
        break;
 80028a4:	e015      	b.n	80028d2 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 80028a6:	f7fe ffb7 	bl	8001818 <LL_RCC_HSE_IsEnabledDiv2>
 80028aa:	4603      	mov	r3, r0
 80028ac:	2b01      	cmp	r3, #1
 80028ae:	d102      	bne.n	80028b6 <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 80028b0:	4b16      	ldr	r3, [pc, #88]	; (800290c <HAL_RCC_GetSysClockFreq+0xd0>)
 80028b2:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 80028b4:	e00d      	b.n	80028d2 <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 80028b6:	4b16      	ldr	r3, [pc, #88]	; (8002910 <HAL_RCC_GetSysClockFreq+0xd4>)
 80028b8:	60bb      	str	r3, [r7, #8]
        break;
 80028ba:	e00a      	b.n	80028d2 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 80028bc:	f7ff f97f 	bl	8001bbe <LL_RCC_MSI_GetRange>
 80028c0:	4603      	mov	r3, r0
 80028c2:	091b      	lsrs	r3, r3, #4
 80028c4:	f003 030f 	and.w	r3, r3, #15
 80028c8:	4a0f      	ldr	r2, [pc, #60]	; (8002908 <HAL_RCC_GetSysClockFreq+0xcc>)
 80028ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80028ce:	60bb      	str	r3, [r7, #8]
        break;
 80028d0:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 80028d2:	f7ff fa71 	bl	8001db8 <LL_RCC_PLL_GetN>
 80028d6:	4602      	mov	r2, r0
 80028d8:	68bb      	ldr	r3, [r7, #8]
 80028da:	fb03 f402 	mul.w	r4, r3, r2
 80028de:	f7ff fa84 	bl	8001dea <LL_RCC_PLL_GetDivider>
 80028e2:	4603      	mov	r3, r0
 80028e4:	091b      	lsrs	r3, r3, #4
 80028e6:	3301      	adds	r3, #1
 80028e8:	fbb4 f4f3 	udiv	r4, r4, r3
 80028ec:	f7ff fa71 	bl	8001dd2 <LL_RCC_PLL_GetR>
 80028f0:	4603      	mov	r3, r0
 80028f2:	0f5b      	lsrs	r3, r3, #29
 80028f4:	3301      	adds	r3, #1
 80028f6:	fbb4 f3f3 	udiv	r3, r4, r3
 80028fa:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 80028fc:	68fb      	ldr	r3, [r7, #12]
}
 80028fe:	4618      	mov	r0, r3
 8002900:	3714      	adds	r7, #20
 8002902:	46bd      	mov	sp, r7
 8002904:	bd90      	pop	{r4, r7, pc}
 8002906:	bf00      	nop
 8002908:	080049b4 	.word	0x080049b4
 800290c:	00f42400 	.word	0x00f42400
 8002910:	01e84800 	.word	0x01e84800

08002914 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002914:	b598      	push	{r3, r4, r7, lr}
 8002916:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8002918:	f7ff ff90 	bl	800283c <HAL_RCC_GetSysClockFreq>
 800291c:	4604      	mov	r4, r0
 800291e:	f7ff fa01 	bl	8001d24 <LL_RCC_GetAHBPrescaler>
 8002922:	4603      	mov	r3, r0
 8002924:	091b      	lsrs	r3, r3, #4
 8002926:	f003 030f 	and.w	r3, r3, #15
 800292a:	4a03      	ldr	r2, [pc, #12]	; (8002938 <HAL_RCC_GetHCLKFreq+0x24>)
 800292c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002930:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8002934:	4618      	mov	r0, r3
 8002936:	bd98      	pop	{r3, r4, r7, pc}
 8002938:	08004974 	.word	0x08004974

0800293c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 800293c:	b590      	push	{r4, r7, lr}
 800293e:	b085      	sub	sp, #20
 8002940:	af00      	add	r7, sp, #0
 8002942:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	2bb0      	cmp	r3, #176	; 0xb0
 8002948:	d903      	bls.n	8002952 <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 800294a:	4b15      	ldr	r3, [pc, #84]	; (80029a0 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 800294c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800294e:	60fb      	str	r3, [r7, #12]
 8002950:	e007      	b.n	8002962 <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	091b      	lsrs	r3, r3, #4
 8002956:	f003 030f 	and.w	r3, r3, #15
 800295a:	4a11      	ldr	r2, [pc, #68]	; (80029a0 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 800295c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002960:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8002962:	f7ff f9eb 	bl	8001d3c <LL_RCC_GetAHB4Prescaler>
 8002966:	4603      	mov	r3, r0
 8002968:	091b      	lsrs	r3, r3, #4
 800296a:	f003 030f 	and.w	r3, r3, #15
 800296e:	4a0d      	ldr	r2, [pc, #52]	; (80029a4 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8002970:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002974:	68fa      	ldr	r2, [r7, #12]
 8002976:	fbb2 f3f3 	udiv	r3, r2, r3
 800297a:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 800297c:	68bb      	ldr	r3, [r7, #8]
 800297e:	4a0a      	ldr	r2, [pc, #40]	; (80029a8 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 8002980:	fba2 2303 	umull	r2, r3, r2, r3
 8002984:	0c9c      	lsrs	r4, r3, #18
 8002986:	f7fe ff39 	bl	80017fc <HAL_PWREx_GetVoltageRange>
 800298a:	4603      	mov	r3, r0
 800298c:	4619      	mov	r1, r3
 800298e:	4620      	mov	r0, r4
 8002990:	f000 f80c 	bl	80029ac <RCC_SetFlashLatency>
 8002994:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif /* PWR_CR1_VOS */
}
 8002996:	4618      	mov	r0, r3
 8002998:	3714      	adds	r7, #20
 800299a:	46bd      	mov	sp, r7
 800299c:	bd90      	pop	{r4, r7, pc}
 800299e:	bf00      	nop
 80029a0:	080049b4 	.word	0x080049b4
 80029a4:	08004974 	.word	0x08004974
 80029a8:	431bde83 	.word	0x431bde83

080029ac <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 80029ac:	b590      	push	{r4, r7, lr}
 80029ae:	b093      	sub	sp, #76	; 0x4c
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	6078      	str	r0, [r7, #4]
 80029b4:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 80029b6:	4b37      	ldr	r3, [pc, #220]	; (8002a94 <RCC_SetFlashLatency+0xe8>)
 80029b8:	f107 0428 	add.w	r4, r7, #40	; 0x28
 80029bc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80029be:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 80029c2:	4a35      	ldr	r2, [pc, #212]	; (8002a98 <RCC_SetFlashLatency+0xec>)
 80029c4:	f107 031c 	add.w	r3, r7, #28
 80029c8:	ca07      	ldmia	r2, {r0, r1, r2}
 80029ca:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 80029ce:	4b33      	ldr	r3, [pc, #204]	; (8002a9c <RCC_SetFlashLatency+0xf0>)
 80029d0:	f107 040c 	add.w	r4, r7, #12
 80029d4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80029d6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 80029da:	2300      	movs	r3, #0
 80029dc:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 80029de:	683b      	ldr	r3, [r7, #0]
 80029e0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80029e4:	d11a      	bne.n	8002a1c <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 80029e6:	2300      	movs	r3, #0
 80029e8:	643b      	str	r3, [r7, #64]	; 0x40
 80029ea:	e013      	b.n	8002a14 <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 80029ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80029ee:	009b      	lsls	r3, r3, #2
 80029f0:	3348      	adds	r3, #72	; 0x48
 80029f2:	443b      	add	r3, r7
 80029f4:	f853 3c20 	ldr.w	r3, [r3, #-32]
 80029f8:	687a      	ldr	r2, [r7, #4]
 80029fa:	429a      	cmp	r2, r3
 80029fc:	d807      	bhi.n	8002a0e <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 80029fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002a00:	009b      	lsls	r3, r3, #2
 8002a02:	3348      	adds	r3, #72	; 0x48
 8002a04:	443b      	add	r3, r7
 8002a06:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8002a0a:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8002a0c:	e020      	b.n	8002a50 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8002a0e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002a10:	3301      	adds	r3, #1
 8002a12:	643b      	str	r3, [r7, #64]	; 0x40
 8002a14:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002a16:	2b03      	cmp	r3, #3
 8002a18:	d9e8      	bls.n	80029ec <RCC_SetFlashLatency+0x40>
 8002a1a:	e019      	b.n	8002a50 <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8002a1c:	2300      	movs	r3, #0
 8002a1e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002a20:	e013      	b.n	8002a4a <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8002a22:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002a24:	009b      	lsls	r3, r3, #2
 8002a26:	3348      	adds	r3, #72	; 0x48
 8002a28:	443b      	add	r3, r7
 8002a2a:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8002a2e:	687a      	ldr	r2, [r7, #4]
 8002a30:	429a      	cmp	r2, r3
 8002a32:	d807      	bhi.n	8002a44 <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8002a34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002a36:	009b      	lsls	r3, r3, #2
 8002a38:	3348      	adds	r3, #72	; 0x48
 8002a3a:	443b      	add	r3, r7
 8002a3c:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8002a40:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8002a42:	e005      	b.n	8002a50 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8002a44:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002a46:	3301      	adds	r3, #1
 8002a48:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002a4a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002a4c:	2b02      	cmp	r3, #2
 8002a4e:	d9e8      	bls.n	8002a22 <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 8002a50:	4b13      	ldr	r3, [pc, #76]	; (8002aa0 <RCC_SetFlashLatency+0xf4>)
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f023 0207 	bic.w	r2, r3, #7
 8002a58:	4911      	ldr	r1, [pc, #68]	; (8002aa0 <RCC_SetFlashLatency+0xf4>)
 8002a5a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002a5c:	4313      	orrs	r3, r2
 8002a5e:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8002a60:	f7fe f914 	bl	8000c8c <HAL_GetTick>
 8002a64:	63b8      	str	r0, [r7, #56]	; 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8002a66:	e008      	b.n	8002a7a <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8002a68:	f7fe f910 	bl	8000c8c <HAL_GetTick>
 8002a6c:	4602      	mov	r2, r0
 8002a6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a70:	1ad3      	subs	r3, r2, r3
 8002a72:	2b02      	cmp	r3, #2
 8002a74:	d901      	bls.n	8002a7a <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 8002a76:	2303      	movs	r3, #3
 8002a78:	e007      	b.n	8002a8a <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8002a7a:	4b09      	ldr	r3, [pc, #36]	; (8002aa0 <RCC_SetFlashLatency+0xf4>)
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f003 0307 	and.w	r3, r3, #7
 8002a82:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002a84:	429a      	cmp	r2, r3
 8002a86:	d1ef      	bne.n	8002a68 <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 8002a88:	2300      	movs	r3, #0
}
 8002a8a:	4618      	mov	r0, r3
 8002a8c:	374c      	adds	r7, #76	; 0x4c
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	bd90      	pop	{r4, r7, pc}
 8002a92:	bf00      	nop
 8002a94:	08004948 	.word	0x08004948
 8002a98:	08004958 	.word	0x08004958
 8002a9c:	08004964 	.word	0x08004964
 8002aa0:	58004000 	.word	0x58004000

08002aa4 <LL_RCC_LSE_IsEnabled>:
{
 8002aa4:	b480      	push	{r7}
 8002aa6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8002aa8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002aac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ab0:	f003 0301 	and.w	r3, r3, #1
 8002ab4:	2b01      	cmp	r3, #1
 8002ab6:	d101      	bne.n	8002abc <LL_RCC_LSE_IsEnabled+0x18>
 8002ab8:	2301      	movs	r3, #1
 8002aba:	e000      	b.n	8002abe <LL_RCC_LSE_IsEnabled+0x1a>
 8002abc:	2300      	movs	r3, #0
}
 8002abe:	4618      	mov	r0, r3
 8002ac0:	46bd      	mov	sp, r7
 8002ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac6:	4770      	bx	lr

08002ac8 <LL_RCC_LSE_IsReady>:
{
 8002ac8:	b480      	push	{r7}
 8002aca:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8002acc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ad0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ad4:	f003 0302 	and.w	r3, r3, #2
 8002ad8:	2b02      	cmp	r3, #2
 8002ada:	d101      	bne.n	8002ae0 <LL_RCC_LSE_IsReady+0x18>
 8002adc:	2301      	movs	r3, #1
 8002ade:	e000      	b.n	8002ae2 <LL_RCC_LSE_IsReady+0x1a>
 8002ae0:	2300      	movs	r3, #0
}
 8002ae2:	4618      	mov	r0, r3
 8002ae4:	46bd      	mov	sp, r7
 8002ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aea:	4770      	bx	lr

08002aec <LL_RCC_SetRFWKPClockSource>:
{
 8002aec:	b480      	push	{r7}
 8002aee:	b083      	sub	sp, #12
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 8002af4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002af8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002afc:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002b00:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	4313      	orrs	r3, r2
 8002b08:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8002b0c:	bf00      	nop
 8002b0e:	370c      	adds	r7, #12
 8002b10:	46bd      	mov	sp, r7
 8002b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b16:	4770      	bx	lr

08002b18 <LL_RCC_SetSMPSClockSource>:
{
 8002b18:	b480      	push	{r7}
 8002b1a:	b083      	sub	sp, #12
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 8002b20:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b26:	f023 0203 	bic.w	r2, r3, #3
 8002b2a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	4313      	orrs	r3, r2
 8002b32:	624b      	str	r3, [r1, #36]	; 0x24
}
 8002b34:	bf00      	nop
 8002b36:	370c      	adds	r7, #12
 8002b38:	46bd      	mov	sp, r7
 8002b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b3e:	4770      	bx	lr

08002b40 <LL_RCC_SetSMPSPrescaler>:
{
 8002b40:	b480      	push	{r7}
 8002b42:	b083      	sub	sp, #12
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 8002b48:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b4e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002b52:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	4313      	orrs	r3, r2
 8002b5a:	624b      	str	r3, [r1, #36]	; 0x24
}
 8002b5c:	bf00      	nop
 8002b5e:	370c      	adds	r7, #12
 8002b60:	46bd      	mov	sp, r7
 8002b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b66:	4770      	bx	lr

08002b68 <LL_RCC_SetUSARTClockSource>:
{
 8002b68:	b480      	push	{r7}
 8002b6a:	b083      	sub	sp, #12
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 8002b70:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b78:	f023 0203 	bic.w	r2, r3, #3
 8002b7c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	4313      	orrs	r3, r2
 8002b84:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002b88:	bf00      	nop
 8002b8a:	370c      	adds	r7, #12
 8002b8c:	46bd      	mov	sp, r7
 8002b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b92:	4770      	bx	lr

08002b94 <LL_RCC_SetLPUARTClockSource>:
{
 8002b94:	b480      	push	{r7}
 8002b96:	b083      	sub	sp, #12
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8002b9c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ba0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ba4:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002ba8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	4313      	orrs	r3, r2
 8002bb0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002bb4:	bf00      	nop
 8002bb6:	370c      	adds	r7, #12
 8002bb8:	46bd      	mov	sp, r7
 8002bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bbe:	4770      	bx	lr

08002bc0 <LL_RCC_SetI2CClockSource>:
{
 8002bc0:	b480      	push	{r7}
 8002bc2:	b083      	sub	sp, #12
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8002bc8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002bcc:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	091b      	lsrs	r3, r3, #4
 8002bd4:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8002bd8:	43db      	mvns	r3, r3
 8002bda:	401a      	ands	r2, r3
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	011b      	lsls	r3, r3, #4
 8002be0:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8002be4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002be8:	4313      	orrs	r3, r2
 8002bea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002bee:	bf00      	nop
 8002bf0:	370c      	adds	r7, #12
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf8:	4770      	bx	lr

08002bfa <LL_RCC_SetLPTIMClockSource>:
{
 8002bfa:	b480      	push	{r7}
 8002bfc:	b083      	sub	sp, #12
 8002bfe:	af00      	add	r7, sp, #0
 8002c00:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8002c02:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c06:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	0c1b      	lsrs	r3, r3, #16
 8002c0e:	041b      	lsls	r3, r3, #16
 8002c10:	43db      	mvns	r3, r3
 8002c12:	401a      	ands	r2, r3
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	041b      	lsls	r3, r3, #16
 8002c18:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002c1c:	4313      	orrs	r3, r2
 8002c1e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002c22:	bf00      	nop
 8002c24:	370c      	adds	r7, #12
 8002c26:	46bd      	mov	sp, r7
 8002c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c2c:	4770      	bx	lr

08002c2e <LL_RCC_SetSAIClockSource>:
{
 8002c2e:	b480      	push	{r7}
 8002c30:	b083      	sub	sp, #12
 8002c32:	af00      	add	r7, sp, #0
 8002c34:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 8002c36:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c3e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002c42:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	4313      	orrs	r3, r2
 8002c4a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002c4e:	bf00      	nop
 8002c50:	370c      	adds	r7, #12
 8002c52:	46bd      	mov	sp, r7
 8002c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c58:	4770      	bx	lr

08002c5a <LL_RCC_SetRNGClockSource>:
{
 8002c5a:	b480      	push	{r7}
 8002c5c:	b083      	sub	sp, #12
 8002c5e:	af00      	add	r7, sp, #0
 8002c60:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8002c62:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c6a:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8002c6e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	4313      	orrs	r3, r2
 8002c76:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002c7a:	bf00      	nop
 8002c7c:	370c      	adds	r7, #12
 8002c7e:	46bd      	mov	sp, r7
 8002c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c84:	4770      	bx	lr

08002c86 <LL_RCC_SetCLK48ClockSource>:
{
 8002c86:	b480      	push	{r7}
 8002c88:	b083      	sub	sp, #12
 8002c8a:	af00      	add	r7, sp, #0
 8002c8c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 8002c8e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c96:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002c9a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	4313      	orrs	r3, r2
 8002ca2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002ca6:	bf00      	nop
 8002ca8:	370c      	adds	r7, #12
 8002caa:	46bd      	mov	sp, r7
 8002cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb0:	4770      	bx	lr

08002cb2 <LL_RCC_SetUSBClockSource>:
{
 8002cb2:	b580      	push	{r7, lr}
 8002cb4:	b082      	sub	sp, #8
 8002cb6:	af00      	add	r7, sp, #0
 8002cb8:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 8002cba:	6878      	ldr	r0, [r7, #4]
 8002cbc:	f7ff ffe3 	bl	8002c86 <LL_RCC_SetCLK48ClockSource>
}
 8002cc0:	bf00      	nop
 8002cc2:	3708      	adds	r7, #8
 8002cc4:	46bd      	mov	sp, r7
 8002cc6:	bd80      	pop	{r7, pc}

08002cc8 <LL_RCC_SetADCClockSource>:
{
 8002cc8:	b480      	push	{r7}
 8002cca:	b083      	sub	sp, #12
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8002cd0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002cd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cd8:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002cdc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	4313      	orrs	r3, r2
 8002ce4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002ce8:	bf00      	nop
 8002cea:	370c      	adds	r7, #12
 8002cec:	46bd      	mov	sp, r7
 8002cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf2:	4770      	bx	lr

08002cf4 <LL_RCC_SetRTCClockSource>:
{
 8002cf4:	b480      	push	{r7}
 8002cf6:	b083      	sub	sp, #12
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8002cfc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d00:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d04:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002d08:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	4313      	orrs	r3, r2
 8002d10:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8002d14:	bf00      	nop
 8002d16:	370c      	adds	r7, #12
 8002d18:	46bd      	mov	sp, r7
 8002d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1e:	4770      	bx	lr

08002d20 <LL_RCC_GetRTCClockSource>:
{
 8002d20:	b480      	push	{r7}
 8002d22:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8002d24:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d28:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d2c:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8002d30:	4618      	mov	r0, r3
 8002d32:	46bd      	mov	sp, r7
 8002d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d38:	4770      	bx	lr

08002d3a <LL_RCC_ForceBackupDomainReset>:
{
 8002d3a:	b480      	push	{r7}
 8002d3c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8002d3e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d46:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002d4a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d4e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002d52:	bf00      	nop
 8002d54:	46bd      	mov	sp, r7
 8002d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d5a:	4770      	bx	lr

08002d5c <LL_RCC_ReleaseBackupDomainReset>:
{
 8002d5c:	b480      	push	{r7}
 8002d5e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8002d60:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d64:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d68:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002d6c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d70:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002d74:	bf00      	nop
 8002d76:	46bd      	mov	sp, r7
 8002d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7c:	4770      	bx	lr

08002d7e <LL_RCC_PLLSAI1_Enable>:
{
 8002d7e:	b480      	push	{r7}
 8002d80:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8002d82:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002d8c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002d90:	6013      	str	r3, [r2, #0]
}
 8002d92:	bf00      	nop
 8002d94:	46bd      	mov	sp, r7
 8002d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d9a:	4770      	bx	lr

08002d9c <LL_RCC_PLLSAI1_Disable>:
{
 8002d9c:	b480      	push	{r7}
 8002d9e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8002da0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002daa:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002dae:	6013      	str	r3, [r2, #0]
}
 8002db0:	bf00      	nop
 8002db2:	46bd      	mov	sp, r7
 8002db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db8:	4770      	bx	lr

08002dba <LL_RCC_PLLSAI1_IsReady>:
{
 8002dba:	b480      	push	{r7}
 8002dbc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 8002dbe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002dc8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002dcc:	d101      	bne.n	8002dd2 <LL_RCC_PLLSAI1_IsReady+0x18>
 8002dce:	2301      	movs	r3, #1
 8002dd0:	e000      	b.n	8002dd4 <LL_RCC_PLLSAI1_IsReady+0x1a>
 8002dd2:	2300      	movs	r3, #0
}
 8002dd4:	4618      	mov	r0, r3
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ddc:	4770      	bx	lr

08002dde <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002dde:	b580      	push	{r7, lr}
 8002de0:	b088      	sub	sp, #32
 8002de2:	af00      	add	r7, sp, #0
 8002de4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 8002de6:	2300      	movs	r3, #0
 8002de8:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8002dea:	2300      	movs	r3, #0
 8002dec:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d034      	beq.n	8002e64 <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dfe:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002e02:	d021      	beq.n	8002e48 <HAL_RCCEx_PeriphCLKConfig+0x6a>
 8002e04:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002e08:	d81b      	bhi.n	8002e42 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002e0a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002e0e:	d01d      	beq.n	8002e4c <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8002e10:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002e14:	d815      	bhi.n	8002e42 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d00b      	beq.n	8002e32 <HAL_RCCEx_PeriphCLKConfig+0x54>
 8002e1a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002e1e:	d110      	bne.n	8002e42 <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 8002e20:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e24:	68db      	ldr	r3, [r3, #12]
 8002e26:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002e2a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e2e:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 8002e30:	e00d      	b.n	8002e4e <HAL_RCCEx_PeriphCLKConfig+0x70>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	3304      	adds	r3, #4
 8002e36:	4618      	mov	r0, r3
 8002e38:	f000 f947 	bl	80030ca <RCCEx_PLLSAI1_ConfigNP>
 8002e3c:	4603      	mov	r3, r0
 8002e3e:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8002e40:	e005      	b.n	8002e4e <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 8002e42:	2301      	movs	r3, #1
 8002e44:	77fb      	strb	r3, [r7, #31]
        break;
 8002e46:	e002      	b.n	8002e4e <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8002e48:	bf00      	nop
 8002e4a:	e000      	b.n	8002e4e <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8002e4c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002e4e:	7ffb      	ldrb	r3, [r7, #31]
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d105      	bne.n	8002e60 <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e58:	4618      	mov	r0, r3
 8002e5a:	f7ff fee8 	bl	8002c2e <LL_RCC_SetSAIClockSource>
 8002e5e:	e001      	b.n	8002e64 <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e60:	7ffb      	ldrb	r3, [r7, #31]
 8002e62:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d046      	beq.n	8002efe <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 8002e70:	f7ff ff56 	bl	8002d20 <LL_RCC_GetRTCClockSource>
 8002e74:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e7a:	69ba      	ldr	r2, [r7, #24]
 8002e7c:	429a      	cmp	r2, r3
 8002e7e:	d03c      	beq.n	8002efa <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8002e80:	f7fe fcac 	bl	80017dc <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 8002e84:	69bb      	ldr	r3, [r7, #24]
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d105      	bne.n	8002e96 <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e8e:	4618      	mov	r0, r3
 8002e90:	f7ff ff30 	bl	8002cf4 <LL_RCC_SetRTCClockSource>
 8002e94:	e02e      	b.n	8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 8002e96:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e9e:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 8002ea0:	f7ff ff4b 	bl	8002d3a <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 8002ea4:	f7ff ff5a 	bl	8002d5c <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 8002ea8:	697b      	ldr	r3, [r7, #20]
 8002eaa:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eb2:	4313      	orrs	r3, r2
 8002eb4:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 8002eb6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002eba:	697b      	ldr	r3, [r7, #20]
 8002ebc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 8002ec0:	f7ff fdf0 	bl	8002aa4 <LL_RCC_LSE_IsEnabled>
 8002ec4:	4603      	mov	r3, r0
 8002ec6:	2b01      	cmp	r3, #1
 8002ec8:	d114      	bne.n	8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002eca:	f7fd fedf 	bl	8000c8c <HAL_GetTick>
 8002ece:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 8002ed0:	e00b      	b.n	8002eea <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ed2:	f7fd fedb 	bl	8000c8c <HAL_GetTick>
 8002ed6:	4602      	mov	r2, r0
 8002ed8:	693b      	ldr	r3, [r7, #16]
 8002eda:	1ad3      	subs	r3, r2, r3
 8002edc:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ee0:	4293      	cmp	r3, r2
 8002ee2:	d902      	bls.n	8002eea <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 8002ee4:	2303      	movs	r3, #3
 8002ee6:	77fb      	strb	r3, [r7, #31]
              break;
 8002ee8:	e004      	b.n	8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 8002eea:	f7ff fded 	bl	8002ac8 <LL_RCC_LSE_IsReady>
 8002eee:	4603      	mov	r3, r0
 8002ef0:	2b01      	cmp	r3, #1
 8002ef2:	d1ee      	bne.n	8002ed2 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 8002ef4:	7ffb      	ldrb	r3, [r7, #31]
 8002ef6:	77bb      	strb	r3, [r7, #30]
 8002ef8:	e001      	b.n	8002efe <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002efa:	7ffb      	ldrb	r3, [r7, #31]
 8002efc:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f003 0301 	and.w	r3, r3, #1
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d004      	beq.n	8002f14 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	699b      	ldr	r3, [r3, #24]
 8002f0e:	4618      	mov	r0, r3
 8002f10:	f7ff fe2a 	bl	8002b68 <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f003 0302 	and.w	r3, r3, #2
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d004      	beq.n	8002f2a <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	69db      	ldr	r3, [r3, #28]
 8002f24:	4618      	mov	r0, r3
 8002f26:	f7ff fe35 	bl	8002b94 <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f003 0310 	and.w	r3, r3, #16
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d004      	beq.n	8002f40 <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f3a:	4618      	mov	r0, r3
 8002f3c:	f7ff fe5d 	bl	8002bfa <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f003 0320 	and.w	r3, r3, #32
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d004      	beq.n	8002f56 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f50:	4618      	mov	r0, r3
 8002f52:	f7ff fe52 	bl	8002bfa <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f003 0304 	and.w	r3, r3, #4
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d004      	beq.n	8002f6c <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	6a1b      	ldr	r3, [r3, #32]
 8002f66:	4618      	mov	r0, r3
 8002f68:	f7ff fe2a 	bl	8002bc0 <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f003 0308 	and.w	r3, r3, #8
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d004      	beq.n	8002f82 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f7c:	4618      	mov	r0, r3
 8002f7e:	f7ff fe1f 	bl	8002bc0 <LL_RCC_SetI2CClockSource>
  }
#endif /* I2C3 */

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d022      	beq.n	8002fd4 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f92:	4618      	mov	r0, r3
 8002f94:	f7ff fe8d 	bl	8002cb2 <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f9c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002fa0:	d107      	bne.n	8002fb2 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 8002fa2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002fa6:	68db      	ldr	r3, [r3, #12]
 8002fa8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002fac:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002fb0:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002fb6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002fba:	d10b      	bne.n	8002fd4 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	3304      	adds	r3, #4
 8002fc0:	4618      	mov	r0, r3
 8002fc2:	f000 f8dd 	bl	8003180 <RCCEx_PLLSAI1_ConfigNQ>
 8002fc6:	4603      	mov	r3, r0
 8002fc8:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8002fca:	7ffb      	ldrb	r3, [r7, #31]
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d001      	beq.n	8002fd4 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* set overall return value */
        status = ret;
 8002fd0:	7ffb      	ldrb	r3, [r7, #31]
 8002fd2:	77bb      	strb	r3, [r7, #30]
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d02b      	beq.n	8003038 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fe4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002fe8:	d008      	beq.n	8002ffc <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fee:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002ff2:	d003      	beq.n	8002ffc <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d105      	bne.n	8003008 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003000:	4618      	mov	r0, r3
 8003002:	f7ff fe2a 	bl	8002c5a <LL_RCC_SetRNGClockSource>
 8003006:	e00a      	b.n	800301e <HAL_RCCEx_PeriphCLKConfig+0x240>
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800300c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003010:	60fb      	str	r3, [r7, #12]
 8003012:	2000      	movs	r0, #0
 8003014:	f7ff fe21 	bl	8002c5a <LL_RCC_SetRNGClockSource>
 8003018:	68f8      	ldr	r0, [r7, #12]
 800301a:	f7ff fe34 	bl	8002c86 <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003022:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 8003026:	d107      	bne.n	8003038 <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8003028:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800302c:	68db      	ldr	r3, [r3, #12]
 800302e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003032:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003036:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003040:	2b00      	cmp	r3, #0
 8003042:	d022      	beq.n	800308a <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003048:	4618      	mov	r0, r3
 800304a:	f7ff fe3d 	bl	8002cc8 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003052:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003056:	d107      	bne.n	8003068 <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003058:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800305c:	68db      	ldr	r3, [r3, #12]
 800305e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003062:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003066:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800306c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003070:	d10b      	bne.n	800308a <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	3304      	adds	r3, #4
 8003076:	4618      	mov	r0, r3
 8003078:	f000 f8dd 	bl	8003236 <RCCEx_PLLSAI1_ConfigNR>
 800307c:	4603      	mov	r3, r0
 800307e:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8003080:	7ffb      	ldrb	r3, [r7, #31]
 8003082:	2b00      	cmp	r3, #0
 8003084:	d001      	beq.n	800308a <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      {
        /* set overall return value */
        status = ret;
 8003086:	7ffb      	ldrb	r3, [r7, #31]
 8003088:	77bb      	strb	r3, [r7, #30]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003092:	2b00      	cmp	r3, #0
 8003094:	d004      	beq.n	80030a0 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800309a:	4618      	mov	r0, r3
 800309c:	f7ff fd26 	bl	8002aec <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d009      	beq.n	80030c0 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80030b0:	4618      	mov	r0, r3
 80030b2:	f7ff fd45 	bl	8002b40 <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80030ba:	4618      	mov	r0, r3
 80030bc:	f7ff fd2c 	bl	8002b18 <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 80030c0:	7fbb      	ldrb	r3, [r7, #30]
}
 80030c2:	4618      	mov	r0, r3
 80030c4:	3720      	adds	r7, #32
 80030c6:	46bd      	mov	sp, r7
 80030c8:	bd80      	pop	{r7, pc}

080030ca <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 80030ca:	b580      	push	{r7, lr}
 80030cc:	b084      	sub	sp, #16
 80030ce:	af00      	add	r7, sp, #0
 80030d0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80030d2:	2300      	movs	r3, #0
 80030d4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 80030d6:	f7ff fe61 	bl	8002d9c <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80030da:	f7fd fdd7 	bl	8000c8c <HAL_GetTick>
 80030de:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80030e0:	e009      	b.n	80030f6 <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80030e2:	f7fd fdd3 	bl	8000c8c <HAL_GetTick>
 80030e6:	4602      	mov	r2, r0
 80030e8:	68bb      	ldr	r3, [r7, #8]
 80030ea:	1ad3      	subs	r3, r2, r3
 80030ec:	2b02      	cmp	r3, #2
 80030ee:	d902      	bls.n	80030f6 <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 80030f0:	2303      	movs	r3, #3
 80030f2:	73fb      	strb	r3, [r7, #15]
      break;
 80030f4:	e004      	b.n	8003100 <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80030f6:	f7ff fe60 	bl	8002dba <LL_RCC_PLLSAI1_IsReady>
 80030fa:	4603      	mov	r3, r0
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d1f0      	bne.n	80030e2 <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 8003100:	7bfb      	ldrb	r3, [r7, #15]
 8003102:	2b00      	cmp	r3, #0
 8003104:	d137      	bne.n	8003176 <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8003106:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800310a:	691b      	ldr	r3, [r3, #16]
 800310c:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	021b      	lsls	r3, r3, #8
 8003116:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800311a:	4313      	orrs	r3, r2
 800311c:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 800311e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003122:	691b      	ldr	r3, [r3, #16]
 8003124:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	685b      	ldr	r3, [r3, #4]
 800312c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003130:	4313      	orrs	r3, r2
 8003132:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8003134:	f7ff fe23 	bl	8002d7e <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003138:	f7fd fda8 	bl	8000c8c <HAL_GetTick>
 800313c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800313e:	e009      	b.n	8003154 <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003140:	f7fd fda4 	bl	8000c8c <HAL_GetTick>
 8003144:	4602      	mov	r2, r0
 8003146:	68bb      	ldr	r3, [r7, #8]
 8003148:	1ad3      	subs	r3, r2, r3
 800314a:	2b02      	cmp	r3, #2
 800314c:	d902      	bls.n	8003154 <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 800314e:	2303      	movs	r3, #3
 8003150:	73fb      	strb	r3, [r7, #15]
        break;
 8003152:	e004      	b.n	800315e <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8003154:	f7ff fe31 	bl	8002dba <LL_RCC_PLLSAI1_IsReady>
 8003158:	4603      	mov	r3, r0
 800315a:	2b01      	cmp	r3, #1
 800315c:	d1f0      	bne.n	8003140 <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 800315e:	7bfb      	ldrb	r3, [r7, #15]
 8003160:	2b00      	cmp	r3, #0
 8003162:	d108      	bne.n	8003176 <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8003164:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003168:	691a      	ldr	r2, [r3, #16]
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	691b      	ldr	r3, [r3, #16]
 800316e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003172:	4313      	orrs	r3, r2
 8003174:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8003176:	7bfb      	ldrb	r3, [r7, #15]
}
 8003178:	4618      	mov	r0, r3
 800317a:	3710      	adds	r7, #16
 800317c:	46bd      	mov	sp, r7
 800317e:	bd80      	pop	{r7, pc}

08003180 <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8003180:	b580      	push	{r7, lr}
 8003182:	b084      	sub	sp, #16
 8003184:	af00      	add	r7, sp, #0
 8003186:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003188:	2300      	movs	r3, #0
 800318a:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800318c:	f7ff fe06 	bl	8002d9c <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8003190:	f7fd fd7c 	bl	8000c8c <HAL_GetTick>
 8003194:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8003196:	e009      	b.n	80031ac <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003198:	f7fd fd78 	bl	8000c8c <HAL_GetTick>
 800319c:	4602      	mov	r2, r0
 800319e:	68bb      	ldr	r3, [r7, #8]
 80031a0:	1ad3      	subs	r3, r2, r3
 80031a2:	2b02      	cmp	r3, #2
 80031a4:	d902      	bls.n	80031ac <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 80031a6:	2303      	movs	r3, #3
 80031a8:	73fb      	strb	r3, [r7, #15]
      break;
 80031aa:	e004      	b.n	80031b6 <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80031ac:	f7ff fe05 	bl	8002dba <LL_RCC_PLLSAI1_IsReady>
 80031b0:	4603      	mov	r3, r0
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d1f0      	bne.n	8003198 <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 80031b6:	7bfb      	ldrb	r3, [r7, #15]
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d137      	bne.n	800322c <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 80031bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80031c0:	691b      	ldr	r3, [r3, #16]
 80031c2:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	021b      	lsls	r3, r3, #8
 80031cc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80031d0:	4313      	orrs	r3, r2
 80031d2:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 80031d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80031d8:	691b      	ldr	r3, [r3, #16]
 80031da:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	689b      	ldr	r3, [r3, #8]
 80031e2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80031e6:	4313      	orrs	r3, r2
 80031e8:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 80031ea:	f7ff fdc8 	bl	8002d7e <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80031ee:	f7fd fd4d 	bl	8000c8c <HAL_GetTick>
 80031f2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80031f4:	e009      	b.n	800320a <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80031f6:	f7fd fd49 	bl	8000c8c <HAL_GetTick>
 80031fa:	4602      	mov	r2, r0
 80031fc:	68bb      	ldr	r3, [r7, #8]
 80031fe:	1ad3      	subs	r3, r2, r3
 8003200:	2b02      	cmp	r3, #2
 8003202:	d902      	bls.n	800320a <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 8003204:	2303      	movs	r3, #3
 8003206:	73fb      	strb	r3, [r7, #15]
        break;
 8003208:	e004      	b.n	8003214 <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800320a:	f7ff fdd6 	bl	8002dba <LL_RCC_PLLSAI1_IsReady>
 800320e:	4603      	mov	r3, r0
 8003210:	2b01      	cmp	r3, #1
 8003212:	d1f0      	bne.n	80031f6 <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 8003214:	7bfb      	ldrb	r3, [r7, #15]
 8003216:	2b00      	cmp	r3, #0
 8003218:	d108      	bne.n	800322c <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800321a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800321e:	691a      	ldr	r2, [r3, #16]
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	691b      	ldr	r3, [r3, #16]
 8003224:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003228:	4313      	orrs	r3, r2
 800322a:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800322c:	7bfb      	ldrb	r3, [r7, #15]
}
 800322e:	4618      	mov	r0, r3
 8003230:	3710      	adds	r7, #16
 8003232:	46bd      	mov	sp, r7
 8003234:	bd80      	pop	{r7, pc}

08003236 <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8003236:	b580      	push	{r7, lr}
 8003238:	b084      	sub	sp, #16
 800323a:	af00      	add	r7, sp, #0
 800323c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800323e:	2300      	movs	r3, #0
 8003240:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8003242:	f7ff fdab 	bl	8002d9c <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8003246:	f7fd fd21 	bl	8000c8c <HAL_GetTick>
 800324a:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800324c:	e009      	b.n	8003262 <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800324e:	f7fd fd1d 	bl	8000c8c <HAL_GetTick>
 8003252:	4602      	mov	r2, r0
 8003254:	68bb      	ldr	r3, [r7, #8]
 8003256:	1ad3      	subs	r3, r2, r3
 8003258:	2b02      	cmp	r3, #2
 800325a:	d902      	bls.n	8003262 <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 800325c:	2303      	movs	r3, #3
 800325e:	73fb      	strb	r3, [r7, #15]
      break;
 8003260:	e004      	b.n	800326c <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8003262:	f7ff fdaa 	bl	8002dba <LL_RCC_PLLSAI1_IsReady>
 8003266:	4603      	mov	r3, r0
 8003268:	2b00      	cmp	r3, #0
 800326a:	d1f0      	bne.n	800324e <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 800326c:	7bfb      	ldrb	r3, [r7, #15]
 800326e:	2b00      	cmp	r3, #0
 8003270:	d137      	bne.n	80032e2 <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8003272:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003276:	691b      	ldr	r3, [r3, #16]
 8003278:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	021b      	lsls	r3, r3, #8
 8003282:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003286:	4313      	orrs	r3, r2
 8003288:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 800328a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800328e:	691b      	ldr	r3, [r3, #16]
 8003290:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	68db      	ldr	r3, [r3, #12]
 8003298:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800329c:	4313      	orrs	r3, r2
 800329e:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 80032a0:	f7ff fd6d 	bl	8002d7e <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80032a4:	f7fd fcf2 	bl	8000c8c <HAL_GetTick>
 80032a8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80032aa:	e009      	b.n	80032c0 <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80032ac:	f7fd fcee 	bl	8000c8c <HAL_GetTick>
 80032b0:	4602      	mov	r2, r0
 80032b2:	68bb      	ldr	r3, [r7, #8]
 80032b4:	1ad3      	subs	r3, r2, r3
 80032b6:	2b02      	cmp	r3, #2
 80032b8:	d902      	bls.n	80032c0 <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 80032ba:	2303      	movs	r3, #3
 80032bc:	73fb      	strb	r3, [r7, #15]
        break;
 80032be:	e004      	b.n	80032ca <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80032c0:	f7ff fd7b 	bl	8002dba <LL_RCC_PLLSAI1_IsReady>
 80032c4:	4603      	mov	r3, r0
 80032c6:	2b01      	cmp	r3, #1
 80032c8:	d1f0      	bne.n	80032ac <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 80032ca:	7bfb      	ldrb	r3, [r7, #15]
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d108      	bne.n	80032e2 <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80032d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80032d4:	691a      	ldr	r2, [r3, #16]
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	691b      	ldr	r3, [r3, #16]
 80032da:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80032de:	4313      	orrs	r3, r2
 80032e0:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 80032e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80032e4:	4618      	mov	r0, r3
 80032e6:	3710      	adds	r7, #16
 80032e8:	46bd      	mov	sp, r7
 80032ea:	bd80      	pop	{r7, pc}

080032ec <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80032ec:	b580      	push	{r7, lr}
 80032ee:	b082      	sub	sp, #8
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d101      	bne.n	80032fe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80032fa:	2301      	movs	r3, #1
 80032fc:	e049      	b.n	8003392 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003304:	b2db      	uxtb	r3, r3
 8003306:	2b00      	cmp	r3, #0
 8003308:	d106      	bne.n	8003318 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	2200      	movs	r2, #0
 800330e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003312:	6878      	ldr	r0, [r7, #4]
 8003314:	f7fd fba4 	bl	8000a60 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	2202      	movs	r2, #2
 800331c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681a      	ldr	r2, [r3, #0]
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	3304      	adds	r3, #4
 8003328:	4619      	mov	r1, r3
 800332a:	4610      	mov	r0, r2
 800332c:	f000 fe32 	bl	8003f94 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	2201      	movs	r2, #1
 8003334:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	2201      	movs	r2, #1
 800333c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	2201      	movs	r2, #1
 8003344:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	2201      	movs	r2, #1
 800334c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	2201      	movs	r2, #1
 8003354:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	2201      	movs	r2, #1
 800335c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	2201      	movs	r2, #1
 8003364:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	2201      	movs	r2, #1
 800336c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	2201      	movs	r2, #1
 8003374:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	2201      	movs	r2, #1
 800337c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	2201      	movs	r2, #1
 8003384:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	2201      	movs	r2, #1
 800338c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003390:	2300      	movs	r3, #0
}
 8003392:	4618      	mov	r0, r3
 8003394:	3708      	adds	r7, #8
 8003396:	46bd      	mov	sp, r7
 8003398:	bd80      	pop	{r7, pc}

0800339a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800339a:	b580      	push	{r7, lr}
 800339c:	b082      	sub	sp, #8
 800339e:	af00      	add	r7, sp, #0
 80033a0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d101      	bne.n	80033ac <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80033a8:	2301      	movs	r3, #1
 80033aa:	e049      	b.n	8003440 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80033b2:	b2db      	uxtb	r3, r3
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d106      	bne.n	80033c6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	2200      	movs	r2, #0
 80033bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80033c0:	6878      	ldr	r0, [r7, #4]
 80033c2:	f000 f841 	bl	8003448 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	2202      	movs	r2, #2
 80033ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681a      	ldr	r2, [r3, #0]
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	3304      	adds	r3, #4
 80033d6:	4619      	mov	r1, r3
 80033d8:	4610      	mov	r0, r2
 80033da:	f000 fddb 	bl	8003f94 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	2201      	movs	r2, #1
 80033e2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	2201      	movs	r2, #1
 80033ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	2201      	movs	r2, #1
 80033f2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	2201      	movs	r2, #1
 80033fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	2201      	movs	r2, #1
 8003402:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	2201      	movs	r2, #1
 800340a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	2201      	movs	r2, #1
 8003412:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	2201      	movs	r2, #1
 800341a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	2201      	movs	r2, #1
 8003422:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	2201      	movs	r2, #1
 800342a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	2201      	movs	r2, #1
 8003432:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	2201      	movs	r2, #1
 800343a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800343e:	2300      	movs	r3, #0
}
 8003440:	4618      	mov	r0, r3
 8003442:	3708      	adds	r7, #8
 8003444:	46bd      	mov	sp, r7
 8003446:	bd80      	pop	{r7, pc}

08003448 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003448:	b480      	push	{r7}
 800344a:	b083      	sub	sp, #12
 800344c:	af00      	add	r7, sp, #0
 800344e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003450:	bf00      	nop
 8003452:	370c      	adds	r7, #12
 8003454:	46bd      	mov	sp, r7
 8003456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800345a:	4770      	bx	lr

0800345c <HAL_TIM_PWM_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
 800345c:	b580      	push	{r7, lr}
 800345e:	b086      	sub	sp, #24
 8003460:	af00      	add	r7, sp, #0
 8003462:	60f8      	str	r0, [r7, #12]
 8003464:	60b9      	str	r1, [r7, #8]
 8003466:	607a      	str	r2, [r7, #4]
 8003468:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 800346a:	2300      	movs	r3, #0
 800346c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 800346e:	68bb      	ldr	r3, [r7, #8]
 8003470:	2b00      	cmp	r3, #0
 8003472:	d109      	bne.n	8003488 <HAL_TIM_PWM_Start_DMA+0x2c>
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800347a:	b2db      	uxtb	r3, r3
 800347c:	2b02      	cmp	r3, #2
 800347e:	bf0c      	ite	eq
 8003480:	2301      	moveq	r3, #1
 8003482:	2300      	movne	r3, #0
 8003484:	b2db      	uxtb	r3, r3
 8003486:	e03c      	b.n	8003502 <HAL_TIM_PWM_Start_DMA+0xa6>
 8003488:	68bb      	ldr	r3, [r7, #8]
 800348a:	2b04      	cmp	r3, #4
 800348c:	d109      	bne.n	80034a2 <HAL_TIM_PWM_Start_DMA+0x46>
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003494:	b2db      	uxtb	r3, r3
 8003496:	2b02      	cmp	r3, #2
 8003498:	bf0c      	ite	eq
 800349a:	2301      	moveq	r3, #1
 800349c:	2300      	movne	r3, #0
 800349e:	b2db      	uxtb	r3, r3
 80034a0:	e02f      	b.n	8003502 <HAL_TIM_PWM_Start_DMA+0xa6>
 80034a2:	68bb      	ldr	r3, [r7, #8]
 80034a4:	2b08      	cmp	r3, #8
 80034a6:	d109      	bne.n	80034bc <HAL_TIM_PWM_Start_DMA+0x60>
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80034ae:	b2db      	uxtb	r3, r3
 80034b0:	2b02      	cmp	r3, #2
 80034b2:	bf0c      	ite	eq
 80034b4:	2301      	moveq	r3, #1
 80034b6:	2300      	movne	r3, #0
 80034b8:	b2db      	uxtb	r3, r3
 80034ba:	e022      	b.n	8003502 <HAL_TIM_PWM_Start_DMA+0xa6>
 80034bc:	68bb      	ldr	r3, [r7, #8]
 80034be:	2b0c      	cmp	r3, #12
 80034c0:	d109      	bne.n	80034d6 <HAL_TIM_PWM_Start_DMA+0x7a>
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80034c8:	b2db      	uxtb	r3, r3
 80034ca:	2b02      	cmp	r3, #2
 80034cc:	bf0c      	ite	eq
 80034ce:	2301      	moveq	r3, #1
 80034d0:	2300      	movne	r3, #0
 80034d2:	b2db      	uxtb	r3, r3
 80034d4:	e015      	b.n	8003502 <HAL_TIM_PWM_Start_DMA+0xa6>
 80034d6:	68bb      	ldr	r3, [r7, #8]
 80034d8:	2b10      	cmp	r3, #16
 80034da:	d109      	bne.n	80034f0 <HAL_TIM_PWM_Start_DMA+0x94>
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80034e2:	b2db      	uxtb	r3, r3
 80034e4:	2b02      	cmp	r3, #2
 80034e6:	bf0c      	ite	eq
 80034e8:	2301      	moveq	r3, #1
 80034ea:	2300      	movne	r3, #0
 80034ec:	b2db      	uxtb	r3, r3
 80034ee:	e008      	b.n	8003502 <HAL_TIM_PWM_Start_DMA+0xa6>
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80034f6:	b2db      	uxtb	r3, r3
 80034f8:	2b02      	cmp	r3, #2
 80034fa:	bf0c      	ite	eq
 80034fc:	2301      	moveq	r3, #1
 80034fe:	2300      	movne	r3, #0
 8003500:	b2db      	uxtb	r3, r3
 8003502:	2b00      	cmp	r3, #0
 8003504:	d001      	beq.n	800350a <HAL_TIM_PWM_Start_DMA+0xae>
  {
    return HAL_BUSY;
 8003506:	2302      	movs	r3, #2
 8003508:	e188      	b.n	800381c <HAL_TIM_PWM_Start_DMA+0x3c0>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 800350a:	68bb      	ldr	r3, [r7, #8]
 800350c:	2b00      	cmp	r3, #0
 800350e:	d109      	bne.n	8003524 <HAL_TIM_PWM_Start_DMA+0xc8>
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003516:	b2db      	uxtb	r3, r3
 8003518:	2b01      	cmp	r3, #1
 800351a:	bf0c      	ite	eq
 800351c:	2301      	moveq	r3, #1
 800351e:	2300      	movne	r3, #0
 8003520:	b2db      	uxtb	r3, r3
 8003522:	e03c      	b.n	800359e <HAL_TIM_PWM_Start_DMA+0x142>
 8003524:	68bb      	ldr	r3, [r7, #8]
 8003526:	2b04      	cmp	r3, #4
 8003528:	d109      	bne.n	800353e <HAL_TIM_PWM_Start_DMA+0xe2>
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003530:	b2db      	uxtb	r3, r3
 8003532:	2b01      	cmp	r3, #1
 8003534:	bf0c      	ite	eq
 8003536:	2301      	moveq	r3, #1
 8003538:	2300      	movne	r3, #0
 800353a:	b2db      	uxtb	r3, r3
 800353c:	e02f      	b.n	800359e <HAL_TIM_PWM_Start_DMA+0x142>
 800353e:	68bb      	ldr	r3, [r7, #8]
 8003540:	2b08      	cmp	r3, #8
 8003542:	d109      	bne.n	8003558 <HAL_TIM_PWM_Start_DMA+0xfc>
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800354a:	b2db      	uxtb	r3, r3
 800354c:	2b01      	cmp	r3, #1
 800354e:	bf0c      	ite	eq
 8003550:	2301      	moveq	r3, #1
 8003552:	2300      	movne	r3, #0
 8003554:	b2db      	uxtb	r3, r3
 8003556:	e022      	b.n	800359e <HAL_TIM_PWM_Start_DMA+0x142>
 8003558:	68bb      	ldr	r3, [r7, #8]
 800355a:	2b0c      	cmp	r3, #12
 800355c:	d109      	bne.n	8003572 <HAL_TIM_PWM_Start_DMA+0x116>
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003564:	b2db      	uxtb	r3, r3
 8003566:	2b01      	cmp	r3, #1
 8003568:	bf0c      	ite	eq
 800356a:	2301      	moveq	r3, #1
 800356c:	2300      	movne	r3, #0
 800356e:	b2db      	uxtb	r3, r3
 8003570:	e015      	b.n	800359e <HAL_TIM_PWM_Start_DMA+0x142>
 8003572:	68bb      	ldr	r3, [r7, #8]
 8003574:	2b10      	cmp	r3, #16
 8003576:	d109      	bne.n	800358c <HAL_TIM_PWM_Start_DMA+0x130>
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800357e:	b2db      	uxtb	r3, r3
 8003580:	2b01      	cmp	r3, #1
 8003582:	bf0c      	ite	eq
 8003584:	2301      	moveq	r3, #1
 8003586:	2300      	movne	r3, #0
 8003588:	b2db      	uxtb	r3, r3
 800358a:	e008      	b.n	800359e <HAL_TIM_PWM_Start_DMA+0x142>
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003592:	b2db      	uxtb	r3, r3
 8003594:	2b01      	cmp	r3, #1
 8003596:	bf0c      	ite	eq
 8003598:	2301      	moveq	r3, #1
 800359a:	2300      	movne	r3, #0
 800359c:	b2db      	uxtb	r3, r3
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d034      	beq.n	800360c <HAL_TIM_PWM_Start_DMA+0x1b0>
  {
    if ((pData == NULL) || (Length == 0U))
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d002      	beq.n	80035ae <HAL_TIM_PWM_Start_DMA+0x152>
 80035a8:	887b      	ldrh	r3, [r7, #2]
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d101      	bne.n	80035b2 <HAL_TIM_PWM_Start_DMA+0x156>
    {
      return HAL_ERROR;
 80035ae:	2301      	movs	r3, #1
 80035b0:	e134      	b.n	800381c <HAL_TIM_PWM_Start_DMA+0x3c0>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80035b2:	68bb      	ldr	r3, [r7, #8]
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d104      	bne.n	80035c2 <HAL_TIM_PWM_Start_DMA+0x166>
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	2202      	movs	r2, #2
 80035bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80035c0:	e026      	b.n	8003610 <HAL_TIM_PWM_Start_DMA+0x1b4>
 80035c2:	68bb      	ldr	r3, [r7, #8]
 80035c4:	2b04      	cmp	r3, #4
 80035c6:	d104      	bne.n	80035d2 <HAL_TIM_PWM_Start_DMA+0x176>
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	2202      	movs	r2, #2
 80035cc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80035d0:	e01e      	b.n	8003610 <HAL_TIM_PWM_Start_DMA+0x1b4>
 80035d2:	68bb      	ldr	r3, [r7, #8]
 80035d4:	2b08      	cmp	r3, #8
 80035d6:	d104      	bne.n	80035e2 <HAL_TIM_PWM_Start_DMA+0x186>
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	2202      	movs	r2, #2
 80035dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80035e0:	e016      	b.n	8003610 <HAL_TIM_PWM_Start_DMA+0x1b4>
 80035e2:	68bb      	ldr	r3, [r7, #8]
 80035e4:	2b0c      	cmp	r3, #12
 80035e6:	d104      	bne.n	80035f2 <HAL_TIM_PWM_Start_DMA+0x196>
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	2202      	movs	r2, #2
 80035ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80035f0:	e00e      	b.n	8003610 <HAL_TIM_PWM_Start_DMA+0x1b4>
 80035f2:	68bb      	ldr	r3, [r7, #8]
 80035f4:	2b10      	cmp	r3, #16
 80035f6:	d104      	bne.n	8003602 <HAL_TIM_PWM_Start_DMA+0x1a6>
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	2202      	movs	r2, #2
 80035fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003600:	e006      	b.n	8003610 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	2202      	movs	r2, #2
 8003606:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800360a:	e001      	b.n	8003610 <HAL_TIM_PWM_Start_DMA+0x1b4>
    }
  }
  else
  {
    return HAL_ERROR;
 800360c:	2301      	movs	r3, #1
 800360e:	e105      	b.n	800381c <HAL_TIM_PWM_Start_DMA+0x3c0>
  }

  switch (Channel)
 8003610:	68bb      	ldr	r3, [r7, #8]
 8003612:	2b0c      	cmp	r3, #12
 8003614:	f200 80ae 	bhi.w	8003774 <HAL_TIM_PWM_Start_DMA+0x318>
 8003618:	a201      	add	r2, pc, #4	; (adr r2, 8003620 <HAL_TIM_PWM_Start_DMA+0x1c4>)
 800361a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800361e:	bf00      	nop
 8003620:	08003655 	.word	0x08003655
 8003624:	08003775 	.word	0x08003775
 8003628:	08003775 	.word	0x08003775
 800362c:	08003775 	.word	0x08003775
 8003630:	0800369d 	.word	0x0800369d
 8003634:	08003775 	.word	0x08003775
 8003638:	08003775 	.word	0x08003775
 800363c:	08003775 	.word	0x08003775
 8003640:	080036e5 	.word	0x080036e5
 8003644:	08003775 	.word	0x08003775
 8003648:	08003775 	.word	0x08003775
 800364c:	08003775 	.word	0x08003775
 8003650:	0800372d 	.word	0x0800372d
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003658:	4a72      	ldr	r2, [pc, #456]	; (8003824 <HAL_TIM_PWM_Start_DMA+0x3c8>)
 800365a:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003660:	4a71      	ldr	r2, [pc, #452]	; (8003828 <HAL_TIM_PWM_Start_DMA+0x3cc>)
 8003662:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003668:	4a70      	ldr	r2, [pc, #448]	; (800382c <HAL_TIM_PWM_Start_DMA+0x3d0>)
 800366a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8003670:	6879      	ldr	r1, [r7, #4]
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	3334      	adds	r3, #52	; 0x34
 8003678:	461a      	mov	r2, r3
 800367a:	887b      	ldrh	r3, [r7, #2]
 800367c:	f7fd fcfa 	bl	8001074 <HAL_DMA_Start_IT>
 8003680:	4603      	mov	r3, r0
 8003682:	2b00      	cmp	r3, #0
 8003684:	d001      	beq.n	800368a <HAL_TIM_PWM_Start_DMA+0x22e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8003686:	2301      	movs	r3, #1
 8003688:	e0c8      	b.n	800381c <HAL_TIM_PWM_Start_DMA+0x3c0>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	68da      	ldr	r2, [r3, #12]
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003698:	60da      	str	r2, [r3, #12]
      break;
 800369a:	e06e      	b.n	800377a <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036a0:	4a60      	ldr	r2, [pc, #384]	; (8003824 <HAL_TIM_PWM_Start_DMA+0x3c8>)
 80036a2:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036a8:	4a5f      	ldr	r2, [pc, #380]	; (8003828 <HAL_TIM_PWM_Start_DMA+0x3cc>)
 80036aa:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036b0:	4a5e      	ldr	r2, [pc, #376]	; (800382c <HAL_TIM_PWM_Start_DMA+0x3d0>)
 80036b2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80036b8:	6879      	ldr	r1, [r7, #4]
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	3338      	adds	r3, #56	; 0x38
 80036c0:	461a      	mov	r2, r3
 80036c2:	887b      	ldrh	r3, [r7, #2]
 80036c4:	f7fd fcd6 	bl	8001074 <HAL_DMA_Start_IT>
 80036c8:	4603      	mov	r3, r0
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d001      	beq.n	80036d2 <HAL_TIM_PWM_Start_DMA+0x276>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80036ce:	2301      	movs	r3, #1
 80036d0:	e0a4      	b.n	800381c <HAL_TIM_PWM_Start_DMA+0x3c0>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	68da      	ldr	r2, [r3, #12]
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80036e0:	60da      	str	r2, [r3, #12]
      break;
 80036e2:	e04a      	b.n	800377a <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036e8:	4a4e      	ldr	r2, [pc, #312]	; (8003824 <HAL_TIM_PWM_Start_DMA+0x3c8>)
 80036ea:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036f0:	4a4d      	ldr	r2, [pc, #308]	; (8003828 <HAL_TIM_PWM_Start_DMA+0x3cc>)
 80036f2:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036f8:	4a4c      	ldr	r2, [pc, #304]	; (800382c <HAL_TIM_PWM_Start_DMA+0x3d0>)
 80036fa:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8003700:	6879      	ldr	r1, [r7, #4]
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	333c      	adds	r3, #60	; 0x3c
 8003708:	461a      	mov	r2, r3
 800370a:	887b      	ldrh	r3, [r7, #2]
 800370c:	f7fd fcb2 	bl	8001074 <HAL_DMA_Start_IT>
 8003710:	4603      	mov	r3, r0
 8003712:	2b00      	cmp	r3, #0
 8003714:	d001      	beq.n	800371a <HAL_TIM_PWM_Start_DMA+0x2be>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8003716:	2301      	movs	r3, #1
 8003718:	e080      	b.n	800381c <HAL_TIM_PWM_Start_DMA+0x3c0>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	68da      	ldr	r2, [r3, #12]
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003728:	60da      	str	r2, [r3, #12]
      break;
 800372a:	e026      	b.n	800377a <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003730:	4a3c      	ldr	r2, [pc, #240]	; (8003824 <HAL_TIM_PWM_Start_DMA+0x3c8>)
 8003732:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003738:	4a3b      	ldr	r2, [pc, #236]	; (8003828 <HAL_TIM_PWM_Start_DMA+0x3cc>)
 800373a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003740:	4a3a      	ldr	r2, [pc, #232]	; (800382c <HAL_TIM_PWM_Start_DMA+0x3d0>)
 8003742:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8003748:	6879      	ldr	r1, [r7, #4]
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	3340      	adds	r3, #64	; 0x40
 8003750:	461a      	mov	r2, r3
 8003752:	887b      	ldrh	r3, [r7, #2]
 8003754:	f7fd fc8e 	bl	8001074 <HAL_DMA_Start_IT>
 8003758:	4603      	mov	r3, r0
 800375a:	2b00      	cmp	r3, #0
 800375c:	d001      	beq.n	8003762 <HAL_TIM_PWM_Start_DMA+0x306>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800375e:	2301      	movs	r3, #1
 8003760:	e05c      	b.n	800381c <HAL_TIM_PWM_Start_DMA+0x3c0>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	68da      	ldr	r2, [r3, #12]
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003770:	60da      	str	r2, [r3, #12]
      break;
 8003772:	e002      	b.n	800377a <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    default:
      status = HAL_ERROR;
 8003774:	2301      	movs	r3, #1
 8003776:	75fb      	strb	r3, [r7, #23]
      break;
 8003778:	bf00      	nop
  }

  if (status == HAL_OK)
 800377a:	7dfb      	ldrb	r3, [r7, #23]
 800377c:	2b00      	cmp	r3, #0
 800377e:	d14c      	bne.n	800381a <HAL_TIM_PWM_Start_DMA+0x3be>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	2201      	movs	r2, #1
 8003786:	68b9      	ldr	r1, [r7, #8]
 8003788:	4618      	mov	r0, r3
 800378a:	f000 ff81 	bl	8004690 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	4a27      	ldr	r2, [pc, #156]	; (8003830 <HAL_TIM_PWM_Start_DMA+0x3d4>)
 8003794:	4293      	cmp	r3, r2
 8003796:	d009      	beq.n	80037ac <HAL_TIM_PWM_Start_DMA+0x350>
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	4a25      	ldr	r2, [pc, #148]	; (8003834 <HAL_TIM_PWM_Start_DMA+0x3d8>)
 800379e:	4293      	cmp	r3, r2
 80037a0:	d004      	beq.n	80037ac <HAL_TIM_PWM_Start_DMA+0x350>
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	4a24      	ldr	r2, [pc, #144]	; (8003838 <HAL_TIM_PWM_Start_DMA+0x3dc>)
 80037a8:	4293      	cmp	r3, r2
 80037aa:	d101      	bne.n	80037b0 <HAL_TIM_PWM_Start_DMA+0x354>
 80037ac:	2301      	movs	r3, #1
 80037ae:	e000      	b.n	80037b2 <HAL_TIM_PWM_Start_DMA+0x356>
 80037b0:	2300      	movs	r3, #0
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d007      	beq.n	80037c6 <HAL_TIM_PWM_Start_DMA+0x36a>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80037c4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	4a19      	ldr	r2, [pc, #100]	; (8003830 <HAL_TIM_PWM_Start_DMA+0x3d4>)
 80037cc:	4293      	cmp	r3, r2
 80037ce:	d004      	beq.n	80037da <HAL_TIM_PWM_Start_DMA+0x37e>
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80037d8:	d115      	bne.n	8003806 <HAL_TIM_PWM_Start_DMA+0x3aa>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	689a      	ldr	r2, [r3, #8]
 80037e0:	4b16      	ldr	r3, [pc, #88]	; (800383c <HAL_TIM_PWM_Start_DMA+0x3e0>)
 80037e2:	4013      	ands	r3, r2
 80037e4:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80037e6:	693b      	ldr	r3, [r7, #16]
 80037e8:	2b06      	cmp	r3, #6
 80037ea:	d015      	beq.n	8003818 <HAL_TIM_PWM_Start_DMA+0x3bc>
 80037ec:	693b      	ldr	r3, [r7, #16]
 80037ee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80037f2:	d011      	beq.n	8003818 <HAL_TIM_PWM_Start_DMA+0x3bc>
      {
        __HAL_TIM_ENABLE(htim);
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	681a      	ldr	r2, [r3, #0]
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f042 0201 	orr.w	r2, r2, #1
 8003802:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003804:	e008      	b.n	8003818 <HAL_TIM_PWM_Start_DMA+0x3bc>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	681a      	ldr	r2, [r3, #0]
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f042 0201 	orr.w	r2, r2, #1
 8003814:	601a      	str	r2, [r3, #0]
 8003816:	e000      	b.n	800381a <HAL_TIM_PWM_Start_DMA+0x3be>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003818:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 800381a:	7dfb      	ldrb	r3, [r7, #23]
}
 800381c:	4618      	mov	r0, r3
 800381e:	3718      	adds	r7, #24
 8003820:	46bd      	mov	sp, r7
 8003822:	bd80      	pop	{r7, pc}
 8003824:	08003e85 	.word	0x08003e85
 8003828:	08003f2d 	.word	0x08003f2d
 800382c:	08003df3 	.word	0x08003df3
 8003830:	40012c00 	.word	0x40012c00
 8003834:	40014400 	.word	0x40014400
 8003838:	40014800 	.word	0x40014800
 800383c:	00010007 	.word	0x00010007

08003840 <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003840:	b580      	push	{r7, lr}
 8003842:	b084      	sub	sp, #16
 8003844:	af00      	add	r7, sp, #0
 8003846:	6078      	str	r0, [r7, #4]
 8003848:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800384a:	2300      	movs	r3, #0
 800384c:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 800384e:	683b      	ldr	r3, [r7, #0]
 8003850:	2b0c      	cmp	r3, #12
 8003852:	d855      	bhi.n	8003900 <HAL_TIM_PWM_Stop_DMA+0xc0>
 8003854:	a201      	add	r2, pc, #4	; (adr r2, 800385c <HAL_TIM_PWM_Stop_DMA+0x1c>)
 8003856:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800385a:	bf00      	nop
 800385c:	08003891 	.word	0x08003891
 8003860:	08003901 	.word	0x08003901
 8003864:	08003901 	.word	0x08003901
 8003868:	08003901 	.word	0x08003901
 800386c:	080038ad 	.word	0x080038ad
 8003870:	08003901 	.word	0x08003901
 8003874:	08003901 	.word	0x08003901
 8003878:	08003901 	.word	0x08003901
 800387c:	080038c9 	.word	0x080038c9
 8003880:	08003901 	.word	0x08003901
 8003884:	08003901 	.word	0x08003901
 8003888:	08003901 	.word	0x08003901
 800388c:	080038e5 	.word	0x080038e5
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	68da      	ldr	r2, [r3, #12]
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800389e:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038a4:	4618      	mov	r0, r3
 80038a6:	f7fd fc60 	bl	800116a <HAL_DMA_Abort_IT>
      break;
 80038aa:	e02c      	b.n	8003906 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	68da      	ldr	r2, [r3, #12]
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80038ba:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038c0:	4618      	mov	r0, r3
 80038c2:	f7fd fc52 	bl	800116a <HAL_DMA_Abort_IT>
      break;
 80038c6:	e01e      	b.n	8003906 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	68da      	ldr	r2, [r3, #12]
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80038d6:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038dc:	4618      	mov	r0, r3
 80038de:	f7fd fc44 	bl	800116a <HAL_DMA_Abort_IT>
      break;
 80038e2:	e010      	b.n	8003906 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	68da      	ldr	r2, [r3, #12]
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80038f2:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038f8:	4618      	mov	r0, r3
 80038fa:	f7fd fc36 	bl	800116a <HAL_DMA_Abort_IT>
      break;
 80038fe:	e002      	b.n	8003906 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    default:
      status = HAL_ERROR;
 8003900:	2301      	movs	r3, #1
 8003902:	73fb      	strb	r3, [r7, #15]
      break;
 8003904:	bf00      	nop
  }

  if (status == HAL_OK)
 8003906:	7bfb      	ldrb	r3, [r7, #15]
 8003908:	2b00      	cmp	r3, #0
 800390a:	d176      	bne.n	80039fa <HAL_TIM_PWM_Stop_DMA+0x1ba>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	2200      	movs	r2, #0
 8003912:	6839      	ldr	r1, [r7, #0]
 8003914:	4618      	mov	r0, r3
 8003916:	f000 febb 	bl	8004690 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	4a39      	ldr	r2, [pc, #228]	; (8003a04 <HAL_TIM_PWM_Stop_DMA+0x1c4>)
 8003920:	4293      	cmp	r3, r2
 8003922:	d009      	beq.n	8003938 <HAL_TIM_PWM_Stop_DMA+0xf8>
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	4a37      	ldr	r2, [pc, #220]	; (8003a08 <HAL_TIM_PWM_Stop_DMA+0x1c8>)
 800392a:	4293      	cmp	r3, r2
 800392c:	d004      	beq.n	8003938 <HAL_TIM_PWM_Stop_DMA+0xf8>
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	4a36      	ldr	r2, [pc, #216]	; (8003a0c <HAL_TIM_PWM_Stop_DMA+0x1cc>)
 8003934:	4293      	cmp	r3, r2
 8003936:	d101      	bne.n	800393c <HAL_TIM_PWM_Stop_DMA+0xfc>
 8003938:	2301      	movs	r3, #1
 800393a:	e000      	b.n	800393e <HAL_TIM_PWM_Stop_DMA+0xfe>
 800393c:	2300      	movs	r3, #0
 800393e:	2b00      	cmp	r3, #0
 8003940:	d017      	beq.n	8003972 <HAL_TIM_PWM_Stop_DMA+0x132>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	6a1a      	ldr	r2, [r3, #32]
 8003948:	f241 1311 	movw	r3, #4369	; 0x1111
 800394c:	4013      	ands	r3, r2
 800394e:	2b00      	cmp	r3, #0
 8003950:	d10f      	bne.n	8003972 <HAL_TIM_PWM_Stop_DMA+0x132>
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	6a1a      	ldr	r2, [r3, #32]
 8003958:	f240 4344 	movw	r3, #1092	; 0x444
 800395c:	4013      	ands	r3, r2
 800395e:	2b00      	cmp	r3, #0
 8003960:	d107      	bne.n	8003972 <HAL_TIM_PWM_Stop_DMA+0x132>
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003970:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	6a1a      	ldr	r2, [r3, #32]
 8003978:	f241 1311 	movw	r3, #4369	; 0x1111
 800397c:	4013      	ands	r3, r2
 800397e:	2b00      	cmp	r3, #0
 8003980:	d10f      	bne.n	80039a2 <HAL_TIM_PWM_Stop_DMA+0x162>
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	6a1a      	ldr	r2, [r3, #32]
 8003988:	f240 4344 	movw	r3, #1092	; 0x444
 800398c:	4013      	ands	r3, r2
 800398e:	2b00      	cmp	r3, #0
 8003990:	d107      	bne.n	80039a2 <HAL_TIM_PWM_Stop_DMA+0x162>
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	681a      	ldr	r2, [r3, #0]
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	f022 0201 	bic.w	r2, r2, #1
 80039a0:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80039a2:	683b      	ldr	r3, [r7, #0]
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d104      	bne.n	80039b2 <HAL_TIM_PWM_Stop_DMA+0x172>
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	2201      	movs	r2, #1
 80039ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80039b0:	e023      	b.n	80039fa <HAL_TIM_PWM_Stop_DMA+0x1ba>
 80039b2:	683b      	ldr	r3, [r7, #0]
 80039b4:	2b04      	cmp	r3, #4
 80039b6:	d104      	bne.n	80039c2 <HAL_TIM_PWM_Stop_DMA+0x182>
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	2201      	movs	r2, #1
 80039bc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80039c0:	e01b      	b.n	80039fa <HAL_TIM_PWM_Stop_DMA+0x1ba>
 80039c2:	683b      	ldr	r3, [r7, #0]
 80039c4:	2b08      	cmp	r3, #8
 80039c6:	d104      	bne.n	80039d2 <HAL_TIM_PWM_Stop_DMA+0x192>
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	2201      	movs	r2, #1
 80039cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80039d0:	e013      	b.n	80039fa <HAL_TIM_PWM_Stop_DMA+0x1ba>
 80039d2:	683b      	ldr	r3, [r7, #0]
 80039d4:	2b0c      	cmp	r3, #12
 80039d6:	d104      	bne.n	80039e2 <HAL_TIM_PWM_Stop_DMA+0x1a2>
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	2201      	movs	r2, #1
 80039dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80039e0:	e00b      	b.n	80039fa <HAL_TIM_PWM_Stop_DMA+0x1ba>
 80039e2:	683b      	ldr	r3, [r7, #0]
 80039e4:	2b10      	cmp	r3, #16
 80039e6:	d104      	bne.n	80039f2 <HAL_TIM_PWM_Stop_DMA+0x1b2>
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	2201      	movs	r2, #1
 80039ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80039f0:	e003      	b.n	80039fa <HAL_TIM_PWM_Stop_DMA+0x1ba>
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	2201      	movs	r2, #1
 80039f6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  }

  /* Return function status */
  return status;
 80039fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80039fc:	4618      	mov	r0, r3
 80039fe:	3710      	adds	r7, #16
 8003a00:	46bd      	mov	sp, r7
 8003a02:	bd80      	pop	{r7, pc}
 8003a04:	40012c00 	.word	0x40012c00
 8003a08:	40014400 	.word	0x40014400
 8003a0c:	40014800 	.word	0x40014800

08003a10 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003a10:	b580      	push	{r7, lr}
 8003a12:	b086      	sub	sp, #24
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	60f8      	str	r0, [r7, #12]
 8003a18:	60b9      	str	r1, [r7, #8]
 8003a1a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003a1c:	2300      	movs	r3, #0
 8003a1e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a26:	2b01      	cmp	r3, #1
 8003a28:	d101      	bne.n	8003a2e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003a2a:	2302      	movs	r3, #2
 8003a2c:	e0ff      	b.n	8003c2e <HAL_TIM_PWM_ConfigChannel+0x21e>
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	2201      	movs	r2, #1
 8003a32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	2b14      	cmp	r3, #20
 8003a3a:	f200 80f0 	bhi.w	8003c1e <HAL_TIM_PWM_ConfigChannel+0x20e>
 8003a3e:	a201      	add	r2, pc, #4	; (adr r2, 8003a44 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003a40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a44:	08003a99 	.word	0x08003a99
 8003a48:	08003c1f 	.word	0x08003c1f
 8003a4c:	08003c1f 	.word	0x08003c1f
 8003a50:	08003c1f 	.word	0x08003c1f
 8003a54:	08003ad9 	.word	0x08003ad9
 8003a58:	08003c1f 	.word	0x08003c1f
 8003a5c:	08003c1f 	.word	0x08003c1f
 8003a60:	08003c1f 	.word	0x08003c1f
 8003a64:	08003b1b 	.word	0x08003b1b
 8003a68:	08003c1f 	.word	0x08003c1f
 8003a6c:	08003c1f 	.word	0x08003c1f
 8003a70:	08003c1f 	.word	0x08003c1f
 8003a74:	08003b5b 	.word	0x08003b5b
 8003a78:	08003c1f 	.word	0x08003c1f
 8003a7c:	08003c1f 	.word	0x08003c1f
 8003a80:	08003c1f 	.word	0x08003c1f
 8003a84:	08003b9d 	.word	0x08003b9d
 8003a88:	08003c1f 	.word	0x08003c1f
 8003a8c:	08003c1f 	.word	0x08003c1f
 8003a90:	08003c1f 	.word	0x08003c1f
 8003a94:	08003bdd 	.word	0x08003bdd
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	68b9      	ldr	r1, [r7, #8]
 8003a9e:	4618      	mov	r0, r3
 8003aa0:	f000 fadc 	bl	800405c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	699a      	ldr	r2, [r3, #24]
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f042 0208 	orr.w	r2, r2, #8
 8003ab2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	699a      	ldr	r2, [r3, #24]
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f022 0204 	bic.w	r2, r2, #4
 8003ac2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	6999      	ldr	r1, [r3, #24]
 8003aca:	68bb      	ldr	r3, [r7, #8]
 8003acc:	691a      	ldr	r2, [r3, #16]
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	430a      	orrs	r2, r1
 8003ad4:	619a      	str	r2, [r3, #24]
      break;
 8003ad6:	e0a5      	b.n	8003c24 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	68b9      	ldr	r1, [r7, #8]
 8003ade:	4618      	mov	r0, r3
 8003ae0:	f000 fb38 	bl	8004154 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	699a      	ldr	r2, [r3, #24]
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003af2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	699a      	ldr	r2, [r3, #24]
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b02:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	6999      	ldr	r1, [r3, #24]
 8003b0a:	68bb      	ldr	r3, [r7, #8]
 8003b0c:	691b      	ldr	r3, [r3, #16]
 8003b0e:	021a      	lsls	r2, r3, #8
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	430a      	orrs	r2, r1
 8003b16:	619a      	str	r2, [r3, #24]
      break;
 8003b18:	e084      	b.n	8003c24 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	68b9      	ldr	r1, [r7, #8]
 8003b20:	4618      	mov	r0, r3
 8003b22:	f000 fb91 	bl	8004248 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	69da      	ldr	r2, [r3, #28]
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f042 0208 	orr.w	r2, r2, #8
 8003b34:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	69da      	ldr	r2, [r3, #28]
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	f022 0204 	bic.w	r2, r2, #4
 8003b44:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	69d9      	ldr	r1, [r3, #28]
 8003b4c:	68bb      	ldr	r3, [r7, #8]
 8003b4e:	691a      	ldr	r2, [r3, #16]
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	430a      	orrs	r2, r1
 8003b56:	61da      	str	r2, [r3, #28]
      break;
 8003b58:	e064      	b.n	8003c24 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	68b9      	ldr	r1, [r7, #8]
 8003b60:	4618      	mov	r0, r3
 8003b62:	f000 fbe9 	bl	8004338 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	69da      	ldr	r2, [r3, #28]
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003b74:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	69da      	ldr	r2, [r3, #28]
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b84:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	69d9      	ldr	r1, [r3, #28]
 8003b8c:	68bb      	ldr	r3, [r7, #8]
 8003b8e:	691b      	ldr	r3, [r3, #16]
 8003b90:	021a      	lsls	r2, r3, #8
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	430a      	orrs	r2, r1
 8003b98:	61da      	str	r2, [r3, #28]
      break;
 8003b9a:	e043      	b.n	8003c24 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	68b9      	ldr	r1, [r7, #8]
 8003ba2:	4618      	mov	r0, r3
 8003ba4:	f000 fc26 	bl	80043f4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	f042 0208 	orr.w	r2, r2, #8
 8003bb6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	f022 0204 	bic.w	r2, r2, #4
 8003bc6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003bce:	68bb      	ldr	r3, [r7, #8]
 8003bd0:	691a      	ldr	r2, [r3, #16]
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	430a      	orrs	r2, r1
 8003bd8:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003bda:	e023      	b.n	8003c24 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	68b9      	ldr	r1, [r7, #8]
 8003be2:	4618      	mov	r0, r3
 8003be4:	f000 fc5e 	bl	80044a4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003bf6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003c06:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003c0e:	68bb      	ldr	r3, [r7, #8]
 8003c10:	691b      	ldr	r3, [r3, #16]
 8003c12:	021a      	lsls	r2, r3, #8
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	430a      	orrs	r2, r1
 8003c1a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003c1c:	e002      	b.n	8003c24 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8003c1e:	2301      	movs	r3, #1
 8003c20:	75fb      	strb	r3, [r7, #23]
      break;
 8003c22:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	2200      	movs	r2, #0
 8003c28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003c2c:	7dfb      	ldrb	r3, [r7, #23]
}
 8003c2e:	4618      	mov	r0, r3
 8003c30:	3718      	adds	r7, #24
 8003c32:	46bd      	mov	sp, r7
 8003c34:	bd80      	pop	{r7, pc}
 8003c36:	bf00      	nop

08003c38 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003c38:	b580      	push	{r7, lr}
 8003c3a:	b084      	sub	sp, #16
 8003c3c:	af00      	add	r7, sp, #0
 8003c3e:	6078      	str	r0, [r7, #4]
 8003c40:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003c42:	2300      	movs	r3, #0
 8003c44:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c4c:	2b01      	cmp	r3, #1
 8003c4e:	d101      	bne.n	8003c54 <HAL_TIM_ConfigClockSource+0x1c>
 8003c50:	2302      	movs	r3, #2
 8003c52:	e0b6      	b.n	8003dc2 <HAL_TIM_ConfigClockSource+0x18a>
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	2201      	movs	r2, #1
 8003c58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	2202      	movs	r2, #2
 8003c60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	689b      	ldr	r3, [r3, #8]
 8003c6a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003c6c:	68bb      	ldr	r3, [r7, #8]
 8003c6e:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8003c72:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003c76:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003c78:	68bb      	ldr	r3, [r7, #8]
 8003c7a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003c7e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	68ba      	ldr	r2, [r7, #8]
 8003c86:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003c88:	683b      	ldr	r3, [r7, #0]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003c90:	d03e      	beq.n	8003d10 <HAL_TIM_ConfigClockSource+0xd8>
 8003c92:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003c96:	f200 8087 	bhi.w	8003da8 <HAL_TIM_ConfigClockSource+0x170>
 8003c9a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c9e:	f000 8086 	beq.w	8003dae <HAL_TIM_ConfigClockSource+0x176>
 8003ca2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ca6:	d87f      	bhi.n	8003da8 <HAL_TIM_ConfigClockSource+0x170>
 8003ca8:	2b70      	cmp	r3, #112	; 0x70
 8003caa:	d01a      	beq.n	8003ce2 <HAL_TIM_ConfigClockSource+0xaa>
 8003cac:	2b70      	cmp	r3, #112	; 0x70
 8003cae:	d87b      	bhi.n	8003da8 <HAL_TIM_ConfigClockSource+0x170>
 8003cb0:	2b60      	cmp	r3, #96	; 0x60
 8003cb2:	d050      	beq.n	8003d56 <HAL_TIM_ConfigClockSource+0x11e>
 8003cb4:	2b60      	cmp	r3, #96	; 0x60
 8003cb6:	d877      	bhi.n	8003da8 <HAL_TIM_ConfigClockSource+0x170>
 8003cb8:	2b50      	cmp	r3, #80	; 0x50
 8003cba:	d03c      	beq.n	8003d36 <HAL_TIM_ConfigClockSource+0xfe>
 8003cbc:	2b50      	cmp	r3, #80	; 0x50
 8003cbe:	d873      	bhi.n	8003da8 <HAL_TIM_ConfigClockSource+0x170>
 8003cc0:	2b40      	cmp	r3, #64	; 0x40
 8003cc2:	d058      	beq.n	8003d76 <HAL_TIM_ConfigClockSource+0x13e>
 8003cc4:	2b40      	cmp	r3, #64	; 0x40
 8003cc6:	d86f      	bhi.n	8003da8 <HAL_TIM_ConfigClockSource+0x170>
 8003cc8:	2b30      	cmp	r3, #48	; 0x30
 8003cca:	d064      	beq.n	8003d96 <HAL_TIM_ConfigClockSource+0x15e>
 8003ccc:	2b30      	cmp	r3, #48	; 0x30
 8003cce:	d86b      	bhi.n	8003da8 <HAL_TIM_ConfigClockSource+0x170>
 8003cd0:	2b20      	cmp	r3, #32
 8003cd2:	d060      	beq.n	8003d96 <HAL_TIM_ConfigClockSource+0x15e>
 8003cd4:	2b20      	cmp	r3, #32
 8003cd6:	d867      	bhi.n	8003da8 <HAL_TIM_ConfigClockSource+0x170>
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d05c      	beq.n	8003d96 <HAL_TIM_ConfigClockSource+0x15e>
 8003cdc:	2b10      	cmp	r3, #16
 8003cde:	d05a      	beq.n	8003d96 <HAL_TIM_ConfigClockSource+0x15e>
 8003ce0:	e062      	b.n	8003da8 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	6818      	ldr	r0, [r3, #0]
 8003ce6:	683b      	ldr	r3, [r7, #0]
 8003ce8:	6899      	ldr	r1, [r3, #8]
 8003cea:	683b      	ldr	r3, [r7, #0]
 8003cec:	685a      	ldr	r2, [r3, #4]
 8003cee:	683b      	ldr	r3, [r7, #0]
 8003cf0:	68db      	ldr	r3, [r3, #12]
 8003cf2:	f000 fcad 	bl	8004650 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	689b      	ldr	r3, [r3, #8]
 8003cfc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003cfe:	68bb      	ldr	r3, [r7, #8]
 8003d00:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003d04:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	68ba      	ldr	r2, [r7, #8]
 8003d0c:	609a      	str	r2, [r3, #8]
      break;
 8003d0e:	e04f      	b.n	8003db0 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	6818      	ldr	r0, [r3, #0]
 8003d14:	683b      	ldr	r3, [r7, #0]
 8003d16:	6899      	ldr	r1, [r3, #8]
 8003d18:	683b      	ldr	r3, [r7, #0]
 8003d1a:	685a      	ldr	r2, [r3, #4]
 8003d1c:	683b      	ldr	r3, [r7, #0]
 8003d1e:	68db      	ldr	r3, [r3, #12]
 8003d20:	f000 fc96 	bl	8004650 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	689a      	ldr	r2, [r3, #8]
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003d32:	609a      	str	r2, [r3, #8]
      break;
 8003d34:	e03c      	b.n	8003db0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	6818      	ldr	r0, [r3, #0]
 8003d3a:	683b      	ldr	r3, [r7, #0]
 8003d3c:	6859      	ldr	r1, [r3, #4]
 8003d3e:	683b      	ldr	r3, [r7, #0]
 8003d40:	68db      	ldr	r3, [r3, #12]
 8003d42:	461a      	mov	r2, r3
 8003d44:	f000 fc08 	bl	8004558 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	2150      	movs	r1, #80	; 0x50
 8003d4e:	4618      	mov	r0, r3
 8003d50:	f000 fc61 	bl	8004616 <TIM_ITRx_SetConfig>
      break;
 8003d54:	e02c      	b.n	8003db0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	6818      	ldr	r0, [r3, #0]
 8003d5a:	683b      	ldr	r3, [r7, #0]
 8003d5c:	6859      	ldr	r1, [r3, #4]
 8003d5e:	683b      	ldr	r3, [r7, #0]
 8003d60:	68db      	ldr	r3, [r3, #12]
 8003d62:	461a      	mov	r2, r3
 8003d64:	f000 fc27 	bl	80045b6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	2160      	movs	r1, #96	; 0x60
 8003d6e:	4618      	mov	r0, r3
 8003d70:	f000 fc51 	bl	8004616 <TIM_ITRx_SetConfig>
      break;
 8003d74:	e01c      	b.n	8003db0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	6818      	ldr	r0, [r3, #0]
 8003d7a:	683b      	ldr	r3, [r7, #0]
 8003d7c:	6859      	ldr	r1, [r3, #4]
 8003d7e:	683b      	ldr	r3, [r7, #0]
 8003d80:	68db      	ldr	r3, [r3, #12]
 8003d82:	461a      	mov	r2, r3
 8003d84:	f000 fbe8 	bl	8004558 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	2140      	movs	r1, #64	; 0x40
 8003d8e:	4618      	mov	r0, r3
 8003d90:	f000 fc41 	bl	8004616 <TIM_ITRx_SetConfig>
      break;
 8003d94:	e00c      	b.n	8003db0 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681a      	ldr	r2, [r3, #0]
 8003d9a:	683b      	ldr	r3, [r7, #0]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	4619      	mov	r1, r3
 8003da0:	4610      	mov	r0, r2
 8003da2:	f000 fc38 	bl	8004616 <TIM_ITRx_SetConfig>
      break;
 8003da6:	e003      	b.n	8003db0 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8003da8:	2301      	movs	r3, #1
 8003daa:	73fb      	strb	r3, [r7, #15]
      break;
 8003dac:	e000      	b.n	8003db0 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8003dae:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	2201      	movs	r2, #1
 8003db4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	2200      	movs	r2, #0
 8003dbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003dc0:	7bfb      	ldrb	r3, [r7, #15]
}
 8003dc2:	4618      	mov	r0, r3
 8003dc4:	3710      	adds	r7, #16
 8003dc6:	46bd      	mov	sp, r7
 8003dc8:	bd80      	pop	{r7, pc}

08003dca <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8003dca:	b480      	push	{r7}
 8003dcc:	b083      	sub	sp, #12
 8003dce:	af00      	add	r7, sp, #0
 8003dd0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8003dd2:	bf00      	nop
 8003dd4:	370c      	adds	r7, #12
 8003dd6:	46bd      	mov	sp, r7
 8003dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ddc:	4770      	bx	lr

08003dde <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8003dde:	b480      	push	{r7}
 8003de0:	b083      	sub	sp, #12
 8003de2:	af00      	add	r7, sp, #0
 8003de4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8003de6:	bf00      	nop
 8003de8:	370c      	adds	r7, #12
 8003dea:	46bd      	mov	sp, r7
 8003dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df0:	4770      	bx	lr

08003df2 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8003df2:	b580      	push	{r7, lr}
 8003df4:	b084      	sub	sp, #16
 8003df6:	af00      	add	r7, sp, #0
 8003df8:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dfe:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e04:	687a      	ldr	r2, [r7, #4]
 8003e06:	429a      	cmp	r2, r3
 8003e08:	d107      	bne.n	8003e1a <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	2201      	movs	r2, #1
 8003e0e:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	2201      	movs	r2, #1
 8003e14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003e18:	e02a      	b.n	8003e70 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e1e:	687a      	ldr	r2, [r7, #4]
 8003e20:	429a      	cmp	r2, r3
 8003e22:	d107      	bne.n	8003e34 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	2202      	movs	r2, #2
 8003e28:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	2201      	movs	r2, #1
 8003e2e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003e32:	e01d      	b.n	8003e70 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e38:	687a      	ldr	r2, [r7, #4]
 8003e3a:	429a      	cmp	r2, r3
 8003e3c:	d107      	bne.n	8003e4e <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	2204      	movs	r2, #4
 8003e42:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	2201      	movs	r2, #1
 8003e48:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003e4c:	e010      	b.n	8003e70 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e52:	687a      	ldr	r2, [r7, #4]
 8003e54:	429a      	cmp	r2, r3
 8003e56:	d107      	bne.n	8003e68 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	2208      	movs	r2, #8
 8003e5c:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	2201      	movs	r2, #1
 8003e62:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003e66:	e003      	b.n	8003e70 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	2201      	movs	r2, #1
 8003e6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8003e70:	68f8      	ldr	r0, [r7, #12]
 8003e72:	f7ff ffb4 	bl	8003dde <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	2200      	movs	r2, #0
 8003e7a:	771a      	strb	r2, [r3, #28]
}
 8003e7c:	bf00      	nop
 8003e7e:	3710      	adds	r7, #16
 8003e80:	46bd      	mov	sp, r7
 8003e82:	bd80      	pop	{r7, pc}

08003e84 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8003e84:	b580      	push	{r7, lr}
 8003e86:	b084      	sub	sp, #16
 8003e88:	af00      	add	r7, sp, #0
 8003e8a:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e90:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e96:	687a      	ldr	r2, [r7, #4]
 8003e98:	429a      	cmp	r2, r3
 8003e9a:	d10b      	bne.n	8003eb4 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	2201      	movs	r2, #1
 8003ea0:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	69db      	ldr	r3, [r3, #28]
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d136      	bne.n	8003f18 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	2201      	movs	r2, #1
 8003eae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003eb2:	e031      	b.n	8003f18 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003eb8:	687a      	ldr	r2, [r7, #4]
 8003eba:	429a      	cmp	r2, r3
 8003ebc:	d10b      	bne.n	8003ed6 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	2202      	movs	r2, #2
 8003ec2:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	69db      	ldr	r3, [r3, #28]
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d125      	bne.n	8003f18 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	2201      	movs	r2, #1
 8003ed0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003ed4:	e020      	b.n	8003f18 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003eda:	687a      	ldr	r2, [r7, #4]
 8003edc:	429a      	cmp	r2, r3
 8003ede:	d10b      	bne.n	8003ef8 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	2204      	movs	r2, #4
 8003ee4:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	69db      	ldr	r3, [r3, #28]
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d114      	bne.n	8003f18 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	2201      	movs	r2, #1
 8003ef2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003ef6:	e00f      	b.n	8003f18 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003efc:	687a      	ldr	r2, [r7, #4]
 8003efe:	429a      	cmp	r2, r3
 8003f00:	d10a      	bne.n	8003f18 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	2208      	movs	r2, #8
 8003f06:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	69db      	ldr	r3, [r3, #28]
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d103      	bne.n	8003f18 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	2201      	movs	r2, #1
 8003f14:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f18:	68f8      	ldr	r0, [r7, #12]
 8003f1a:	f7fc fc5f 	bl	80007dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	2200      	movs	r2, #0
 8003f22:	771a      	strb	r2, [r3, #28]
}
 8003f24:	bf00      	nop
 8003f26:	3710      	adds	r7, #16
 8003f28:	46bd      	mov	sp, r7
 8003f2a:	bd80      	pop	{r7, pc}

08003f2c <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003f2c:	b580      	push	{r7, lr}
 8003f2e:	b084      	sub	sp, #16
 8003f30:	af00      	add	r7, sp, #0
 8003f32:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f38:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f3e:	687a      	ldr	r2, [r7, #4]
 8003f40:	429a      	cmp	r2, r3
 8003f42:	d103      	bne.n	8003f4c <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	2201      	movs	r2, #1
 8003f48:	771a      	strb	r2, [r3, #28]
 8003f4a:	e019      	b.n	8003f80 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f50:	687a      	ldr	r2, [r7, #4]
 8003f52:	429a      	cmp	r2, r3
 8003f54:	d103      	bne.n	8003f5e <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	2202      	movs	r2, #2
 8003f5a:	771a      	strb	r2, [r3, #28]
 8003f5c:	e010      	b.n	8003f80 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f62:	687a      	ldr	r2, [r7, #4]
 8003f64:	429a      	cmp	r2, r3
 8003f66:	d103      	bne.n	8003f70 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	2204      	movs	r2, #4
 8003f6c:	771a      	strb	r2, [r3, #28]
 8003f6e:	e007      	b.n	8003f80 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f74:	687a      	ldr	r2, [r7, #4]
 8003f76:	429a      	cmp	r2, r3
 8003f78:	d102      	bne.n	8003f80 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	2208      	movs	r2, #8
 8003f7e:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8003f80:	68f8      	ldr	r0, [r7, #12]
 8003f82:	f7ff ff22 	bl	8003dca <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	2200      	movs	r2, #0
 8003f8a:	771a      	strb	r2, [r3, #28]
}
 8003f8c:	bf00      	nop
 8003f8e:	3710      	adds	r7, #16
 8003f90:	46bd      	mov	sp, r7
 8003f92:	bd80      	pop	{r7, pc}

08003f94 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003f94:	b480      	push	{r7}
 8003f96:	b085      	sub	sp, #20
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	6078      	str	r0, [r7, #4]
 8003f9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	4a2a      	ldr	r2, [pc, #168]	; (8004050 <TIM_Base_SetConfig+0xbc>)
 8003fa8:	4293      	cmp	r3, r2
 8003faa:	d003      	beq.n	8003fb4 <TIM_Base_SetConfig+0x20>
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003fb2:	d108      	bne.n	8003fc6 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003fba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003fbc:	683b      	ldr	r3, [r7, #0]
 8003fbe:	685b      	ldr	r3, [r3, #4]
 8003fc0:	68fa      	ldr	r2, [r7, #12]
 8003fc2:	4313      	orrs	r3, r2
 8003fc4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	4a21      	ldr	r2, [pc, #132]	; (8004050 <TIM_Base_SetConfig+0xbc>)
 8003fca:	4293      	cmp	r3, r2
 8003fcc:	d00b      	beq.n	8003fe6 <TIM_Base_SetConfig+0x52>
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003fd4:	d007      	beq.n	8003fe6 <TIM_Base_SetConfig+0x52>
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	4a1e      	ldr	r2, [pc, #120]	; (8004054 <TIM_Base_SetConfig+0xc0>)
 8003fda:	4293      	cmp	r3, r2
 8003fdc:	d003      	beq.n	8003fe6 <TIM_Base_SetConfig+0x52>
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	4a1d      	ldr	r2, [pc, #116]	; (8004058 <TIM_Base_SetConfig+0xc4>)
 8003fe2:	4293      	cmp	r3, r2
 8003fe4:	d108      	bne.n	8003ff8 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003fec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003fee:	683b      	ldr	r3, [r7, #0]
 8003ff0:	68db      	ldr	r3, [r3, #12]
 8003ff2:	68fa      	ldr	r2, [r7, #12]
 8003ff4:	4313      	orrs	r3, r2
 8003ff6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003ffe:	683b      	ldr	r3, [r7, #0]
 8004000:	695b      	ldr	r3, [r3, #20]
 8004002:	4313      	orrs	r3, r2
 8004004:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	68fa      	ldr	r2, [r7, #12]
 800400a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800400c:	683b      	ldr	r3, [r7, #0]
 800400e:	689a      	ldr	r2, [r3, #8]
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004014:	683b      	ldr	r3, [r7, #0]
 8004016:	681a      	ldr	r2, [r3, #0]
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	4a0c      	ldr	r2, [pc, #48]	; (8004050 <TIM_Base_SetConfig+0xbc>)
 8004020:	4293      	cmp	r3, r2
 8004022:	d007      	beq.n	8004034 <TIM_Base_SetConfig+0xa0>
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	4a0b      	ldr	r2, [pc, #44]	; (8004054 <TIM_Base_SetConfig+0xc0>)
 8004028:	4293      	cmp	r3, r2
 800402a:	d003      	beq.n	8004034 <TIM_Base_SetConfig+0xa0>
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	4a0a      	ldr	r2, [pc, #40]	; (8004058 <TIM_Base_SetConfig+0xc4>)
 8004030:	4293      	cmp	r3, r2
 8004032:	d103      	bne.n	800403c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004034:	683b      	ldr	r3, [r7, #0]
 8004036:	691a      	ldr	r2, [r3, #16]
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	2201      	movs	r2, #1
 8004040:	615a      	str	r2, [r3, #20]
}
 8004042:	bf00      	nop
 8004044:	3714      	adds	r7, #20
 8004046:	46bd      	mov	sp, r7
 8004048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800404c:	4770      	bx	lr
 800404e:	bf00      	nop
 8004050:	40012c00 	.word	0x40012c00
 8004054:	40014400 	.word	0x40014400
 8004058:	40014800 	.word	0x40014800

0800405c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800405c:	b480      	push	{r7}
 800405e:	b087      	sub	sp, #28
 8004060:	af00      	add	r7, sp, #0
 8004062:	6078      	str	r0, [r7, #4]
 8004064:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	6a1b      	ldr	r3, [r3, #32]
 800406a:	f023 0201 	bic.w	r2, r3, #1
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	6a1b      	ldr	r3, [r3, #32]
 8004076:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	685b      	ldr	r3, [r3, #4]
 800407c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	699b      	ldr	r3, [r3, #24]
 8004082:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800408a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800408e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	f023 0303 	bic.w	r3, r3, #3
 8004096:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004098:	683b      	ldr	r3, [r7, #0]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	68fa      	ldr	r2, [r7, #12]
 800409e:	4313      	orrs	r3, r2
 80040a0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80040a2:	697b      	ldr	r3, [r7, #20]
 80040a4:	f023 0302 	bic.w	r3, r3, #2
 80040a8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80040aa:	683b      	ldr	r3, [r7, #0]
 80040ac:	689b      	ldr	r3, [r3, #8]
 80040ae:	697a      	ldr	r2, [r7, #20]
 80040b0:	4313      	orrs	r3, r2
 80040b2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	4a24      	ldr	r2, [pc, #144]	; (8004148 <TIM_OC1_SetConfig+0xec>)
 80040b8:	4293      	cmp	r3, r2
 80040ba:	d007      	beq.n	80040cc <TIM_OC1_SetConfig+0x70>
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	4a23      	ldr	r2, [pc, #140]	; (800414c <TIM_OC1_SetConfig+0xf0>)
 80040c0:	4293      	cmp	r3, r2
 80040c2:	d003      	beq.n	80040cc <TIM_OC1_SetConfig+0x70>
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	4a22      	ldr	r2, [pc, #136]	; (8004150 <TIM_OC1_SetConfig+0xf4>)
 80040c8:	4293      	cmp	r3, r2
 80040ca:	d10c      	bne.n	80040e6 <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80040cc:	697b      	ldr	r3, [r7, #20]
 80040ce:	f023 0308 	bic.w	r3, r3, #8
 80040d2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80040d4:	683b      	ldr	r3, [r7, #0]
 80040d6:	68db      	ldr	r3, [r3, #12]
 80040d8:	697a      	ldr	r2, [r7, #20]
 80040da:	4313      	orrs	r3, r2
 80040dc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80040de:	697b      	ldr	r3, [r7, #20]
 80040e0:	f023 0304 	bic.w	r3, r3, #4
 80040e4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	4a17      	ldr	r2, [pc, #92]	; (8004148 <TIM_OC1_SetConfig+0xec>)
 80040ea:	4293      	cmp	r3, r2
 80040ec:	d007      	beq.n	80040fe <TIM_OC1_SetConfig+0xa2>
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	4a17      	ldr	r2, [pc, #92]	; (8004150 <TIM_OC1_SetConfig+0xf4>)
 80040f2:	4293      	cmp	r3, r2
 80040f4:	d003      	beq.n	80040fe <TIM_OC1_SetConfig+0xa2>
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	4a14      	ldr	r2, [pc, #80]	; (800414c <TIM_OC1_SetConfig+0xf0>)
 80040fa:	4293      	cmp	r3, r2
 80040fc:	d111      	bne.n	8004122 <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80040fe:	693b      	ldr	r3, [r7, #16]
 8004100:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004104:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004106:	693b      	ldr	r3, [r7, #16]
 8004108:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800410c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800410e:	683b      	ldr	r3, [r7, #0]
 8004110:	695b      	ldr	r3, [r3, #20]
 8004112:	693a      	ldr	r2, [r7, #16]
 8004114:	4313      	orrs	r3, r2
 8004116:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004118:	683b      	ldr	r3, [r7, #0]
 800411a:	699b      	ldr	r3, [r3, #24]
 800411c:	693a      	ldr	r2, [r7, #16]
 800411e:	4313      	orrs	r3, r2
 8004120:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	693a      	ldr	r2, [r7, #16]
 8004126:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	68fa      	ldr	r2, [r7, #12]
 800412c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800412e:	683b      	ldr	r3, [r7, #0]
 8004130:	685a      	ldr	r2, [r3, #4]
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	697a      	ldr	r2, [r7, #20]
 800413a:	621a      	str	r2, [r3, #32]
}
 800413c:	bf00      	nop
 800413e:	371c      	adds	r7, #28
 8004140:	46bd      	mov	sp, r7
 8004142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004146:	4770      	bx	lr
 8004148:	40012c00 	.word	0x40012c00
 800414c:	40014800 	.word	0x40014800
 8004150:	40014400 	.word	0x40014400

08004154 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004154:	b480      	push	{r7}
 8004156:	b087      	sub	sp, #28
 8004158:	af00      	add	r7, sp, #0
 800415a:	6078      	str	r0, [r7, #4]
 800415c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	6a1b      	ldr	r3, [r3, #32]
 8004162:	f023 0210 	bic.w	r2, r3, #16
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	6a1b      	ldr	r3, [r3, #32]
 800416e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	685b      	ldr	r3, [r3, #4]
 8004174:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	699b      	ldr	r3, [r3, #24]
 800417a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004182:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004186:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800418e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004190:	683b      	ldr	r3, [r7, #0]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	021b      	lsls	r3, r3, #8
 8004196:	68fa      	ldr	r2, [r7, #12]
 8004198:	4313      	orrs	r3, r2
 800419a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800419c:	697b      	ldr	r3, [r7, #20]
 800419e:	f023 0320 	bic.w	r3, r3, #32
 80041a2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80041a4:	683b      	ldr	r3, [r7, #0]
 80041a6:	689b      	ldr	r3, [r3, #8]
 80041a8:	011b      	lsls	r3, r3, #4
 80041aa:	697a      	ldr	r2, [r7, #20]
 80041ac:	4313      	orrs	r3, r2
 80041ae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	4a22      	ldr	r2, [pc, #136]	; (800423c <TIM_OC2_SetConfig+0xe8>)
 80041b4:	4293      	cmp	r3, r2
 80041b6:	d10d      	bne.n	80041d4 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80041b8:	697b      	ldr	r3, [r7, #20]
 80041ba:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80041be:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80041c0:	683b      	ldr	r3, [r7, #0]
 80041c2:	68db      	ldr	r3, [r3, #12]
 80041c4:	011b      	lsls	r3, r3, #4
 80041c6:	697a      	ldr	r2, [r7, #20]
 80041c8:	4313      	orrs	r3, r2
 80041ca:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80041cc:	697b      	ldr	r3, [r7, #20]
 80041ce:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80041d2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	4a19      	ldr	r2, [pc, #100]	; (800423c <TIM_OC2_SetConfig+0xe8>)
 80041d8:	4293      	cmp	r3, r2
 80041da:	d007      	beq.n	80041ec <TIM_OC2_SetConfig+0x98>
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	4a18      	ldr	r2, [pc, #96]	; (8004240 <TIM_OC2_SetConfig+0xec>)
 80041e0:	4293      	cmp	r3, r2
 80041e2:	d003      	beq.n	80041ec <TIM_OC2_SetConfig+0x98>
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	4a17      	ldr	r2, [pc, #92]	; (8004244 <TIM_OC2_SetConfig+0xf0>)
 80041e8:	4293      	cmp	r3, r2
 80041ea:	d113      	bne.n	8004214 <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80041ec:	693b      	ldr	r3, [r7, #16]
 80041ee:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80041f2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80041f4:	693b      	ldr	r3, [r7, #16]
 80041f6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80041fa:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80041fc:	683b      	ldr	r3, [r7, #0]
 80041fe:	695b      	ldr	r3, [r3, #20]
 8004200:	009b      	lsls	r3, r3, #2
 8004202:	693a      	ldr	r2, [r7, #16]
 8004204:	4313      	orrs	r3, r2
 8004206:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004208:	683b      	ldr	r3, [r7, #0]
 800420a:	699b      	ldr	r3, [r3, #24]
 800420c:	009b      	lsls	r3, r3, #2
 800420e:	693a      	ldr	r2, [r7, #16]
 8004210:	4313      	orrs	r3, r2
 8004212:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	693a      	ldr	r2, [r7, #16]
 8004218:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	68fa      	ldr	r2, [r7, #12]
 800421e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004220:	683b      	ldr	r3, [r7, #0]
 8004222:	685a      	ldr	r2, [r3, #4]
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	697a      	ldr	r2, [r7, #20]
 800422c:	621a      	str	r2, [r3, #32]
}
 800422e:	bf00      	nop
 8004230:	371c      	adds	r7, #28
 8004232:	46bd      	mov	sp, r7
 8004234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004238:	4770      	bx	lr
 800423a:	bf00      	nop
 800423c:	40012c00 	.word	0x40012c00
 8004240:	40014400 	.word	0x40014400
 8004244:	40014800 	.word	0x40014800

08004248 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004248:	b480      	push	{r7}
 800424a:	b087      	sub	sp, #28
 800424c:	af00      	add	r7, sp, #0
 800424e:	6078      	str	r0, [r7, #4]
 8004250:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	6a1b      	ldr	r3, [r3, #32]
 8004256:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	6a1b      	ldr	r3, [r3, #32]
 8004262:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	685b      	ldr	r3, [r3, #4]
 8004268:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	69db      	ldr	r3, [r3, #28]
 800426e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004276:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800427a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	f023 0303 	bic.w	r3, r3, #3
 8004282:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004284:	683b      	ldr	r3, [r7, #0]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	68fa      	ldr	r2, [r7, #12]
 800428a:	4313      	orrs	r3, r2
 800428c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800428e:	697b      	ldr	r3, [r7, #20]
 8004290:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004294:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004296:	683b      	ldr	r3, [r7, #0]
 8004298:	689b      	ldr	r3, [r3, #8]
 800429a:	021b      	lsls	r3, r3, #8
 800429c:	697a      	ldr	r2, [r7, #20]
 800429e:	4313      	orrs	r3, r2
 80042a0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	4a21      	ldr	r2, [pc, #132]	; (800432c <TIM_OC3_SetConfig+0xe4>)
 80042a6:	4293      	cmp	r3, r2
 80042a8:	d10d      	bne.n	80042c6 <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80042aa:	697b      	ldr	r3, [r7, #20]
 80042ac:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80042b0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80042b2:	683b      	ldr	r3, [r7, #0]
 80042b4:	68db      	ldr	r3, [r3, #12]
 80042b6:	021b      	lsls	r3, r3, #8
 80042b8:	697a      	ldr	r2, [r7, #20]
 80042ba:	4313      	orrs	r3, r2
 80042bc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80042be:	697b      	ldr	r3, [r7, #20]
 80042c0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80042c4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	4a18      	ldr	r2, [pc, #96]	; (800432c <TIM_OC3_SetConfig+0xe4>)
 80042ca:	4293      	cmp	r3, r2
 80042cc:	d007      	beq.n	80042de <TIM_OC3_SetConfig+0x96>
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	4a17      	ldr	r2, [pc, #92]	; (8004330 <TIM_OC3_SetConfig+0xe8>)
 80042d2:	4293      	cmp	r3, r2
 80042d4:	d003      	beq.n	80042de <TIM_OC3_SetConfig+0x96>
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	4a16      	ldr	r2, [pc, #88]	; (8004334 <TIM_OC3_SetConfig+0xec>)
 80042da:	4293      	cmp	r3, r2
 80042dc:	d113      	bne.n	8004306 <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80042de:	693b      	ldr	r3, [r7, #16]
 80042e0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80042e4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80042e6:	693b      	ldr	r3, [r7, #16]
 80042e8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80042ec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80042ee:	683b      	ldr	r3, [r7, #0]
 80042f0:	695b      	ldr	r3, [r3, #20]
 80042f2:	011b      	lsls	r3, r3, #4
 80042f4:	693a      	ldr	r2, [r7, #16]
 80042f6:	4313      	orrs	r3, r2
 80042f8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80042fa:	683b      	ldr	r3, [r7, #0]
 80042fc:	699b      	ldr	r3, [r3, #24]
 80042fe:	011b      	lsls	r3, r3, #4
 8004300:	693a      	ldr	r2, [r7, #16]
 8004302:	4313      	orrs	r3, r2
 8004304:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	693a      	ldr	r2, [r7, #16]
 800430a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	68fa      	ldr	r2, [r7, #12]
 8004310:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004312:	683b      	ldr	r3, [r7, #0]
 8004314:	685a      	ldr	r2, [r3, #4]
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	697a      	ldr	r2, [r7, #20]
 800431e:	621a      	str	r2, [r3, #32]
}
 8004320:	bf00      	nop
 8004322:	371c      	adds	r7, #28
 8004324:	46bd      	mov	sp, r7
 8004326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800432a:	4770      	bx	lr
 800432c:	40012c00 	.word	0x40012c00
 8004330:	40014400 	.word	0x40014400
 8004334:	40014800 	.word	0x40014800

08004338 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004338:	b480      	push	{r7}
 800433a:	b087      	sub	sp, #28
 800433c:	af00      	add	r7, sp, #0
 800433e:	6078      	str	r0, [r7, #4]
 8004340:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	6a1b      	ldr	r3, [r3, #32]
 8004346:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	6a1b      	ldr	r3, [r3, #32]
 8004352:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	685b      	ldr	r3, [r3, #4]
 8004358:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	69db      	ldr	r3, [r3, #28]
 800435e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004366:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800436a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004372:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004374:	683b      	ldr	r3, [r7, #0]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	021b      	lsls	r3, r3, #8
 800437a:	68fa      	ldr	r2, [r7, #12]
 800437c:	4313      	orrs	r3, r2
 800437e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004380:	693b      	ldr	r3, [r7, #16]
 8004382:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004386:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004388:	683b      	ldr	r3, [r7, #0]
 800438a:	689b      	ldr	r3, [r3, #8]
 800438c:	031b      	lsls	r3, r3, #12
 800438e:	693a      	ldr	r2, [r7, #16]
 8004390:	4313      	orrs	r3, r2
 8004392:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	4a14      	ldr	r2, [pc, #80]	; (80043e8 <TIM_OC4_SetConfig+0xb0>)
 8004398:	4293      	cmp	r3, r2
 800439a:	d007      	beq.n	80043ac <TIM_OC4_SetConfig+0x74>
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	4a13      	ldr	r2, [pc, #76]	; (80043ec <TIM_OC4_SetConfig+0xb4>)
 80043a0:	4293      	cmp	r3, r2
 80043a2:	d003      	beq.n	80043ac <TIM_OC4_SetConfig+0x74>
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	4a12      	ldr	r2, [pc, #72]	; (80043f0 <TIM_OC4_SetConfig+0xb8>)
 80043a8:	4293      	cmp	r3, r2
 80043aa:	d109      	bne.n	80043c0 <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80043ac:	697b      	ldr	r3, [r7, #20]
 80043ae:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80043b2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80043b4:	683b      	ldr	r3, [r7, #0]
 80043b6:	695b      	ldr	r3, [r3, #20]
 80043b8:	019b      	lsls	r3, r3, #6
 80043ba:	697a      	ldr	r2, [r7, #20]
 80043bc:	4313      	orrs	r3, r2
 80043be:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	697a      	ldr	r2, [r7, #20]
 80043c4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	68fa      	ldr	r2, [r7, #12]
 80043ca:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80043cc:	683b      	ldr	r3, [r7, #0]
 80043ce:	685a      	ldr	r2, [r3, #4]
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	693a      	ldr	r2, [r7, #16]
 80043d8:	621a      	str	r2, [r3, #32]
}
 80043da:	bf00      	nop
 80043dc:	371c      	adds	r7, #28
 80043de:	46bd      	mov	sp, r7
 80043e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e4:	4770      	bx	lr
 80043e6:	bf00      	nop
 80043e8:	40012c00 	.word	0x40012c00
 80043ec:	40014400 	.word	0x40014400
 80043f0:	40014800 	.word	0x40014800

080043f4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80043f4:	b480      	push	{r7}
 80043f6:	b087      	sub	sp, #28
 80043f8:	af00      	add	r7, sp, #0
 80043fa:	6078      	str	r0, [r7, #4]
 80043fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	6a1b      	ldr	r3, [r3, #32]
 8004402:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	6a1b      	ldr	r3, [r3, #32]
 800440e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	685b      	ldr	r3, [r3, #4]
 8004414:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800441a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004422:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004426:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004428:	683b      	ldr	r3, [r7, #0]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	68fa      	ldr	r2, [r7, #12]
 800442e:	4313      	orrs	r3, r2
 8004430:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004432:	693b      	ldr	r3, [r7, #16]
 8004434:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8004438:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800443a:	683b      	ldr	r3, [r7, #0]
 800443c:	689b      	ldr	r3, [r3, #8]
 800443e:	041b      	lsls	r3, r3, #16
 8004440:	693a      	ldr	r2, [r7, #16]
 8004442:	4313      	orrs	r3, r2
 8004444:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	4a13      	ldr	r2, [pc, #76]	; (8004498 <TIM_OC5_SetConfig+0xa4>)
 800444a:	4293      	cmp	r3, r2
 800444c:	d007      	beq.n	800445e <TIM_OC5_SetConfig+0x6a>
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	4a12      	ldr	r2, [pc, #72]	; (800449c <TIM_OC5_SetConfig+0xa8>)
 8004452:	4293      	cmp	r3, r2
 8004454:	d003      	beq.n	800445e <TIM_OC5_SetConfig+0x6a>
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	4a11      	ldr	r2, [pc, #68]	; (80044a0 <TIM_OC5_SetConfig+0xac>)
 800445a:	4293      	cmp	r3, r2
 800445c:	d109      	bne.n	8004472 <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800445e:	697b      	ldr	r3, [r7, #20]
 8004460:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004464:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004466:	683b      	ldr	r3, [r7, #0]
 8004468:	695b      	ldr	r3, [r3, #20]
 800446a:	021b      	lsls	r3, r3, #8
 800446c:	697a      	ldr	r2, [r7, #20]
 800446e:	4313      	orrs	r3, r2
 8004470:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	697a      	ldr	r2, [r7, #20]
 8004476:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	68fa      	ldr	r2, [r7, #12]
 800447c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800447e:	683b      	ldr	r3, [r7, #0]
 8004480:	685a      	ldr	r2, [r3, #4]
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	693a      	ldr	r2, [r7, #16]
 800448a:	621a      	str	r2, [r3, #32]
}
 800448c:	bf00      	nop
 800448e:	371c      	adds	r7, #28
 8004490:	46bd      	mov	sp, r7
 8004492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004496:	4770      	bx	lr
 8004498:	40012c00 	.word	0x40012c00
 800449c:	40014400 	.word	0x40014400
 80044a0:	40014800 	.word	0x40014800

080044a4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80044a4:	b480      	push	{r7}
 80044a6:	b087      	sub	sp, #28
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	6078      	str	r0, [r7, #4]
 80044ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	6a1b      	ldr	r3, [r3, #32]
 80044b2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	6a1b      	ldr	r3, [r3, #32]
 80044be:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	685b      	ldr	r3, [r3, #4]
 80044c4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80044d2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80044d6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80044d8:	683b      	ldr	r3, [r7, #0]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	021b      	lsls	r3, r3, #8
 80044de:	68fa      	ldr	r2, [r7, #12]
 80044e0:	4313      	orrs	r3, r2
 80044e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80044e4:	693b      	ldr	r3, [r7, #16]
 80044e6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80044ea:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80044ec:	683b      	ldr	r3, [r7, #0]
 80044ee:	689b      	ldr	r3, [r3, #8]
 80044f0:	051b      	lsls	r3, r3, #20
 80044f2:	693a      	ldr	r2, [r7, #16]
 80044f4:	4313      	orrs	r3, r2
 80044f6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	4a14      	ldr	r2, [pc, #80]	; (800454c <TIM_OC6_SetConfig+0xa8>)
 80044fc:	4293      	cmp	r3, r2
 80044fe:	d007      	beq.n	8004510 <TIM_OC6_SetConfig+0x6c>
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	4a13      	ldr	r2, [pc, #76]	; (8004550 <TIM_OC6_SetConfig+0xac>)
 8004504:	4293      	cmp	r3, r2
 8004506:	d003      	beq.n	8004510 <TIM_OC6_SetConfig+0x6c>
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	4a12      	ldr	r2, [pc, #72]	; (8004554 <TIM_OC6_SetConfig+0xb0>)
 800450c:	4293      	cmp	r3, r2
 800450e:	d109      	bne.n	8004524 <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004510:	697b      	ldr	r3, [r7, #20]
 8004512:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004516:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004518:	683b      	ldr	r3, [r7, #0]
 800451a:	695b      	ldr	r3, [r3, #20]
 800451c:	029b      	lsls	r3, r3, #10
 800451e:	697a      	ldr	r2, [r7, #20]
 8004520:	4313      	orrs	r3, r2
 8004522:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	697a      	ldr	r2, [r7, #20]
 8004528:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	68fa      	ldr	r2, [r7, #12]
 800452e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004530:	683b      	ldr	r3, [r7, #0]
 8004532:	685a      	ldr	r2, [r3, #4]
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	693a      	ldr	r2, [r7, #16]
 800453c:	621a      	str	r2, [r3, #32]
}
 800453e:	bf00      	nop
 8004540:	371c      	adds	r7, #28
 8004542:	46bd      	mov	sp, r7
 8004544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004548:	4770      	bx	lr
 800454a:	bf00      	nop
 800454c:	40012c00 	.word	0x40012c00
 8004550:	40014400 	.word	0x40014400
 8004554:	40014800 	.word	0x40014800

08004558 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004558:	b480      	push	{r7}
 800455a:	b087      	sub	sp, #28
 800455c:	af00      	add	r7, sp, #0
 800455e:	60f8      	str	r0, [r7, #12]
 8004560:	60b9      	str	r1, [r7, #8]
 8004562:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	6a1b      	ldr	r3, [r3, #32]
 8004568:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	6a1b      	ldr	r3, [r3, #32]
 800456e:	f023 0201 	bic.w	r2, r3, #1
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	699b      	ldr	r3, [r3, #24]
 800457a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800457c:	693b      	ldr	r3, [r7, #16]
 800457e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004582:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	011b      	lsls	r3, r3, #4
 8004588:	693a      	ldr	r2, [r7, #16]
 800458a:	4313      	orrs	r3, r2
 800458c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800458e:	697b      	ldr	r3, [r7, #20]
 8004590:	f023 030a 	bic.w	r3, r3, #10
 8004594:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004596:	697a      	ldr	r2, [r7, #20]
 8004598:	68bb      	ldr	r3, [r7, #8]
 800459a:	4313      	orrs	r3, r2
 800459c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	693a      	ldr	r2, [r7, #16]
 80045a2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	697a      	ldr	r2, [r7, #20]
 80045a8:	621a      	str	r2, [r3, #32]
}
 80045aa:	bf00      	nop
 80045ac:	371c      	adds	r7, #28
 80045ae:	46bd      	mov	sp, r7
 80045b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b4:	4770      	bx	lr

080045b6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80045b6:	b480      	push	{r7}
 80045b8:	b087      	sub	sp, #28
 80045ba:	af00      	add	r7, sp, #0
 80045bc:	60f8      	str	r0, [r7, #12]
 80045be:	60b9      	str	r1, [r7, #8]
 80045c0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	6a1b      	ldr	r3, [r3, #32]
 80045c6:	f023 0210 	bic.w	r2, r3, #16
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	699b      	ldr	r3, [r3, #24]
 80045d2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	6a1b      	ldr	r3, [r3, #32]
 80045d8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80045da:	697b      	ldr	r3, [r7, #20]
 80045dc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80045e0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	031b      	lsls	r3, r3, #12
 80045e6:	697a      	ldr	r2, [r7, #20]
 80045e8:	4313      	orrs	r3, r2
 80045ea:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80045ec:	693b      	ldr	r3, [r7, #16]
 80045ee:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80045f2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80045f4:	68bb      	ldr	r3, [r7, #8]
 80045f6:	011b      	lsls	r3, r3, #4
 80045f8:	693a      	ldr	r2, [r7, #16]
 80045fa:	4313      	orrs	r3, r2
 80045fc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	697a      	ldr	r2, [r7, #20]
 8004602:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	693a      	ldr	r2, [r7, #16]
 8004608:	621a      	str	r2, [r3, #32]
}
 800460a:	bf00      	nop
 800460c:	371c      	adds	r7, #28
 800460e:	46bd      	mov	sp, r7
 8004610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004614:	4770      	bx	lr

08004616 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004616:	b480      	push	{r7}
 8004618:	b085      	sub	sp, #20
 800461a:	af00      	add	r7, sp, #0
 800461c:	6078      	str	r0, [r7, #4]
 800461e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	689b      	ldr	r3, [r3, #8]
 8004624:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800462c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004630:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004632:	683a      	ldr	r2, [r7, #0]
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	4313      	orrs	r3, r2
 8004638:	f043 0307 	orr.w	r3, r3, #7
 800463c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	68fa      	ldr	r2, [r7, #12]
 8004642:	609a      	str	r2, [r3, #8]
}
 8004644:	bf00      	nop
 8004646:	3714      	adds	r7, #20
 8004648:	46bd      	mov	sp, r7
 800464a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800464e:	4770      	bx	lr

08004650 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004650:	b480      	push	{r7}
 8004652:	b087      	sub	sp, #28
 8004654:	af00      	add	r7, sp, #0
 8004656:	60f8      	str	r0, [r7, #12]
 8004658:	60b9      	str	r1, [r7, #8]
 800465a:	607a      	str	r2, [r7, #4]
 800465c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	689b      	ldr	r3, [r3, #8]
 8004662:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004664:	697b      	ldr	r3, [r7, #20]
 8004666:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800466a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800466c:	683b      	ldr	r3, [r7, #0]
 800466e:	021a      	lsls	r2, r3, #8
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	431a      	orrs	r2, r3
 8004674:	68bb      	ldr	r3, [r7, #8]
 8004676:	4313      	orrs	r3, r2
 8004678:	697a      	ldr	r2, [r7, #20]
 800467a:	4313      	orrs	r3, r2
 800467c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	697a      	ldr	r2, [r7, #20]
 8004682:	609a      	str	r2, [r3, #8]
}
 8004684:	bf00      	nop
 8004686:	371c      	adds	r7, #28
 8004688:	46bd      	mov	sp, r7
 800468a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800468e:	4770      	bx	lr

08004690 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004690:	b480      	push	{r7}
 8004692:	b087      	sub	sp, #28
 8004694:	af00      	add	r7, sp, #0
 8004696:	60f8      	str	r0, [r7, #12]
 8004698:	60b9      	str	r1, [r7, #8]
 800469a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800469c:	68bb      	ldr	r3, [r7, #8]
 800469e:	f003 031f 	and.w	r3, r3, #31
 80046a2:	2201      	movs	r2, #1
 80046a4:	fa02 f303 	lsl.w	r3, r2, r3
 80046a8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	6a1a      	ldr	r2, [r3, #32]
 80046ae:	697b      	ldr	r3, [r7, #20]
 80046b0:	43db      	mvns	r3, r3
 80046b2:	401a      	ands	r2, r3
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	6a1a      	ldr	r2, [r3, #32]
 80046bc:	68bb      	ldr	r3, [r7, #8]
 80046be:	f003 031f 	and.w	r3, r3, #31
 80046c2:	6879      	ldr	r1, [r7, #4]
 80046c4:	fa01 f303 	lsl.w	r3, r1, r3
 80046c8:	431a      	orrs	r2, r3
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	621a      	str	r2, [r3, #32]
}
 80046ce:	bf00      	nop
 80046d0:	371c      	adds	r7, #28
 80046d2:	46bd      	mov	sp, r7
 80046d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d8:	4770      	bx	lr
	...

080046dc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80046dc:	b480      	push	{r7}
 80046de:	b085      	sub	sp, #20
 80046e0:	af00      	add	r7, sp, #0
 80046e2:	6078      	str	r0, [r7, #4]
 80046e4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80046ec:	2b01      	cmp	r3, #1
 80046ee:	d101      	bne.n	80046f4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80046f0:	2302      	movs	r3, #2
 80046f2:	e04a      	b.n	800478a <HAL_TIMEx_MasterConfigSynchronization+0xae>
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	2201      	movs	r2, #1
 80046f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	2202      	movs	r2, #2
 8004700:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	685b      	ldr	r3, [r3, #4]
 800470a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	689b      	ldr	r3, [r3, #8]
 8004712:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	4a1f      	ldr	r2, [pc, #124]	; (8004798 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 800471a:	4293      	cmp	r3, r2
 800471c:	d108      	bne.n	8004730 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004724:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004726:	683b      	ldr	r3, [r7, #0]
 8004728:	685b      	ldr	r3, [r3, #4]
 800472a:	68fa      	ldr	r2, [r7, #12]
 800472c:	4313      	orrs	r3, r2
 800472e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004736:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004738:	683b      	ldr	r3, [r7, #0]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	68fa      	ldr	r2, [r7, #12]
 800473e:	4313      	orrs	r3, r2
 8004740:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	68fa      	ldr	r2, [r7, #12]
 8004748:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	4a12      	ldr	r2, [pc, #72]	; (8004798 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 8004750:	4293      	cmp	r3, r2
 8004752:	d004      	beq.n	800475e <HAL_TIMEx_MasterConfigSynchronization+0x82>
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800475c:	d10c      	bne.n	8004778 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800475e:	68bb      	ldr	r3, [r7, #8]
 8004760:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004764:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004766:	683b      	ldr	r3, [r7, #0]
 8004768:	689b      	ldr	r3, [r3, #8]
 800476a:	68ba      	ldr	r2, [r7, #8]
 800476c:	4313      	orrs	r3, r2
 800476e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	68ba      	ldr	r2, [r7, #8]
 8004776:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	2201      	movs	r2, #1
 800477c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	2200      	movs	r2, #0
 8004784:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004788:	2300      	movs	r3, #0
}
 800478a:	4618      	mov	r0, r3
 800478c:	3714      	adds	r7, #20
 800478e:	46bd      	mov	sp, r7
 8004790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004794:	4770      	bx	lr
 8004796:	bf00      	nop
 8004798:	40012c00 	.word	0x40012c00

0800479c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800479c:	b480      	push	{r7}
 800479e:	b085      	sub	sp, #20
 80047a0:	af00      	add	r7, sp, #0
 80047a2:	6078      	str	r0, [r7, #4]
 80047a4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80047a6:	2300      	movs	r3, #0
 80047a8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80047b0:	2b01      	cmp	r3, #1
 80047b2:	d101      	bne.n	80047b8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80047b4:	2302      	movs	r3, #2
 80047b6:	e078      	b.n	80048aa <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	2201      	movs	r2, #1
 80047bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80047c6:	683b      	ldr	r3, [r7, #0]
 80047c8:	68db      	ldr	r3, [r3, #12]
 80047ca:	4313      	orrs	r3, r2
 80047cc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80047d4:	683b      	ldr	r3, [r7, #0]
 80047d6:	689b      	ldr	r3, [r3, #8]
 80047d8:	4313      	orrs	r3, r2
 80047da:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80047e2:	683b      	ldr	r3, [r7, #0]
 80047e4:	685b      	ldr	r3, [r3, #4]
 80047e6:	4313      	orrs	r3, r2
 80047e8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80047f0:	683b      	ldr	r3, [r7, #0]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	4313      	orrs	r3, r2
 80047f6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80047fe:	683b      	ldr	r3, [r7, #0]
 8004800:	691b      	ldr	r3, [r3, #16]
 8004802:	4313      	orrs	r3, r2
 8004804:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800480c:	683b      	ldr	r3, [r7, #0]
 800480e:	695b      	ldr	r3, [r3, #20]
 8004810:	4313      	orrs	r3, r2
 8004812:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800481a:	683b      	ldr	r3, [r7, #0]
 800481c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800481e:	4313      	orrs	r3, r2
 8004820:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8004828:	683b      	ldr	r3, [r7, #0]
 800482a:	699b      	ldr	r3, [r3, #24]
 800482c:	041b      	lsls	r3, r3, #16
 800482e:	4313      	orrs	r3, r2
 8004830:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	4a20      	ldr	r2, [pc, #128]	; (80048b8 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8004838:	4293      	cmp	r3, r2
 800483a:	d106      	bne.n	800484a <HAL_TIMEx_ConfigBreakDeadTime+0xae>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8004842:	683b      	ldr	r3, [r7, #0]
 8004844:	69db      	ldr	r3, [r3, #28]
 8004846:	4313      	orrs	r3, r2
 8004848:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	4a1a      	ldr	r2, [pc, #104]	; (80048b8 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8004850:	4293      	cmp	r3, r2
 8004852:	d121      	bne.n	8004898 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800485a:	683b      	ldr	r3, [r7, #0]
 800485c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800485e:	051b      	lsls	r3, r3, #20
 8004860:	4313      	orrs	r3, r2
 8004862:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800486a:	683b      	ldr	r3, [r7, #0]
 800486c:	6a1b      	ldr	r3, [r3, #32]
 800486e:	4313      	orrs	r3, r2
 8004870:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8004878:	683b      	ldr	r3, [r7, #0]
 800487a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800487c:	4313      	orrs	r3, r2
 800487e:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	4a0c      	ldr	r2, [pc, #48]	; (80048b8 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8004886:	4293      	cmp	r3, r2
 8004888:	d106      	bne.n	8004898 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8004890:	683b      	ldr	r3, [r7, #0]
 8004892:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004894:	4313      	orrs	r3, r2
 8004896:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	68fa      	ldr	r2, [r7, #12]
 800489e:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	2200      	movs	r2, #0
 80048a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80048a8:	2300      	movs	r3, #0
}
 80048aa:	4618      	mov	r0, r3
 80048ac:	3714      	adds	r7, #20
 80048ae:	46bd      	mov	sp, r7
 80048b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b4:	4770      	bx	lr
 80048b6:	bf00      	nop
 80048b8:	40012c00 	.word	0x40012c00

080048bc <__libc_init_array>:
 80048bc:	b570      	push	{r4, r5, r6, lr}
 80048be:	4d0d      	ldr	r5, [pc, #52]	; (80048f4 <__libc_init_array+0x38>)
 80048c0:	4c0d      	ldr	r4, [pc, #52]	; (80048f8 <__libc_init_array+0x3c>)
 80048c2:	1b64      	subs	r4, r4, r5
 80048c4:	10a4      	asrs	r4, r4, #2
 80048c6:	2600      	movs	r6, #0
 80048c8:	42a6      	cmp	r6, r4
 80048ca:	d109      	bne.n	80048e0 <__libc_init_array+0x24>
 80048cc:	4d0b      	ldr	r5, [pc, #44]	; (80048fc <__libc_init_array+0x40>)
 80048ce:	4c0c      	ldr	r4, [pc, #48]	; (8004900 <__libc_init_array+0x44>)
 80048d0:	f000 f82e 	bl	8004930 <_init>
 80048d4:	1b64      	subs	r4, r4, r5
 80048d6:	10a4      	asrs	r4, r4, #2
 80048d8:	2600      	movs	r6, #0
 80048da:	42a6      	cmp	r6, r4
 80048dc:	d105      	bne.n	80048ea <__libc_init_array+0x2e>
 80048de:	bd70      	pop	{r4, r5, r6, pc}
 80048e0:	f855 3b04 	ldr.w	r3, [r5], #4
 80048e4:	4798      	blx	r3
 80048e6:	3601      	adds	r6, #1
 80048e8:	e7ee      	b.n	80048c8 <__libc_init_array+0xc>
 80048ea:	f855 3b04 	ldr.w	r3, [r5], #4
 80048ee:	4798      	blx	r3
 80048f0:	3601      	adds	r6, #1
 80048f2:	e7f2      	b.n	80048da <__libc_init_array+0x1e>
 80048f4:	080049f4 	.word	0x080049f4
 80048f8:	080049f4 	.word	0x080049f4
 80048fc:	080049f4 	.word	0x080049f4
 8004900:	080049f8 	.word	0x080049f8

08004904 <memcpy>:
 8004904:	440a      	add	r2, r1
 8004906:	4291      	cmp	r1, r2
 8004908:	f100 33ff 	add.w	r3, r0, #4294967295
 800490c:	d100      	bne.n	8004910 <memcpy+0xc>
 800490e:	4770      	bx	lr
 8004910:	b510      	push	{r4, lr}
 8004912:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004916:	f803 4f01 	strb.w	r4, [r3, #1]!
 800491a:	4291      	cmp	r1, r2
 800491c:	d1f9      	bne.n	8004912 <memcpy+0xe>
 800491e:	bd10      	pop	{r4, pc}

08004920 <memset>:
 8004920:	4402      	add	r2, r0
 8004922:	4603      	mov	r3, r0
 8004924:	4293      	cmp	r3, r2
 8004926:	d100      	bne.n	800492a <memset+0xa>
 8004928:	4770      	bx	lr
 800492a:	f803 1b01 	strb.w	r1, [r3], #1
 800492e:	e7f9      	b.n	8004924 <memset+0x4>

08004930 <_init>:
 8004930:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004932:	bf00      	nop
 8004934:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004936:	bc08      	pop	{r3}
 8004938:	469e      	mov	lr, r3
 800493a:	4770      	bx	lr

0800493c <_fini>:
 800493c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800493e:	bf00      	nop
 8004940:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004942:	bc08      	pop	{r3}
 8004944:	469e      	mov	lr, r3
 8004946:	4770      	bx	lr
